"""
    INDA HR - INtelligent Data Analysis for HR

     # Introduction  **INDA (INtelligent Data Analysis)** is an [Intervieweb](https://www.intervieweb.it/hrm/)  AI solution provided as a RESTful API.  The INDA pricing model is *credits-based*, which means that a certain number of credits is associated to each API request. Hence, users have to purchase a certain amount of credits (established according to their needs) which will be reduced  at each API call. INDA accepts and processes a user's request only if their credits quota is grater than - or,  at least, equal to - the number of credits required by that request. To obtain further details on the pricing, please visit our [site](https://inda.ai) or contact us.    INDA HR embraces a wide range of functionalities to manage the main elements of a recruitment process:   + [**candidate**](https://api.inda.ai/hr/docs/v2/#tag/Resume-Management) (hereafter also referred to as **resume** or **applicant**), or rather a  person looking for a job;  + [**job advertisement**](https://api.inda.ai/hr/docs/v2/#tag/JobAd-Management) (hereafter also referred to as **job ad**), which is a document   that collects all the main information and details about a job vacancy;  + [**application**](https://api.inda.ai/hr/docs/v2/#tag/Application-Management), that binds candidates to job ads; it is generated whenever a  candidate applies for a job.  Each of them has a specific set of methods that grants users the ability to create, read, update and delete the relative  documents, plus some special features based on AI approaches (such as *document parsing* or *semantic search*). They can be explored in their respective sections.  Data about the listed document types can be enriched by connecting them to other INDA supported entities, such as  [**companies**](https://api.inda.ai/hr/docs/v2/#tag/Company-Management) and [**universities**](https://api.inda.ai/hr/docs/v2/#tag/Universities), so that recruiters may  get a better and more detailed idea on the candidates' experiences and acquired skills.  All the functionalities mentioned above are meant to help recruiters during the talent acquisition process,  by exploiting the power of AI systems. Among the advantages a recruiter has by using this kind of systems, tackling the bias problem is surely one of the  most relevant. Bias in recruitment is a serious issue that affect both recruiters and candidates, since it may cause wrong hiring  decisions. As we care a lot about this problem, we are constantly working on reduce the bias in original data so that INDA  results may be as fair as possible. As of now, in order to tackle the bias issue, INDA automatically ignores specific fields (such as name, gender, age  and nationality) during the initial processing of each candidate data.  Furthermore, we decided to let users collect data of various types, including personal or sensitive details, but we  do not allow their usage if it is different from statistical purposes; our aim is to discourage recruiters from  focusing on candidates' personal information, and to put their attention on the candidate's skills and abilities.    We want to help recruiters to prevent any kind of bias while searching for the most valuable candidates they really need.    The following documentation is addressed both to developers, in order to provide all technical details for INDA integration, and to managers, to guide them in the exploration of the implementation possibilities.  The host of the API is [https://api.inda.ai/hr/v2/](https://api.inda.ai/hr/v2/). We recommend to check the API version and build (displayed near the documentation title). You can contact us at support@intervieweb.it in case of problems, suggestions, or particular needs.  The search panel on the left can be used to navigate through the documentation and provides an overview of the API structure. On the right, you can find (*i*) the url of the method, (*ii*) an example of request body (if present), and (*iii*) an example of response for each response code. Finally, in the central section of each API method, you can find (*i*) a general description of the purpose of the method, (*ii*) details on parameters and request body schema (if present), and (*iii*) details on response schema, error models, and error codes.    # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Contact: info@intervieweb.it
    Generated by: https://openapi-generator.tech
"""

import re  # noqa: F401
import sys  # noqa: F401

from inda_hr.model_utils import (  # noqa: F401
    ApiTypeError, ModelComposed, ModelNormal, ModelSimple, cached_property,
    change_keys_js_to_python, convert_js_args_to_python_args, date, datetime,
    file_type, none_type, validate_get_composed_info, OpenApiModel)
from inda_hr.exceptions import ApiAttributeError


def lazy_import():
    from inda_hr.model.achievement import Achievement
    from inda_hr.model.award import Award
    from inda_hr.model.certification import Certification
    from inda_hr.model.education_experience import EducationExperience
    from inda_hr.model.event import Event
    from inda_hr.model.license import License
    from inda_hr.model.military_service import MilitaryService
    from inda_hr.model.optional_resume_job_title import OptionalResumeJobTitle
    from inda_hr.model.optional_resume_language import OptionalResumeLanguage
    from inda_hr.model.optional_resume_skill import OptionalResumeSkill
    from inda_hr.model.other import Other
    from inda_hr.model.patent import Patent
    from inda_hr.model.person_location import PersonLocation
    from inda_hr.model.personal_info import PersonalInfo
    from inda_hr.model.profile_summary import ProfileSummary
    from inda_hr.model.project import Project
    from inda_hr.model.publication import Publication
    from inda_hr.model.reference import Reference
    from inda_hr.model.resume_contact_info_contact_info import ResumeContactInfoContactInfo
    from inda_hr.model.text import Text
    from inda_hr.model.work_experience import WorkExperience
    globals()['Achievement'] = Achievement
    globals()['Award'] = Award
    globals()['Certification'] = Certification
    globals()['EducationExperience'] = EducationExperience
    globals()['Event'] = Event
    globals()['License'] = License
    globals()['MilitaryService'] = MilitaryService
    globals()['OptionalResumeJobTitle'] = OptionalResumeJobTitle
    globals()['OptionalResumeLanguage'] = OptionalResumeLanguage
    globals()['OptionalResumeSkill'] = OptionalResumeSkill
    globals()['Other'] = Other
    globals()['Patent'] = Patent
    globals()['PersonLocation'] = PersonLocation
    globals()['PersonalInfo'] = PersonalInfo
    globals()['ProfileSummary'] = ProfileSummary
    globals()['Project'] = Project
    globals()['Publication'] = Publication
    globals()['Reference'] = Reference
    globals()['ResumeContactInfoContactInfo'] = ResumeContactInfoContactInfo
    globals()['Text'] = Text
    globals()['WorkExperience'] = WorkExperience


class ResumeCommonData(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {}

    validations = {}

    additional_properties_type = None

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'job_title': (OptionalResumeJobTitle, ),  # noqa: E501
            'personal_info': (PersonalInfo, ),  # noqa: E501
            'contact_info': (ResumeContactInfoContactInfo, ),  # noqa: E501
            'person_location': (PersonLocation, ),  # noqa: E501
            'headline': (Text, ),  # noqa: E501
            'education_experiences': ([EducationExperience], ),  # noqa: E501
            'work_experiences': ([WorkExperience], ),  # noqa: E501
            'cover_letter': (Text, ),  # noqa: E501
            'references': ([Reference], ),  # noqa: E501
            'profile_summary': (ProfileSummary, ),  # noqa: E501
            'skills': ([OptionalResumeSkill], ),  # noqa: E501
            'job_titles': ([OptionalResumeJobTitle], ),  # noqa: E501
            'languages': ([OptionalResumeLanguage], ),  # noqa: E501
            'certifications': ([Certification], ),  # noqa: E501
            'publications': ([Publication], ),  # noqa: E501
            'awards': ([Award], ),  # noqa: E501
            'projects': ([Project], ),  # noqa: E501
            'achievements': ([Achievement], ),  # noqa: E501
            'patents': ([Patent], ),  # noqa: E501
            'hobbies_and_interests': ([Text], ),  # noqa: E501
            'licenses': ([License], ),  # noqa: E501
            'volunteering': ([Event], ),  # noqa: E501
            'conference_and_seminars': ([Event], ),  # noqa: E501
            'military_history': ([MilitaryService], ),  # noqa: E501
            'others': ([Other], ),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None

    attribute_map = {
        'job_title': 'JobTitle',  # noqa: E501
        'personal_info': 'PersonalInfo',  # noqa: E501
        'contact_info': 'ContactInfo',  # noqa: E501
        'person_location': 'PersonLocation',  # noqa: E501
        'headline': 'Headline',  # noqa: E501
        'education_experiences': 'EducationExperiences',  # noqa: E501
        'work_experiences': 'WorkExperiences',  # noqa: E501
        'cover_letter': 'CoverLetter',  # noqa: E501
        'references': 'References',  # noqa: E501
        'profile_summary': 'ProfileSummary',  # noqa: E501
        'skills': 'Skills',  # noqa: E501
        'job_titles': 'JobTitles',  # noqa: E501
        'languages': 'Languages',  # noqa: E501
        'certifications': 'Certifications',  # noqa: E501
        'publications': 'Publications',  # noqa: E501
        'awards': 'Awards',  # noqa: E501
        'projects': 'Projects',  # noqa: E501
        'achievements': 'Achievements',  # noqa: E501
        'patents': 'Patents',  # noqa: E501
        'hobbies_and_interests': 'HobbiesAndInterests',  # noqa: E501
        'licenses': 'Licenses',  # noqa: E501
        'volunteering': 'Volunteering',  # noqa: E501
        'conference_and_seminars': 'ConferenceAndSeminars',  # noqa: E501
        'military_history': 'MilitaryHistory',  # noqa: E501
        'others': 'Others',  # noqa: E501
    }

    read_only_vars = {}

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """ResumeCommonData - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            job_title (OptionalResumeJobTitle): [optional]  # noqa: E501
            personal_info (PersonalInfo): [optional]  # noqa: E501
            contact_info (ResumeContactInfoContactInfo): [optional]  # noqa: E501
            person_location (PersonLocation): [optional]  # noqa: E501
            headline (Text): [optional]  # noqa: E501
            education_experiences ([EducationExperience]): Candidate's education experiences.. [optional]  # noqa: E501
            work_experiences ([WorkExperience]): Candidate's employment history.. [optional]  # noqa: E501
            cover_letter (Text): [optional]  # noqa: E501
            references ([Reference]): Candidate's references.. [optional]  # noqa: E501
            profile_summary (ProfileSummary): [optional]  # noqa: E501
            skills ([OptionalResumeSkill]): Candidate's skills.. [optional]  # noqa: E501
            job_titles ([OptionalResumeJobTitle]): Candidate's job titles.. [optional]  # noqa: E501
            languages ([OptionalResumeLanguage]): Candidate's language skills.. [optional]  # noqa: E501
            certifications ([Certification]): Certifications earned by the candidate.. [optional]  # noqa: E501
            publications ([Publication]): Candidate's publications, both academic papers and books.. [optional]  # noqa: E501
            awards ([Award]): List of the awards won by the candidate.. [optional]  # noqa: E501
            projects ([Project]): Projects the candidate worked or works on.. [optional]  # noqa: E501
            achievements ([Achievement]): Achievements earned by the candidate.. [optional]  # noqa: E501
            patents ([Patent]): Candidate's patents.. [optional]  # noqa: E501
            hobbies_and_interests ([Text]): List of candidate's hobbies and interests.. [optional]  # noqa: E501
            licenses ([License]): Candidate's licenses.. [optional]  # noqa: E501
            volunteering ([Event]): Candidate's works as volunteer.. [optional]  # noqa: E501
            conference_and_seminars ([Event]): Conferences and seminars that the candidate may have partecipated in.. [optional]  # noqa: E501
            military_history ([MilitaryService]): Candidate's military history.. [optional]  # noqa: E501
            others ([Other]): Candidate's additional information not covered by the previous fields.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', True)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments."
                        % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__, ),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (
            self.__class__, )

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """ResumeCommonData - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            job_title (OptionalResumeJobTitle): [optional]  # noqa: E501
            personal_info (PersonalInfo): [optional]  # noqa: E501
            contact_info (ResumeContactInfoContactInfo): [optional]  # noqa: E501
            person_location (PersonLocation): [optional]  # noqa: E501
            headline (Text): [optional]  # noqa: E501
            education_experiences ([EducationExperience]): Candidate's education experiences.. [optional]  # noqa: E501
            work_experiences ([WorkExperience]): Candidate's employment history.. [optional]  # noqa: E501
            cover_letter (Text): [optional]  # noqa: E501
            references ([Reference]): Candidate's references.. [optional]  # noqa: E501
            profile_summary (ProfileSummary): [optional]  # noqa: E501
            skills ([OptionalResumeSkill]): Candidate's skills.. [optional]  # noqa: E501
            job_titles ([OptionalResumeJobTitle]): Candidate's job titles.. [optional]  # noqa: E501
            languages ([OptionalResumeLanguage]): Candidate's language skills.. [optional]  # noqa: E501
            certifications ([Certification]): Certifications earned by the candidate.. [optional]  # noqa: E501
            publications ([Publication]): Candidate's publications, both academic papers and books.. [optional]  # noqa: E501
            awards ([Award]): List of the awards won by the candidate.. [optional]  # noqa: E501
            projects ([Project]): Projects the candidate worked or works on.. [optional]  # noqa: E501
            achievements ([Achievement]): Achievements earned by the candidate.. [optional]  # noqa: E501
            patents ([Patent]): Candidate's patents.. [optional]  # noqa: E501
            hobbies_and_interests ([Text]): List of candidate's hobbies and interests.. [optional]  # noqa: E501
            licenses ([License]): Candidate's licenses.. [optional]  # noqa: E501
            volunteering ([Event]): Candidate's works as volunteer.. [optional]  # noqa: E501
            conference_and_seminars ([Event]): Conferences and seminars that the candidate may have partecipated in.. [optional]  # noqa: E501
            military_history ([MilitaryService]): Candidate's military history.. [optional]  # noqa: E501
            others ([Other]): Candidate's additional information not covered by the previous fields.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments."
                        % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__, ),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (
            self.__class__, )

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(
                    f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                    f"class with read only attributes.")
