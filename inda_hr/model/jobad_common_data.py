# coding: utf-8
"""
    INDA HR - INtelligent Data Analysis for HR

     # Introduction  **INDA (INtelligent Data Analysis)** is an [Intervieweb](https://www.intervieweb.it/hrm/)  AI solution provided as a RESTful API.  The INDA pricing model is *credits-based*, which means that a certain number of credits is associated to each API request. Hence, users have to purchase a certain amount of credits (established according to their needs) which will be reduced  at each API call. INDA accepts and processes a user's request only if their credits quota is grater than - or,  at least, equal to - the number of credits required by that request. To obtain further details on the pricing, please visit our [site](https://inda.ai) or contact us.    INDA HR embraces a wide range of functionalities to manage the main elements of a recruitment process:   + [**candidate**](https://api.inda.ai/hr/docs/v2/#tag/Resume-Management) (hereafter also referred to as **resume** or **applicant**), or rather a  person looking for a job;  + [**job advertisement**](https://api.inda.ai/hr/docs/v2/#tag/JobAd-Management) (hereafter also referred to as **job ad**), which is a document   that collects all the main information and details about a job vacancy;  + [**application**](https://api.inda.ai/hr/docs/v2/#tag/Application-Management), that binds candidates to job ads; it is generated whenever a  candidate applies for a job.  Each of them has a specific set of methods that grants users the ability to create, read, update and delete the relative  documents, plus some special features based on AI approaches (such as *document parsing* or *semantic search*). They can be explored in their respective sections.  Data about the listed document types can be enriched by connecting them to other INDA supported entities, such as  [**companies**](https://api.inda.ai/hr/docs/v2/#tag/Company-Management) and [**universities**](https://api.inda.ai/hr/docs/v2/#tag/Universities), so that recruiters may  get a better and more detailed idea on the candidates' experiences and acquired skills.  All the functionalities mentioned above are meant to help recruiters during the talent acquisition process,  by exploiting the power of AI systems. Among the advantages a recruiter has by using this kind of systems, tackling the bias problem is surely one of the  most relevant. Bias in recruitment is a serious issue that affect both recruiters and candidates, since it may cause wrong hiring  decisions. As we care a lot about this problem, we are constantly working on reduce the bias in original data so that INDA  results may be as fair as possible. As of now, in order to tackle the bias issue, INDA automatically ignores specific fields (such as name, gender, age  and nationality) during the initial processing of each candidate data.  Furthermore, we decided to let users collect data of various types, including personal or sensitive details, but we  do not allow their usage if it is different from statistical purposes; our aim is to discourage recruiters from  focusing on candidates' personal information, and to put their attention on the candidate's skills and abilities.    We want to help recruiters to prevent any kind of bias while searching for the most valuable candidates they really need.    The following documentation is addressed both to developers, in order to provide all technical details for INDA integration, and to managers, to guide them in the exploration of the implementation possibilities.  The host of the API is [https://api.inda.ai/hr/v2/](https://api.inda.ai/hr/v2/). We recommend to check the API version and build (displayed near the documentation title). You can contact us at support@intervieweb.it in case of problems, suggestions, or particular needs.  The search panel on the left can be used to navigate through the documentation and provides an overview of the API structure. On the right, you can find (*i*) the url of the method, (*ii*) an example of request body (if present), and (*iii*) an example of response for each response code. Finally, in the central section of each API method, you can find (*i*) a general description of the purpose of the method, (*ii*) details on parameters and request body schema (if present), and (*iii*) details on response schema, error models, and error codes.    # noqa: E501

    The version of the OpenAPI document: 2.32211
    Contact: info@intervieweb.it
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from inda_hr import schemas  # noqa: F401


class JobadCommonData(schemas.DictSchema):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    class MetaOapg:
        required = {
            "JobDescription",
            "Skills",
            "JobTitle",
        }

        class properties:

            @staticmethod
            def JobTitle() -> typing.Type['JobTitleHeader']:
                return JobTitleHeader

            @staticmethod
            def JobDescription() -> typing.Type['JobDescription']:
                return JobDescription

            class Skills(
                    schemas.ComposedSchema, ):

                class MetaOapg:

                    @classmethod
                    @functools.lru_cache()
                    def any_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            RequiredAndPreferredConListSkills,
                            RequiredConListSkills,
                            PreferredConListSkills,
                        ]

                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str,
                                         date, datetime, uuid.UUID, int, float,
                                         decimal.Decimal, bool, None, list,
                                         tuple, bytes, io.FileIO,
                                         io.BufferedReader, ],
                    _configuration: typing.Optional[
                        schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict,
                                           frozendict.frozendict, str, date,
                                           datetime, uuid.UUID, int, float,
                                           decimal.Decimal, None, list, tuple,
                                           bytes],
                ) -> 'Skills':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )

            EmployerID = schemas.StrSchema

            class ContactInfo(schemas.ListSchema):

                class MetaOapg:

                    @staticmethod
                    def items() -> typing.Type['JobadContactInfoContactInfo']:
                        return JobadContactInfoContactInfo

                def __new__(
                    cls,
                    _arg: typing.Union[
                        typing.Tuple['JobadContactInfoContactInfo'],
                        typing.List['JobadContactInfoContactInfo']],
                    _configuration: typing.Optional[
                        schemas.Configuration] = None,
                ) -> 'ContactInfo':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )

                def __getitem__(self, i: int) -> 'JobadContactInfoContactInfo':
                    return super().__getitem__(i)

            class JobLocations(schemas.ListSchema):

                class MetaOapg:

                    @staticmethod
                    def items() -> typing.Type['BaseLocationsLocation']:
                        return BaseLocationsLocation

                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['BaseLocationsLocation'],
                                       typing.List['BaseLocationsLocation']],
                    _configuration: typing.Optional[
                        schemas.Configuration] = None,
                ) -> 'JobLocations':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )

                def __getitem__(self, i: int) -> 'BaseLocationsLocation':
                    return super().__getitem__(i)

            @staticmethod
            def RelocationPreferences(
            ) -> typing.Type['RelocationPreferences']:
                return RelocationPreferences

            @staticmethod
            def RemoteWorking() -> typing.Type['JobAdRemoteWorking']:
                return JobAdRemoteWorking

            @staticmethod
            def Experience() -> typing.Type['Experience']:
                return Experience

            @staticmethod
            def Education(
            ) -> typing.Type['OptionalRequiredAndPreferredEducation']:
                return OptionalRequiredAndPreferredEducation

            @staticmethod
            def Languages(
            ) -> typing.Type['OptionalRequiredAndPreferredConListLanguages']:
                return OptionalRequiredAndPreferredConListLanguages

            class RelatedJobTitles(schemas.ListSchema):

                class MetaOapg:
                    max_items = 10
                    min_items = 1

                    @staticmethod
                    def items() -> typing.Type['OptionalJobAdJobTitle']:
                        return OptionalJobAdJobTitle

                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['OptionalJobAdJobTitle'],
                                       typing.List['OptionalJobAdJobTitle']],
                    _configuration: typing.Optional[
                        schemas.Configuration] = None,
                ) -> 'RelatedJobTitles':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )

                def __getitem__(self, i: int) -> 'OptionalJobAdJobTitle':
                    return super().__getitem__(i)

            @staticmethod
            def Employment() -> typing.Type['JobTitleEmployment']:
                return JobTitleEmployment

            @staticmethod
            def Contract() -> typing.Type['JobAdContract']:
                return JobAdContract

            @staticmethod
            def Publisher() -> typing.Type['Publisher']:
                return Publisher

            @staticmethod
            def JobShift() -> typing.Type['JobShift']:
                return JobShift

            @staticmethod
            def NumberOfOpenings() -> typing.Type['ValueModelInt']:
                return ValueModelInt

            @staticmethod
            def Link() -> typing.Type['JobadLinkLink']:
                return JobadLinkLink

            class AdvertisementSites(schemas.ListSchema):

                class MetaOapg:

                    @staticmethod
                    def items() -> typing.Type['JobadLinkLink']:
                        return JobadLinkLink

                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['JobadLinkLink'],
                                       typing.List['JobadLinkLink']],
                    _configuration: typing.Optional[
                        schemas.Configuration] = None,
                ) -> 'AdvertisementSites':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )

                def __getitem__(self, i: int) -> 'JobadLinkLink':
                    return super().__getitem__(i)

            @staticmethod
            def Salary() -> typing.Type['JobAdSalary']:
                return JobAdSalary

            class Benefits(schemas.ListSchema):

                class MetaOapg:

                    @staticmethod
                    def items() -> typing.Type['JobAdBenefit']:
                        return JobAdBenefit

                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['JobAdBenefit'],
                                       typing.List['JobAdBenefit']],
                    _configuration: typing.Optional[
                        schemas.Configuration] = None,
                ) -> 'Benefits':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )

                def __getitem__(self, i: int) -> 'JobAdBenefit':
                    return super().__getitem__(i)

            @staticmethod
            def ExpirationDate() -> typing.Type['ValueModelDatetime']:
                return ValueModelDatetime

            @staticmethod
            def Status() -> typing.Type['JobadCommonValueModelStr']:
                return JobadCommonValueModelStr

            __annotations__ = {
                "JobTitle": JobTitle,
                "JobDescription": JobDescription,
                "Skills": Skills,
                "EmployerID": EmployerID,
                "ContactInfo": ContactInfo,
                "JobLocations": JobLocations,
                "RelocationPreferences": RelocationPreferences,
                "RemoteWorking": RemoteWorking,
                "Experience": Experience,
                "Education": Education,
                "Languages": Languages,
                "RelatedJobTitles": RelatedJobTitles,
                "Employment": Employment,
                "Contract": Contract,
                "Publisher": Publisher,
                "JobShift": JobShift,
                "NumberOfOpenings": NumberOfOpenings,
                "Link": Link,
                "AdvertisementSites": AdvertisementSites,
                "Salary": Salary,
                "Benefits": Benefits,
                "ExpirationDate": ExpirationDate,
                "Status": Status,
            }

        additional_properties = schemas.NotAnyTypeSchema

    JobDescription: 'JobDescription'
    Skills: MetaOapg.properties.Skills
    JobTitle: 'JobTitleHeader'

    @typing.overload
    def __getitem__(
            self, name: typing_extensions.Literal["JobDescription"]
    ) -> 'JobDescription':
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["Skills"]
    ) -> MetaOapg.properties.Skills:
        ...

    @typing.overload
    def __getitem__(
            self,
            name: typing_extensions.Literal["JobTitle"]) -> 'JobTitleHeader':
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["EmployerID"]
    ) -> MetaOapg.properties.EmployerID:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["ContactInfo"]
    ) -> MetaOapg.properties.ContactInfo:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["JobLocations"]
    ) -> MetaOapg.properties.JobLocations:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["RelocationPreferences"]
    ) -> 'RelocationPreferences':
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["RemoteWorking"]
    ) -> 'JobAdRemoteWorking':
        ...

    @typing.overload
    def __getitem__(
            self,
            name: typing_extensions.Literal["Experience"]) -> 'Experience':
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["Education"]
    ) -> 'OptionalRequiredAndPreferredEducation':
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["Languages"]
    ) -> 'OptionalRequiredAndPreferredConListLanguages':
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["RelatedJobTitles"]
    ) -> MetaOapg.properties.RelatedJobTitles:
        ...

    @typing.overload
    def __getitem__(
            self, name: typing_extensions.Literal["Employment"]
    ) -> 'JobTitleEmployment':
        ...

    @typing.overload
    def __getitem__(
            self,
            name: typing_extensions.Literal["Contract"]) -> 'JobAdContract':
        ...

    @typing.overload
    def __getitem__(
            self, name: typing_extensions.Literal["Publisher"]) -> 'Publisher':
        ...

    @typing.overload
    def __getitem__(self,
                    name: typing_extensions.Literal["JobShift"]) -> 'JobShift':
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["NumberOfOpenings"]
    ) -> 'ValueModelInt':
        ...

    @typing.overload
    def __getitem__(
            self, name: typing_extensions.Literal["Link"]) -> 'JobadLinkLink':
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["AdvertisementSites"]
    ) -> MetaOapg.properties.AdvertisementSites:
        ...

    @typing.overload
    def __getitem__(
            self, name: typing_extensions.Literal["Salary"]) -> 'JobAdSalary':
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["Benefits"]
    ) -> MetaOapg.properties.Benefits:
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["ExpirationDate"]
    ) -> 'ValueModelDatetime':
        ...

    @typing.overload
    def __getitem__(
        self, name: typing_extensions.Literal["Status"]
    ) -> 'JobadCommonValueModelStr':
        ...

    def __getitem__(
        self,
        name: typing.Union[typing_extensions.Literal["JobDescription"],
                           typing_extensions.Literal["Skills"],
                           typing_extensions.Literal["JobTitle"],
                           typing_extensions.Literal["EmployerID"],
                           typing_extensions.Literal["ContactInfo"],
                           typing_extensions.Literal["JobLocations"],
                           typing_extensions.Literal["RelocationPreferences"],
                           typing_extensions.Literal["RemoteWorking"],
                           typing_extensions.Literal["Experience"],
                           typing_extensions.Literal["Education"],
                           typing_extensions.Literal["Languages"],
                           typing_extensions.Literal["RelatedJobTitles"],
                           typing_extensions.Literal["Employment"],
                           typing_extensions.Literal["Contract"],
                           typing_extensions.Literal["Publisher"],
                           typing_extensions.Literal["JobShift"],
                           typing_extensions.Literal["NumberOfOpenings"],
                           typing_extensions.Literal["Link"],
                           typing_extensions.Literal["AdvertisementSites"],
                           typing_extensions.Literal["Salary"],
                           typing_extensions.Literal["Benefits"],
                           typing_extensions.Literal["ExpirationDate"],
                           typing_extensions.Literal["Status"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)

    @typing.overload
    def get_item_oapg(
            self, name: typing_extensions.Literal["JobDescription"]
    ) -> 'JobDescription':
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["Skills"]
    ) -> MetaOapg.properties.Skills:
        ...

    @typing.overload
    def get_item_oapg(
            self,
            name: typing_extensions.Literal["JobTitle"]) -> 'JobTitleHeader':
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["EmployerID"]
    ) -> typing.Union[MetaOapg.properties.EmployerID, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["ContactInfo"]
    ) -> typing.Union[MetaOapg.properties.ContactInfo, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["JobLocations"]
    ) -> typing.Union[MetaOapg.properties.JobLocations, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["RelocationPreferences"]
    ) -> typing.Union['RelocationPreferences', schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["RemoteWorking"]
    ) -> typing.Union['JobAdRemoteWorking', schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["Experience"]
    ) -> typing.Union['Experience', schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["Education"]
    ) -> typing.Union['OptionalRequiredAndPreferredEducation', schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["Languages"]
    ) -> typing.Union['OptionalRequiredAndPreferredConListLanguages',
                      schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["RelatedJobTitles"]
    ) -> typing.Union[MetaOapg.properties.RelatedJobTitles, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["Employment"]
    ) -> typing.Union['JobTitleEmployment', schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["Contract"]
    ) -> typing.Union['JobAdContract', schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["Publisher"]
    ) -> typing.Union['Publisher', schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["JobShift"]
    ) -> typing.Union['JobShift', schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["NumberOfOpenings"]
    ) -> typing.Union['ValueModelInt', schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["Link"]
    ) -> typing.Union['JobadLinkLink', schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["AdvertisementSites"]
    ) -> typing.Union[MetaOapg.properties.AdvertisementSites, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["Salary"]
    ) -> typing.Union['JobAdSalary', schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["Benefits"]
    ) -> typing.Union[MetaOapg.properties.Benefits, schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["ExpirationDate"]
    ) -> typing.Union['ValueModelDatetime', schemas.Unset]:
        ...

    @typing.overload
    def get_item_oapg(
        self, name: typing_extensions.Literal["Status"]
    ) -> typing.Union['JobadCommonValueModelStr', schemas.Unset]:
        ...

    def get_item_oapg(
        self,
        name: typing.Union[typing_extensions.Literal["JobDescription"],
                           typing_extensions.Literal["Skills"],
                           typing_extensions.Literal["JobTitle"],
                           typing_extensions.Literal["EmployerID"],
                           typing_extensions.Literal["ContactInfo"],
                           typing_extensions.Literal["JobLocations"],
                           typing_extensions.Literal["RelocationPreferences"],
                           typing_extensions.Literal["RemoteWorking"],
                           typing_extensions.Literal["Experience"],
                           typing_extensions.Literal["Education"],
                           typing_extensions.Literal["Languages"],
                           typing_extensions.Literal["RelatedJobTitles"],
                           typing_extensions.Literal["Employment"],
                           typing_extensions.Literal["Contract"],
                           typing_extensions.Literal["Publisher"],
                           typing_extensions.Literal["JobShift"],
                           typing_extensions.Literal["NumberOfOpenings"],
                           typing_extensions.Literal["Link"],
                           typing_extensions.Literal["AdvertisementSites"],
                           typing_extensions.Literal["Salary"],
                           typing_extensions.Literal["Benefits"],
                           typing_extensions.Literal["ExpirationDate"],
                           typing_extensions.Literal["Status"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        JobDescription: 'JobDescription',
        Skills: typing.Union[MetaOapg.properties.Skills, dict,
                             frozendict.frozendict, str, date, datetime,
                             uuid.UUID, int, float, decimal.Decimal, bool,
                             None, list, tuple, bytes, io.FileIO,
                             io.BufferedReader, ],
        JobTitle: 'JobTitleHeader',
        EmployerID: typing.Union[MetaOapg.properties.EmployerID, str,
                                 schemas.Unset] = schemas.unset,
        ContactInfo: typing.Union[MetaOapg.properties.ContactInfo, list, tuple,
                                  schemas.Unset] = schemas.unset,
        JobLocations: typing.Union[MetaOapg.properties.JobLocations, list,
                                   tuple, schemas.Unset] = schemas.unset,
        RelocationPreferences: typing.Union['RelocationPreferences',
                                            schemas.Unset] = schemas.unset,
        RemoteWorking: typing.Union['JobAdRemoteWorking',
                                    schemas.Unset] = schemas.unset,
        Experience: typing.Union['Experience', schemas.Unset] = schemas.unset,
        Education: typing.Union['OptionalRequiredAndPreferredEducation',
                                schemas.Unset] = schemas.unset,
        Languages: typing.Union['OptionalRequiredAndPreferredConListLanguages',
                                schemas.Unset] = schemas.unset,
        RelatedJobTitles: typing.Union[MetaOapg.properties.RelatedJobTitles,
                                       list, tuple,
                                       schemas.Unset] = schemas.unset,
        Employment: typing.Union['JobTitleEmployment',
                                 schemas.Unset] = schemas.unset,
        Contract: typing.Union['JobAdContract', schemas.Unset] = schemas.unset,
        Publisher: typing.Union['Publisher', schemas.Unset] = schemas.unset,
        JobShift: typing.Union['JobShift', schemas.Unset] = schemas.unset,
        NumberOfOpenings: typing.Union['ValueModelInt',
                                       schemas.Unset] = schemas.unset,
        Link: typing.Union['JobadLinkLink', schemas.Unset] = schemas.unset,
        AdvertisementSites: typing.Union[
            MetaOapg.properties.AdvertisementSites, list, tuple,
            schemas.Unset] = schemas.unset,
        Salary: typing.Union['JobAdSalary', schemas.Unset] = schemas.unset,
        Benefits: typing.Union[MetaOapg.properties.Benefits, list, tuple,
                               schemas.Unset] = schemas.unset,
        ExpirationDate: typing.Union['ValueModelDatetime',
                                     schemas.Unset] = schemas.unset,
        Status: typing.Union['JobadCommonValueModelStr',
                             schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'JobadCommonData':
        return super().__new__(
            cls,
            *_args,
            JobDescription=JobDescription,
            Skills=Skills,
            JobTitle=JobTitle,
            EmployerID=EmployerID,
            ContactInfo=ContactInfo,
            JobLocations=JobLocations,
            RelocationPreferences=RelocationPreferences,
            RemoteWorking=RemoteWorking,
            Experience=Experience,
            Education=Education,
            Languages=Languages,
            RelatedJobTitles=RelatedJobTitles,
            Employment=Employment,
            Contract=Contract,
            Publisher=Publisher,
            JobShift=JobShift,
            NumberOfOpenings=NumberOfOpenings,
            Link=Link,
            AdvertisementSites=AdvertisementSites,
            Salary=Salary,
            Benefits=Benefits,
            ExpirationDate=ExpirationDate,
            Status=Status,
            _configuration=_configuration,
        )


from inda_hr.model.base_locations_location import BaseLocationsLocation
from inda_hr.model.experience import Experience
from inda_hr.model.job_ad_benefit import JobAdBenefit
from inda_hr.model.job_ad_contract import JobAdContract
from inda_hr.model.job_ad_remote_working import JobAdRemoteWorking
from inda_hr.model.job_ad_salary import JobAdSalary
from inda_hr.model.job_description import JobDescription
from inda_hr.model.job_shift import JobShift
from inda_hr.model.job_title_employment import JobTitleEmployment
from inda_hr.model.job_title_header import JobTitleHeader
from inda_hr.model.jobad_common_value_model_str import JobadCommonValueModelStr
from inda_hr.model.jobad_contact_info_contact_info import JobadContactInfoContactInfo
from inda_hr.model.jobad_link_link import JobadLinkLink
from inda_hr.model.optional_job_ad_job_title import OptionalJobAdJobTitle
from inda_hr.model.optional_required_and_preferred_con_list_languages import OptionalRequiredAndPreferredConListLanguages
from inda_hr.model.optional_required_and_preferred_education import OptionalRequiredAndPreferredEducation
from inda_hr.model.preferred_con_list_skills import PreferredConListSkills
from inda_hr.model.publisher import Publisher
from inda_hr.model.relocation_preferences import RelocationPreferences
from inda_hr.model.required_and_preferred_con_list_skills import RequiredAndPreferredConListSkills
from inda_hr.model.required_con_list_skills import RequiredConListSkills
from inda_hr.model.value_model_datetime import ValueModelDatetime
from inda_hr.model.value_model_int import ValueModelInt
