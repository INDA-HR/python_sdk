# coding: utf-8

"""


    Generated by: https://openapi-generator.tech
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from urllib3._collections import HTTPHeaderDict

from inda_hr import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from inda_hr import schemas  # noqa: F401

from inda_hr.model.university_autocomplete_response import UniversityAutocompleteResponse
from inda_hr.model.http_validation_error import HTTPValidationError

from . import path

# Query params


class TermSchema(
    schemas.StrSchema
):


    class MetaOapg:
        min_length = 1


class SizeSchema(
    schemas.IntSchema
):


    class MetaOapg:
        inclusive_maximum = 30
        inclusive_minimum = 1


class TokenOrderSchema(
    schemas.EnumBase,
    schemas.StrSchema
):


    class MetaOapg:
        enum_value_to_name = {
            "any": "ANY",
            "sequential": "SEQUENTIAL",
        }
    
    @schemas.classproperty
    def ANY(cls):
        return cls("any")
    
    @schemas.classproperty
    def SEQUENTIAL(cls):
        return cls("sequential")
FuzzySchema = schemas.BoolSchema


class CitySchema(
    schemas.ListSchema
):


    class MetaOapg:
        
        
        class items(
            schemas.StrSchema
        ):
        
        
            class MetaOapg:
                min_length = 1

    def __new__(
        cls,
        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'CitySchema':
        return super().__new__(
            cls,
            _arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)


class CountrySchema(
    schemas.ListSchema
):


    class MetaOapg:
        
        
        class items(
            schemas.StrSchema
        ):
        
        
            class MetaOapg:
                min_length = 1

    def __new__(
        cls,
        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'CountrySchema':
        return super().__new__(
            cls,
            _arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)


class CountryCodeSchema(
    schemas.ListSchema
):


    class MetaOapg:
        
        
        class items(
            schemas.EnumBase,
            schemas.StrSchema
        ):
        
        
            class MetaOapg:
                enum_value_to_name = {
                    "AW": "AW",
                    "AF": "AF",
                    "AO": "AO",
                    "AI": "AI",
                    "AX": "AX",
                    "AL": "AL",
                    "AD": "AD",
                    "AE": "AE",
                    "AR": "AR",
                    "AM": "AM",
                    "AS": "AS",
                    "AQ": "AQ",
                    "TF": "TF",
                    "AG": "AG",
                    "AU": "AU",
                    "AT": "AT",
                    "AZ": "AZ",
                    "BI": "BI",
                    "BE": "BE",
                    "BJ": "BJ",
                    "BQ": "BQ",
                    "BF": "BF",
                    "BD": "BD",
                    "BG": "BG",
                    "BH": "BH",
                    "BS": "BS",
                    "BA": "BA",
                    "BL": "BL",
                    "BY": "BY",
                    "BZ": "BZ",
                    "BM": "BM",
                    "BO": "BO",
                    "BR": "BR",
                    "BB": "BB",
                    "BN": "BN",
                    "BT": "BT",
                    "BV": "BV",
                    "BW": "BW",
                    "CF": "CF",
                    "CA": "CA",
                    "CC": "CC",
                    "CH": "CH",
                    "CL": "CL",
                    "CN": "CN",
                    "CI": "CI",
                    "CM": "CM",
                    "CD": "CD",
                    "CG": "CG",
                    "CK": "CK",
                    "CO": "CO",
                    "KM": "KM",
                    "CV": "CV",
                    "CR": "CR",
                    "CU": "CU",
                    "CW": "CW",
                    "CX": "CX",
                    "KY": "KY",
                    "CY": "CY",
                    "CZ": "CZ",
                    "DE": "DE",
                    "DJ": "DJ",
                    "DM": "DM",
                    "DK": "DK",
                    "DO": "DO",
                    "DZ": "DZ",
                    "EC": "EC",
                    "EG": "EG",
                    "ER": "ER",
                    "EH": "EH",
                    "ES": "ES",
                    "EE": "EE",
                    "ET": "ET",
                    "FI": "FI",
                    "FJ": "FJ",
                    "FK": "FK",
                    "FR": "FR",
                    "FO": "FO",
                    "FM": "FM",
                    "GA": "GA",
                    "GB": "GB",
                    "GE": "GE",
                    "GG": "GG",
                    "GH": "GH",
                    "GI": "GI",
                    "GN": "GN",
                    "GP": "GP",
                    "GM": "GM",
                    "GW": "GW",
                    "GQ": "GQ",
                    "GR": "GR",
                    "GD": "GD",
                    "GL": "GL",
                    "GT": "GT",
                    "GF": "GF",
                    "GU": "GU",
                    "GY": "GY",
                    "HK": "HK",
                    "HM": "HM",
                    "HN": "HN",
                    "HR": "HR",
                    "HT": "HT",
                    "HU": "HU",
                    "ID": "ID",
                    "IM": "IM",
                    "IN": "IN",
                    "IO": "IO",
                    "IE": "IE",
                    "IR": "IR",
                    "IQ": "IQ",
                    "IS": "IS",
                    "IL": "IL",
                    "IT": "IT",
                    "JM": "JM",
                    "JE": "JE",
                    "JO": "JO",
                    "JP": "JP",
                    "KZ": "KZ",
                    "KE": "KE",
                    "KG": "KG",
                    "KH": "KH",
                    "KI": "KI",
                    "KN": "KN",
                    "KR": "KR",
                    "KW": "KW",
                    "LA": "LA",
                    "LB": "LB",
                    "LR": "LR",
                    "LY": "LY",
                    "LC": "LC",
                    "LI": "LI",
                    "LK": "LK",
                    "LS": "LS",
                    "LT": "LT",
                    "LU": "LU",
                    "LV": "LV",
                    "MO": "MO",
                    "MF": "MF",
                    "MA": "MA",
                    "MC": "MC",
                    "MD": "MD",
                    "MG": "MG",
                    "MV": "MV",
                    "MX": "MX",
                    "MH": "MH",
                    "MK": "MK",
                    "ML": "ML",
                    "MT": "MT",
                    "MM": "MM",
                    "ME": "ME",
                    "MN": "MN",
                    "MP": "MP",
                    "MZ": "MZ",
                    "MR": "MR",
                    "MS": "MS",
                    "MQ": "MQ",
                    "MU": "MU",
                    "MW": "MW",
                    "MY": "MY",
                    "YT": "YT",
                    "NA": "NA",
                    "NC": "NC",
                    "NE": "NE",
                    "NF": "NF",
                    "NG": "NG",
                    "NI": "NI",
                    "NU": "NU",
                    "NL": "NL",
                    "NO": "NO",
                    "NP": "NP",
                    "NR": "NR",
                    "NZ": "NZ",
                    "OM": "OM",
                    "PK": "PK",
                    "PA": "PA",
                    "PN": "PN",
                    "PE": "PE",
                    "PH": "PH",
                    "PW": "PW",
                    "PG": "PG",
                    "PL": "PL",
                    "PR": "PR",
                    "KP": "KP",
                    "PT": "PT",
                    "PY": "PY",
                    "PS": "PS",
                    "PF": "PF",
                    "QA": "QA",
                    "RE": "RE",
                    "RO": "RO",
                    "RU": "RU",
                    "RW": "RW",
                    "SA": "SA",
                    "SD": "SD",
                    "SN": "SN",
                    "SG": "SG",
                    "GS": "GS",
                    "SH": "SH",
                    "SJ": "SJ",
                    "SB": "SB",
                    "SL": "SL",
                    "SV": "SV",
                    "SM": "SM",
                    "SO": "SO",
                    "PM": "PM",
                    "RS": "RS",
                    "SS": "SS",
                    "ST": "ST",
                    "SR": "SR",
                    "SK": "SK",
                    "SI": "SI",
                    "SE": "SE",
                    "SZ": "SZ",
                    "SX": "SX",
                    "SC": "SC",
                    "SY": "SY",
                    "TC": "TC",
                    "TD": "TD",
                    "TG": "TG",
                    "TH": "TH",
                    "TJ": "TJ",
                    "TK": "TK",
                    "TM": "TM",
                    "TL": "TL",
                    "TO": "TO",
                    "TT": "TT",
                    "TN": "TN",
                    "TR": "TR",
                    "TV": "TV",
                    "TW": "TW",
                    "TZ": "TZ",
                    "UG": "UG",
                    "UA": "UA",
                    "UM": "UM",
                    "UY": "UY",
                    "US": "US",
                    "UZ": "UZ",
                    "VA": "VA",
                    "VC": "VC",
                    "VE": "VE",
                    "VG": "VG",
                    "VI": "VI",
                    "VN": "VN",
                    "VU": "VU",
                    "WF": "WF",
                    "WS": "WS",
                    "YE": "YE",
                    "ZA": "ZA",
                    "ZM": "ZM",
                    "ZW": "ZW",
                }
            
            @schemas.classproperty
            def AW(cls):
                return cls("AW")
            
            @schemas.classproperty
            def AF(cls):
                return cls("AF")
            
            @schemas.classproperty
            def AO(cls):
                return cls("AO")
            
            @schemas.classproperty
            def AI(cls):
                return cls("AI")
            
            @schemas.classproperty
            def AX(cls):
                return cls("AX")
            
            @schemas.classproperty
            def AL(cls):
                return cls("AL")
            
            @schemas.classproperty
            def AD(cls):
                return cls("AD")
            
            @schemas.classproperty
            def AE(cls):
                return cls("AE")
            
            @schemas.classproperty
            def AR(cls):
                return cls("AR")
            
            @schemas.classproperty
            def AM(cls):
                return cls("AM")
            
            @schemas.classproperty
            def AS(cls):
                return cls("AS")
            
            @schemas.classproperty
            def AQ(cls):
                return cls("AQ")
            
            @schemas.classproperty
            def TF(cls):
                return cls("TF")
            
            @schemas.classproperty
            def AG(cls):
                return cls("AG")
            
            @schemas.classproperty
            def AU(cls):
                return cls("AU")
            
            @schemas.classproperty
            def AT(cls):
                return cls("AT")
            
            @schemas.classproperty
            def AZ(cls):
                return cls("AZ")
            
            @schemas.classproperty
            def BI(cls):
                return cls("BI")
            
            @schemas.classproperty
            def BE(cls):
                return cls("BE")
            
            @schemas.classproperty
            def BJ(cls):
                return cls("BJ")
            
            @schemas.classproperty
            def BQ(cls):
                return cls("BQ")
            
            @schemas.classproperty
            def BF(cls):
                return cls("BF")
            
            @schemas.classproperty
            def BD(cls):
                return cls("BD")
            
            @schemas.classproperty
            def BG(cls):
                return cls("BG")
            
            @schemas.classproperty
            def BH(cls):
                return cls("BH")
            
            @schemas.classproperty
            def BS(cls):
                return cls("BS")
            
            @schemas.classproperty
            def BA(cls):
                return cls("BA")
            
            @schemas.classproperty
            def BL(cls):
                return cls("BL")
            
            @schemas.classproperty
            def BY(cls):
                return cls("BY")
            
            @schemas.classproperty
            def BZ(cls):
                return cls("BZ")
            
            @schemas.classproperty
            def BM(cls):
                return cls("BM")
            
            @schemas.classproperty
            def BO(cls):
                return cls("BO")
            
            @schemas.classproperty
            def BR(cls):
                return cls("BR")
            
            @schemas.classproperty
            def BB(cls):
                return cls("BB")
            
            @schemas.classproperty
            def BN(cls):
                return cls("BN")
            
            @schemas.classproperty
            def BT(cls):
                return cls("BT")
            
            @schemas.classproperty
            def BV(cls):
                return cls("BV")
            
            @schemas.classproperty
            def BW(cls):
                return cls("BW")
            
            @schemas.classproperty
            def CF(cls):
                return cls("CF")
            
            @schemas.classproperty
            def CA(cls):
                return cls("CA")
            
            @schemas.classproperty
            def CC(cls):
                return cls("CC")
            
            @schemas.classproperty
            def CH(cls):
                return cls("CH")
            
            @schemas.classproperty
            def CL(cls):
                return cls("CL")
            
            @schemas.classproperty
            def CN(cls):
                return cls("CN")
            
            @schemas.classproperty
            def CI(cls):
                return cls("CI")
            
            @schemas.classproperty
            def CM(cls):
                return cls("CM")
            
            @schemas.classproperty
            def CD(cls):
                return cls("CD")
            
            @schemas.classproperty
            def CG(cls):
                return cls("CG")
            
            @schemas.classproperty
            def CK(cls):
                return cls("CK")
            
            @schemas.classproperty
            def CO(cls):
                return cls("CO")
            
            @schemas.classproperty
            def KM(cls):
                return cls("KM")
            
            @schemas.classproperty
            def CV(cls):
                return cls("CV")
            
            @schemas.classproperty
            def CR(cls):
                return cls("CR")
            
            @schemas.classproperty
            def CU(cls):
                return cls("CU")
            
            @schemas.classproperty
            def CW(cls):
                return cls("CW")
            
            @schemas.classproperty
            def CX(cls):
                return cls("CX")
            
            @schemas.classproperty
            def KY(cls):
                return cls("KY")
            
            @schemas.classproperty
            def CY(cls):
                return cls("CY")
            
            @schemas.classproperty
            def CZ(cls):
                return cls("CZ")
            
            @schemas.classproperty
            def DE(cls):
                return cls("DE")
            
            @schemas.classproperty
            def DJ(cls):
                return cls("DJ")
            
            @schemas.classproperty
            def DM(cls):
                return cls("DM")
            
            @schemas.classproperty
            def DK(cls):
                return cls("DK")
            
            @schemas.classproperty
            def DO(cls):
                return cls("DO")
            
            @schemas.classproperty
            def DZ(cls):
                return cls("DZ")
            
            @schemas.classproperty
            def EC(cls):
                return cls("EC")
            
            @schemas.classproperty
            def EG(cls):
                return cls("EG")
            
            @schemas.classproperty
            def ER(cls):
                return cls("ER")
            
            @schemas.classproperty
            def EH(cls):
                return cls("EH")
            
            @schemas.classproperty
            def ES(cls):
                return cls("ES")
            
            @schemas.classproperty
            def EE(cls):
                return cls("EE")
            
            @schemas.classproperty
            def ET(cls):
                return cls("ET")
            
            @schemas.classproperty
            def FI(cls):
                return cls("FI")
            
            @schemas.classproperty
            def FJ(cls):
                return cls("FJ")
            
            @schemas.classproperty
            def FK(cls):
                return cls("FK")
            
            @schemas.classproperty
            def FR(cls):
                return cls("FR")
            
            @schemas.classproperty
            def FO(cls):
                return cls("FO")
            
            @schemas.classproperty
            def FM(cls):
                return cls("FM")
            
            @schemas.classproperty
            def GA(cls):
                return cls("GA")
            
            @schemas.classproperty
            def GB(cls):
                return cls("GB")
            
            @schemas.classproperty
            def GE(cls):
                return cls("GE")
            
            @schemas.classproperty
            def GG(cls):
                return cls("GG")
            
            @schemas.classproperty
            def GH(cls):
                return cls("GH")
            
            @schemas.classproperty
            def GI(cls):
                return cls("GI")
            
            @schemas.classproperty
            def GN(cls):
                return cls("GN")
            
            @schemas.classproperty
            def GP(cls):
                return cls("GP")
            
            @schemas.classproperty
            def GM(cls):
                return cls("GM")
            
            @schemas.classproperty
            def GW(cls):
                return cls("GW")
            
            @schemas.classproperty
            def GQ(cls):
                return cls("GQ")
            
            @schemas.classproperty
            def GR(cls):
                return cls("GR")
            
            @schemas.classproperty
            def GD(cls):
                return cls("GD")
            
            @schemas.classproperty
            def GL(cls):
                return cls("GL")
            
            @schemas.classproperty
            def GT(cls):
                return cls("GT")
            
            @schemas.classproperty
            def GF(cls):
                return cls("GF")
            
            @schemas.classproperty
            def GU(cls):
                return cls("GU")
            
            @schemas.classproperty
            def GY(cls):
                return cls("GY")
            
            @schemas.classproperty
            def HK(cls):
                return cls("HK")
            
            @schemas.classproperty
            def HM(cls):
                return cls("HM")
            
            @schemas.classproperty
            def HN(cls):
                return cls("HN")
            
            @schemas.classproperty
            def HR(cls):
                return cls("HR")
            
            @schemas.classproperty
            def HT(cls):
                return cls("HT")
            
            @schemas.classproperty
            def HU(cls):
                return cls("HU")
            
            @schemas.classproperty
            def ID(cls):
                return cls("ID")
            
            @schemas.classproperty
            def IM(cls):
                return cls("IM")
            
            @schemas.classproperty
            def IN(cls):
                return cls("IN")
            
            @schemas.classproperty
            def IO(cls):
                return cls("IO")
            
            @schemas.classproperty
            def IE(cls):
                return cls("IE")
            
            @schemas.classproperty
            def IR(cls):
                return cls("IR")
            
            @schemas.classproperty
            def IQ(cls):
                return cls("IQ")
            
            @schemas.classproperty
            def IS(cls):
                return cls("IS")
            
            @schemas.classproperty
            def IL(cls):
                return cls("IL")
            
            @schemas.classproperty
            def IT(cls):
                return cls("IT")
            
            @schemas.classproperty
            def JM(cls):
                return cls("JM")
            
            @schemas.classproperty
            def JE(cls):
                return cls("JE")
            
            @schemas.classproperty
            def JO(cls):
                return cls("JO")
            
            @schemas.classproperty
            def JP(cls):
                return cls("JP")
            
            @schemas.classproperty
            def KZ(cls):
                return cls("KZ")
            
            @schemas.classproperty
            def KE(cls):
                return cls("KE")
            
            @schemas.classproperty
            def KG(cls):
                return cls("KG")
            
            @schemas.classproperty
            def KH(cls):
                return cls("KH")
            
            @schemas.classproperty
            def KI(cls):
                return cls("KI")
            
            @schemas.classproperty
            def KN(cls):
                return cls("KN")
            
            @schemas.classproperty
            def KR(cls):
                return cls("KR")
            
            @schemas.classproperty
            def KW(cls):
                return cls("KW")
            
            @schemas.classproperty
            def LA(cls):
                return cls("LA")
            
            @schemas.classproperty
            def LB(cls):
                return cls("LB")
            
            @schemas.classproperty
            def LR(cls):
                return cls("LR")
            
            @schemas.classproperty
            def LY(cls):
                return cls("LY")
            
            @schemas.classproperty
            def LC(cls):
                return cls("LC")
            
            @schemas.classproperty
            def LI(cls):
                return cls("LI")
            
            @schemas.classproperty
            def LK(cls):
                return cls("LK")
            
            @schemas.classproperty
            def LS(cls):
                return cls("LS")
            
            @schemas.classproperty
            def LT(cls):
                return cls("LT")
            
            @schemas.classproperty
            def LU(cls):
                return cls("LU")
            
            @schemas.classproperty
            def LV(cls):
                return cls("LV")
            
            @schemas.classproperty
            def MO(cls):
                return cls("MO")
            
            @schemas.classproperty
            def MF(cls):
                return cls("MF")
            
            @schemas.classproperty
            def MA(cls):
                return cls("MA")
            
            @schemas.classproperty
            def MC(cls):
                return cls("MC")
            
            @schemas.classproperty
            def MD(cls):
                return cls("MD")
            
            @schemas.classproperty
            def MG(cls):
                return cls("MG")
            
            @schemas.classproperty
            def MV(cls):
                return cls("MV")
            
            @schemas.classproperty
            def MX(cls):
                return cls("MX")
            
            @schemas.classproperty
            def MH(cls):
                return cls("MH")
            
            @schemas.classproperty
            def MK(cls):
                return cls("MK")
            
            @schemas.classproperty
            def ML(cls):
                return cls("ML")
            
            @schemas.classproperty
            def MT(cls):
                return cls("MT")
            
            @schemas.classproperty
            def MM(cls):
                return cls("MM")
            
            @schemas.classproperty
            def ME(cls):
                return cls("ME")
            
            @schemas.classproperty
            def MN(cls):
                return cls("MN")
            
            @schemas.classproperty
            def MP(cls):
                return cls("MP")
            
            @schemas.classproperty
            def MZ(cls):
                return cls("MZ")
            
            @schemas.classproperty
            def MR(cls):
                return cls("MR")
            
            @schemas.classproperty
            def MS(cls):
                return cls("MS")
            
            @schemas.classproperty
            def MQ(cls):
                return cls("MQ")
            
            @schemas.classproperty
            def MU(cls):
                return cls("MU")
            
            @schemas.classproperty
            def MW(cls):
                return cls("MW")
            
            @schemas.classproperty
            def MY(cls):
                return cls("MY")
            
            @schemas.classproperty
            def YT(cls):
                return cls("YT")
            
            @schemas.classproperty
            def NA(cls):
                return cls("NA")
            
            @schemas.classproperty
            def NC(cls):
                return cls("NC")
            
            @schemas.classproperty
            def NE(cls):
                return cls("NE")
            
            @schemas.classproperty
            def NF(cls):
                return cls("NF")
            
            @schemas.classproperty
            def NG(cls):
                return cls("NG")
            
            @schemas.classproperty
            def NI(cls):
                return cls("NI")
            
            @schemas.classproperty
            def NU(cls):
                return cls("NU")
            
            @schemas.classproperty
            def NL(cls):
                return cls("NL")
            
            @schemas.classproperty
            def NO(cls):
                return cls("NO")
            
            @schemas.classproperty
            def NP(cls):
                return cls("NP")
            
            @schemas.classproperty
            def NR(cls):
                return cls("NR")
            
            @schemas.classproperty
            def NZ(cls):
                return cls("NZ")
            
            @schemas.classproperty
            def OM(cls):
                return cls("OM")
            
            @schemas.classproperty
            def PK(cls):
                return cls("PK")
            
            @schemas.classproperty
            def PA(cls):
                return cls("PA")
            
            @schemas.classproperty
            def PN(cls):
                return cls("PN")
            
            @schemas.classproperty
            def PE(cls):
                return cls("PE")
            
            @schemas.classproperty
            def PH(cls):
                return cls("PH")
            
            @schemas.classproperty
            def PW(cls):
                return cls("PW")
            
            @schemas.classproperty
            def PG(cls):
                return cls("PG")
            
            @schemas.classproperty
            def PL(cls):
                return cls("PL")
            
            @schemas.classproperty
            def PR(cls):
                return cls("PR")
            
            @schemas.classproperty
            def KP(cls):
                return cls("KP")
            
            @schemas.classproperty
            def PT(cls):
                return cls("PT")
            
            @schemas.classproperty
            def PY(cls):
                return cls("PY")
            
            @schemas.classproperty
            def PS(cls):
                return cls("PS")
            
            @schemas.classproperty
            def PF(cls):
                return cls("PF")
            
            @schemas.classproperty
            def QA(cls):
                return cls("QA")
            
            @schemas.classproperty
            def RE(cls):
                return cls("RE")
            
            @schemas.classproperty
            def RO(cls):
                return cls("RO")
            
            @schemas.classproperty
            def RU(cls):
                return cls("RU")
            
            @schemas.classproperty
            def RW(cls):
                return cls("RW")
            
            @schemas.classproperty
            def SA(cls):
                return cls("SA")
            
            @schemas.classproperty
            def SD(cls):
                return cls("SD")
            
            @schemas.classproperty
            def SN(cls):
                return cls("SN")
            
            @schemas.classproperty
            def SG(cls):
                return cls("SG")
            
            @schemas.classproperty
            def GS(cls):
                return cls("GS")
            
            @schemas.classproperty
            def SH(cls):
                return cls("SH")
            
            @schemas.classproperty
            def SJ(cls):
                return cls("SJ")
            
            @schemas.classproperty
            def SB(cls):
                return cls("SB")
            
            @schemas.classproperty
            def SL(cls):
                return cls("SL")
            
            @schemas.classproperty
            def SV(cls):
                return cls("SV")
            
            @schemas.classproperty
            def SM(cls):
                return cls("SM")
            
            @schemas.classproperty
            def SO(cls):
                return cls("SO")
            
            @schemas.classproperty
            def PM(cls):
                return cls("PM")
            
            @schemas.classproperty
            def RS(cls):
                return cls("RS")
            
            @schemas.classproperty
            def SS(cls):
                return cls("SS")
            
            @schemas.classproperty
            def ST(cls):
                return cls("ST")
            
            @schemas.classproperty
            def SR(cls):
                return cls("SR")
            
            @schemas.classproperty
            def SK(cls):
                return cls("SK")
            
            @schemas.classproperty
            def SI(cls):
                return cls("SI")
            
            @schemas.classproperty
            def SE(cls):
                return cls("SE")
            
            @schemas.classproperty
            def SZ(cls):
                return cls("SZ")
            
            @schemas.classproperty
            def SX(cls):
                return cls("SX")
            
            @schemas.classproperty
            def SC(cls):
                return cls("SC")
            
            @schemas.classproperty
            def SY(cls):
                return cls("SY")
            
            @schemas.classproperty
            def TC(cls):
                return cls("TC")
            
            @schemas.classproperty
            def TD(cls):
                return cls("TD")
            
            @schemas.classproperty
            def TG(cls):
                return cls("TG")
            
            @schemas.classproperty
            def TH(cls):
                return cls("TH")
            
            @schemas.classproperty
            def TJ(cls):
                return cls("TJ")
            
            @schemas.classproperty
            def TK(cls):
                return cls("TK")
            
            @schemas.classproperty
            def TM(cls):
                return cls("TM")
            
            @schemas.classproperty
            def TL(cls):
                return cls("TL")
            
            @schemas.classproperty
            def TO(cls):
                return cls("TO")
            
            @schemas.classproperty
            def TT(cls):
                return cls("TT")
            
            @schemas.classproperty
            def TN(cls):
                return cls("TN")
            
            @schemas.classproperty
            def TR(cls):
                return cls("TR")
            
            @schemas.classproperty
            def TV(cls):
                return cls("TV")
            
            @schemas.classproperty
            def TW(cls):
                return cls("TW")
            
            @schemas.classproperty
            def TZ(cls):
                return cls("TZ")
            
            @schemas.classproperty
            def UG(cls):
                return cls("UG")
            
            @schemas.classproperty
            def UA(cls):
                return cls("UA")
            
            @schemas.classproperty
            def UM(cls):
                return cls("UM")
            
            @schemas.classproperty
            def UY(cls):
                return cls("UY")
            
            @schemas.classproperty
            def US(cls):
                return cls("US")
            
            @schemas.classproperty
            def UZ(cls):
                return cls("UZ")
            
            @schemas.classproperty
            def VA(cls):
                return cls("VA")
            
            @schemas.classproperty
            def VC(cls):
                return cls("VC")
            
            @schemas.classproperty
            def VE(cls):
                return cls("VE")
            
            @schemas.classproperty
            def VG(cls):
                return cls("VG")
            
            @schemas.classproperty
            def VI(cls):
                return cls("VI")
            
            @schemas.classproperty
            def VN(cls):
                return cls("VN")
            
            @schemas.classproperty
            def VU(cls):
                return cls("VU")
            
            @schemas.classproperty
            def WF(cls):
                return cls("WF")
            
            @schemas.classproperty
            def WS(cls):
                return cls("WS")
            
            @schemas.classproperty
            def YE(cls):
                return cls("YE")
            
            @schemas.classproperty
            def ZA(cls):
                return cls("ZA")
            
            @schemas.classproperty
            def ZM(cls):
                return cls("ZM")
            
            @schemas.classproperty
            def ZW(cls):
                return cls("ZW")

    def __new__(
        cls,
        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'CountryCodeSchema':
        return super().__new__(
            cls,
            _arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)


class LatSchema(
    schemas.NumberSchema
):


    class MetaOapg:
        inclusive_maximum = 90.0
        inclusive_minimum = -90.0


class LonSchema(
    schemas.NumberSchema
):


    class MetaOapg:
        inclusive_maximum = 180.0
        inclusive_minimum = -180.0
PivotSchema = schemas.IntSchema
IncludeBranchesSchema = schemas.BoolSchema
RequestRequiredQueryParams = typing_extensions.TypedDict(
    'RequestRequiredQueryParams',
    {
        'term': typing.Union[TermSchema, str, ],
    }
)
RequestOptionalQueryParams = typing_extensions.TypedDict(
    'RequestOptionalQueryParams',
    {
        'size': typing.Union[SizeSchema, decimal.Decimal, int, ],
        'token_order': typing.Union[TokenOrderSchema, str, ],
        'fuzzy': typing.Union[FuzzySchema, bool, ],
        'city': typing.Union[CitySchema, list, tuple, ],
        'country': typing.Union[CountrySchema, list, tuple, ],
        'country_code': typing.Union[CountryCodeSchema, list, tuple, ],
        'lat': typing.Union[LatSchema, decimal.Decimal, int, float, ],
        'lon': typing.Union[LonSchema, decimal.Decimal, int, float, ],
        'pivot': typing.Union[PivotSchema, decimal.Decimal, int, ],
        'include_branches': typing.Union[IncludeBranchesSchema, bool, ],
    },
    total=False
)


class RequestQueryParams(RequestRequiredQueryParams, RequestOptionalQueryParams):
    pass


request_query_term = api_client.QueryParameter(
    name="term",
    style=api_client.ParameterStyle.FORM,
    schema=TermSchema,
    required=True,
    explode=True,
)
request_query_size = api_client.QueryParameter(
    name="size",
    style=api_client.ParameterStyle.FORM,
    schema=SizeSchema,
    explode=True,
)
request_query_token_order = api_client.QueryParameter(
    name="token_order",
    style=api_client.ParameterStyle.FORM,
    schema=TokenOrderSchema,
    explode=True,
)
request_query_fuzzy = api_client.QueryParameter(
    name="fuzzy",
    style=api_client.ParameterStyle.FORM,
    schema=FuzzySchema,
    explode=True,
)
request_query_city = api_client.QueryParameter(
    name="city",
    style=api_client.ParameterStyle.FORM,
    schema=CitySchema,
    explode=True,
)
request_query_country = api_client.QueryParameter(
    name="country",
    style=api_client.ParameterStyle.FORM,
    schema=CountrySchema,
    explode=True,
)
request_query_country_code = api_client.QueryParameter(
    name="country_code",
    style=api_client.ParameterStyle.FORM,
    schema=CountryCodeSchema,
    explode=True,
)
request_query_lat = api_client.QueryParameter(
    name="lat",
    style=api_client.ParameterStyle.FORM,
    schema=LatSchema,
    explode=True,
)
request_query_lon = api_client.QueryParameter(
    name="lon",
    style=api_client.ParameterStyle.FORM,
    schema=LonSchema,
    explode=True,
)
request_query_pivot = api_client.QueryParameter(
    name="pivot",
    style=api_client.ParameterStyle.FORM,
    schema=PivotSchema,
    explode=True,
)
request_query_include_branches = api_client.QueryParameter(
    name="include_branches",
    style=api_client.ParameterStyle.FORM,
    schema=IncludeBranchesSchema,
    explode=True,
)
_auth = [
    'APIKey',
]
SchemaFor200ResponseBodyApplicationJson = UniversityAutocompleteResponse


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor200ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
    },
)
SchemaFor422ResponseBodyApplicationJson = HTTPValidationError


@dataclass
class ApiResponseFor422(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor422ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_422 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor422,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor422ResponseBodyApplicationJson),
    },
)
_status_code_to_response = {
    '200': _response_for_200,
    '422': _response_for_422,
}
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):
    @typing.overload
    def _university_autocomplete_get_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def _university_autocomplete_get_oapg(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def _university_autocomplete_get_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def _university_autocomplete_get_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        """
        University Autocomplete
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        used_path = path.value

        prefix_separator_iterator = None
        for parameter in (
            request_query_term,
            request_query_size,
            request_query_token_order,
            request_query_fuzzy,
            request_query_city,
            request_query_country,
            request_query_country_code,
            request_query_lat,
            request_query_lon,
            request_query_pivot,
            request_query_include_branches,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value

        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)

        response = self.api_client.call_api(
            resource_path=used_path,
            method='get'.upper(),
            headers=_headers,
            auth_settings=_auth,
            stream=stream,
            timeout=timeout,
        )

        if skip_deserialization:
            api_response = api_client.ApiResponseWithoutDeserialization(response=response)
        else:
            response_for_status = _status_code_to_response.get(str(response.status))
            if response_for_status:
                api_response = response_for_status.deserialize(response, self.api_client.configuration)
            else:
                api_response = api_client.ApiResponseWithoutDeserialization(response=response)

        if not 200 <= response.status <= 299:
            raise exceptions.ApiException(
                status=response.status,
                reason=response.reason,
                api_response=api_response
            )

        return api_response


class UniversityAutocompleteGet(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    @typing.overload
    def university_autocomplete_get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def university_autocomplete_get(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def university_autocomplete_get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def university_autocomplete_get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._university_autocomplete_get_oapg(
            query_params=query_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


class ApiForget(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    @typing.overload
    def get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def get(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._university_autocomplete_get_oapg(
            query_params=query_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


