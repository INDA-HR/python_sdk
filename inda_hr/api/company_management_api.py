"""
    INDA HR - INtelligent Data Analysis for HR

     # Introduction  **INDA (INtelligent Data Analysis)** is an [Intervieweb](https://www.intervieweb.it/hrm/)  AI solution provided as a RESTful API.  The INDA pricing model is *credits-based*, which means that a certain number of credits is associated to each API request. Hence, users have to purchase a certain amount of credits (established according to their needs) which will be reduced  at each API call. INDA accepts and processes a user's request only if their credits quota is grater than - or,  at least, equal to - the number of credits required by that request. To obtain further details on the pricing, please visit our [site](https://inda.ai) or contact us.    INDA HR embraces a wide range of functionalities to manage the main elements of a recruitment process:   + [**candidate**](https://api.inda.ai/hr/docs/v2/#tag/Resume-Management) (hereafter also referred to as **resume** or **applicant**), or rather a  person looking for a job;  + [**job advertisement**](https://api.inda.ai/hr/docs/v2/#tag/JobAd-Management) (hereafter also referred to as **job ad**), which is a document   that collects all the main information and details about a job vacancy;  + [**application**](https://api.inda.ai/hr/docs/v2/#tag/Application-Management), that binds candidates to job ads; it is generated whenever a  candidate applies for a job.  Each of them has a specific set of methods that grants users the ability to create, read, update and delete the relative  documents, plus some special features based on AI approaches (such as *document parsing* or *semantic search*). They can be explored in their respective sections.  Data about the listed document types can be enriched by connecting them to other INDA supported entities, such as  [**companies**](https://api.inda.ai/hr/docs/v2/#tag/Company-Management) and [**universities**](https://api.inda.ai/hr/docs/v2/#tag/Universities), so that recruiters may  get a better and more detailed idea on the candidates' experiences and acquired skills.  All the functionalities mentioned above are meant to help recruiters during the talent acquisition process,  by exploiting the power of AI systems. Among the advantages a recruiter has by using this kind of systems, tackling the bias problem is surely one of the  most relevant. Bias in recruitment is a serious issue that affect both recruiters and candidates, since it may cause wrong hiring  decisions. As we care a lot about this problem, we are constantly working on reduce the bias in original data so that INDA  results may be as fair as possible. As of now, in order to tackle the bias issue, INDA automatically ignores specific fields (such as name, gender, age  and nationality) during the initial processing of each candidate data.  Furthermore, we decided to let users collect data of various types, including personal or sensitive details, but we  do not allow their usage if it is different from statistical purposes; our aim is to discourage recruiters from  focusing on candidates' personal information, and to put their attention on the candidate's skills and abilities.    We want to help recruiters to prevent any kind of bias while searching for the most valuable candidates they really need.    The following documentation is addressed both to developers, in order to provide all technical details for INDA integration, and to managers, to guide them in the exploration of the implementation possibilities.  The host of the API is [https://api.inda.ai/hr/v2/](https://api.inda.ai/hr/v2/). We recommend to check the API version and build (displayed near the documentation title). You can contact us at support@intervieweb.it in case of problems, suggestions, or particular needs.  The search panel on the left can be used to navigate through the documentation and provides an overview of the API structure. On the right, you can find (*i*) the url of the method, (*ii*) an example of request body (if present), and (*iii*) an example of response for each response code. Finally, in the central section of each API method, you can find (*i*) a general description of the purpose of the method, (*ii*) details on parameters and request body schema (if present), and (*iii*) details on response schema, error models, and error codes.    # noqa: E501

    The version of the OpenAPI document: 2.32211
    Contact: info@intervieweb.it
    Generated by: https://openapi-generator.tech
"""

import re  # noqa: F401
import sys  # noqa: F401

from inda_hr.api_client import ApiClient, Endpoint as _Endpoint
from inda_hr.model_utils import (  # noqa: F401
    check_allowed_values, check_validations, date, datetime, file_type,
    none_type, validate_and_convert_types)
from inda_hr.model.company_autocomplete_response import CompanyAutocompleteResponse
from inda_hr.model.company_id_response import CompanyIDResponse
from inda_hr.model.company_request import CompanyRequest
from inda_hr.model.error_model import ErrorModel
from inda_hr.model.get_company_response import GetCompanyResponse
from inda_hr.model.http_validation_error import HTTPValidationError
from inda_hr.model.patch_company_request import PatchCompanyRequest
from inda_hr.model.patch_company_response import PatchCompanyResponse


class CompanyManagementApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.add_company_post_endpoint = _Endpoint(settings={
            'response_type': (CompanyIDResponse, ),
            'auth': ['APIKey'],
            'endpoint_path':
            '/hr/v2/company/',
            'operation_id':
            'add_company_post',
            'http_method':
            'POST',
            'servers':
            None,
        },
                                                   params_map={
                                                       'all': [
                                                           'company_request',
                                                       ],
                                                       'required': [
                                                           'company_request',
                                                       ],
                                                       'nullable': [],
                                                       'enum': [],
                                                       'validation': []
                                                   },
                                                   root_map={
                                                       'validations': {},
                                                       'allowed_values': {},
                                                       'openapi_types': {
                                                           'company_request':
                                                           (CompanyRequest, ),
                                                       },
                                                       'attribute_map': {},
                                                       'location_map': {
                                                           'company_request':
                                                           'body',
                                                       },
                                                       'collection_format_map':
                                                       {}
                                                   },
                                                   headers_map={
                                                       'accept':
                                                       ['application/json'],
                                                       'content_type':
                                                       ['application/json']
                                                   },
                                                   api_client=api_client)
        self.company_autocomplete_get_endpoint = _Endpoint(
            settings={
                'response_type': (CompanyAutocompleteResponse, ),
                'auth': ['APIKey'],
                'endpoint_path': '/hr/v2/company/name/search/autocomplete/',
                'operation_id': 'company_autocomplete_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'term',
                    'size',
                    'token_order',
                    'fuzzy',
                ],
                'required': [
                    'term',
                ],
                'nullable': [],
                'enum': [
                    'token_order',
                ],
                'validation': [
                    'term',
                    'size',
                ]
            },
            root_map={
                'validations': {
                    ('term', ): {
                        'min_length': 2,
                    },
                    ('size', ): {
                        'inclusive_maximum': 20,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                    ('token_order', ): {
                        "ANY": "any",
                        "SEQUENTIAL": "sequential"
                    },
                },
                'openapi_types': {
                    'term': (str, ),
                    'size': (int, ),
                    'token_order': (str, ),
                    'fuzzy': (bool, ),
                },
                'attribute_map': {
                    'term': 'term',
                    'size': 'size',
                    'token_order': 'token_order',
                    'fuzzy': 'fuzzy',
                },
                'location_map': {
                    'term': 'query',
                    'size': 'query',
                    'token_order': 'query',
                    'fuzzy': 'query',
                },
                'collection_format_map': {}
            },
            headers_map={
                'accept': ['application/json'],
                'content_type': [],
            },
            api_client=api_client)
        self.get_company_get_endpoint = _Endpoint(settings={
            'response_type': (GetCompanyResponse, ),
            'auth': ['APIKey'],
            'endpoint_path':
            '/hr/v2/company/{company_id}/',
            'operation_id':
            'get_company_get',
            'http_method':
            'GET',
            'servers':
            None,
        },
                                                  params_map={
                                                      'all': [
                                                          'company_id',
                                                      ],
                                                      'required': [
                                                          'company_id',
                                                      ],
                                                      'nullable': [],
                                                      'enum': [],
                                                      'validation': []
                                                  },
                                                  root_map={
                                                      'validations': {},
                                                      'allowed_values': {},
                                                      'openapi_types': {
                                                          'company_id':
                                                          (str, ),
                                                      },
                                                      'attribute_map': {
                                                          'company_id':
                                                          'company_id',
                                                      },
                                                      'location_map': {
                                                          'company_id': 'path',
                                                      },
                                                      'collection_format_map':
                                                      {}
                                                  },
                                                  headers_map={
                                                      'accept':
                                                      ['application/json'],
                                                      'content_type': [],
                                                  },
                                                  api_client=api_client)
        self.patch_company_patch_endpoint = _Endpoint(
            settings={
                'response_type': (PatchCompanyResponse, ),
                'auth': ['APIKey'],
                'endpoint_path': '/hr/v2/company/{company_id}/',
                'operation_id': 'patch_company_patch',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'company_id',
                    'patch_company_request',
                ],
                'required': [
                    'company_id',
                    'patch_company_request',
                ],
                'nullable': [],
                'enum': [],
                'validation': []
            },
            root_map={
                'validations': {},
                'allowed_values': {},
                'openapi_types': {
                    'company_id': (str, ),
                    'patch_company_request': (PatchCompanyRequest, ),
                },
                'attribute_map': {
                    'company_id': 'company_id',
                },
                'location_map': {
                    'company_id': 'path',
                    'patch_company_request': 'body',
                },
                'collection_format_map': {}
            },
            headers_map={
                'accept': ['application/json'],
                'content_type': ['application/json']
            },
            api_client=api_client)

    def add_company_post(self, company_request, **kwargs):
        """Add Company  # noqa: E501

         This method adds a company to a shared database and assigns it a *CompanyID* (namely, a Unique Universal ID or UUID4). This method requires an application/json as content type body.  On the right, we provide an example of input structure; further details are available in dedicated sections.  After successfully adding the company to INDA, this method returns the assigned *CompanyID*.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.add_company_post(company_request, async_req=True)
        >>> result = thread.get()

        Args:
            company_request (CompanyRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            CompanyIDResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get('async_req', False)
        kwargs['_return_http_data_only'] = kwargs.get('_return_http_data_only',
                                                      True)
        kwargs['_preload_content'] = kwargs.get('_preload_content', True)
        kwargs['_request_timeout'] = kwargs.get('_request_timeout', None)
        kwargs['_check_input_type'] = kwargs.get('_check_input_type', True)
        kwargs['_check_return_type'] = kwargs.get('_check_return_type', True)
        kwargs['_spec_property_naming'] = kwargs.get('_spec_property_naming',
                                                     False)
        kwargs['_content_type'] = kwargs.get('_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['company_request'] = \
            company_request
        return self.add_company_post_endpoint.call_with_http_info(**kwargs)

    def company_autocomplete_get(self, term, **kwargs):
        """Company Autocomplete  # noqa: E501

         This method performs company name autocompletion, based on INDA database of companies.  It helps users to explore the aforementioned database and search for companies data.  The *term* to be completed (see *query parameters* below) must contain at least *2* characters, and it is meant to match the *Name* of a company.  The output contains a list of names related to stored companies, along with their IDs.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.company_autocomplete_get(term, async_req=True)
        >>> result = thread.get()

        Args:
            term (str): Token to be completed

        Keyword Args:
            size (int): Response size.. [optional] if omitted the server will use the default value of 10
            token_order (str): Whether to autocomplete the term in a sequential way or not. The default *any* value guarantees good performances as well as flexible results.. [optional] if omitted the server will use the default value of "any"
            fuzzy (bool): Fuzzy search. If *True* performs a fuzzy search with max edits set to 2.. [optional] if omitted the server will use the default value of False
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            CompanyAutocompleteResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get('async_req', False)
        kwargs['_return_http_data_only'] = kwargs.get('_return_http_data_only',
                                                      True)
        kwargs['_preload_content'] = kwargs.get('_preload_content', True)
        kwargs['_request_timeout'] = kwargs.get('_request_timeout', None)
        kwargs['_check_input_type'] = kwargs.get('_check_input_type', True)
        kwargs['_check_return_type'] = kwargs.get('_check_return_type', True)
        kwargs['_spec_property_naming'] = kwargs.get('_spec_property_naming',
                                                     False)
        kwargs['_content_type'] = kwargs.get('_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['term'] = \
            term
        return self.company_autocomplete_get_endpoint.call_with_http_info(
            **kwargs)

    def get_company_get(self, company_id, **kwargs):
        """Get Company  # noqa: E501

         This method returns the information related to the company stored with id *company_id*.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_company_get(company_id, async_req=True)
        >>> result = thread.get()

        Args:
            company_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GetCompanyResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get('async_req', False)
        kwargs['_return_http_data_only'] = kwargs.get('_return_http_data_only',
                                                      True)
        kwargs['_preload_content'] = kwargs.get('_preload_content', True)
        kwargs['_request_timeout'] = kwargs.get('_request_timeout', None)
        kwargs['_check_input_type'] = kwargs.get('_check_input_type', True)
        kwargs['_check_return_type'] = kwargs.get('_check_return_type', True)
        kwargs['_spec_property_naming'] = kwargs.get('_spec_property_naming',
                                                     False)
        kwargs['_content_type'] = kwargs.get('_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['company_id'] = \
            company_id
        return self.get_company_get_endpoint.call_with_http_info(**kwargs)

    def patch_company_patch(self, company_id, patch_company_request, **kwargs):
        """Patch Company  # noqa: E501

         This method updates the information related to the company stored with id *company_id*.  This method accepts an application/json body with the same structure as [Add Company](https://api.inda.ai/hr/docs/v2/#operation/add_company__POST), however in this case all fields are optional. Fields that contain differences between the corresponding original ones are substituted, while new fields are added. Bear in mind that lists are considered as singular value, therefore to modify an entry in a list it is necessary to insert the full list.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.patch_company_patch(company_id, patch_company_request, async_req=True)
        >>> result = thread.get()

        Args:
            company_id (str):
            patch_company_request (PatchCompanyRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PatchCompanyResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get('async_req', False)
        kwargs['_return_http_data_only'] = kwargs.get('_return_http_data_only',
                                                      True)
        kwargs['_preload_content'] = kwargs.get('_preload_content', True)
        kwargs['_request_timeout'] = kwargs.get('_request_timeout', None)
        kwargs['_check_input_type'] = kwargs.get('_check_input_type', True)
        kwargs['_check_return_type'] = kwargs.get('_check_return_type', True)
        kwargs['_spec_property_naming'] = kwargs.get('_spec_property_naming',
                                                     False)
        kwargs['_content_type'] = kwargs.get('_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['company_id'] = \
            company_id
        kwargs['patch_company_request'] = \
            patch_company_request
        return self.patch_company_patch_endpoint.call_with_http_info(**kwargs)
