"""
    INDA HR - INtelligent Data Analysis for HR

     # Introduction  **INDA (INtelligent Data Analysis)** is an [Intervieweb](https://www.intervieweb.it/hrm/)  AI solution provided as a RESTful API.  The INDA pricing model is *credits-based*, which means that a certain number of credits is associated to each API request. Hence, users have to purchase a certain amount of credits (established according to their needs) which will be reduced  at each API call. INDA accepts and processes a user's request only if their credits quota is grater than - or,  at least, equal to - the number of credits required by that request. To obtain further details on the pricing, please visit our [site](https://inda.ai) or contact us.    INDA HR embraces a wide range of functionalities to manage the main elements of a recruitment process:   + [**candidate**](https://api.inda.ai/hr/docs/v2/#tag/Resume-Management) (hereafter also referred to as **resume** or **applicant**), or rather a  person looking for a job;  + [**job advertisement**](https://api.inda.ai/hr/docs/v2/#tag/JobAd-Management) (hereafter also referred to as **job ad**), which is a document   that collects all the main information and details about a job vacancy;  + [**application**](https://api.inda.ai/hr/docs/v2/#tag/Application-Management), that binds candidates to job ads; it is generated whenever a  candidate applies for a job.  Each of them has a specific set of methods that grants users the ability to create, read, update and delete the relative  documents, plus some special features based on AI approaches (such as *document parsing* or *semantic search*). They can be explored in their respective sections.  Data about the listed document types can be enriched by connecting them to other INDA supported entities, such as  [**companies**](https://api.inda.ai/hr/docs/v2/#tag/Company-Management) and [**universities**](https://api.inda.ai/hr/docs/v2/#tag/Universities), so that recruiters may  get a better and more detailed idea on the candidates' experiences and acquired skills.  All the functionalities mentioned above are meant to help recruiters during the talent acquisition process,  by exploiting the power of AI systems. Among the advantages a recruiter has by using this kind of systems, tackling the bias problem is surely one of the  most relevant. Bias in recruitment is a serious issue that affect both recruiters and candidates, since it may cause wrong hiring  decisions. As we care a lot about this problem, we are constantly working on reduce the bias in original data so that INDA  results may be as fair as possible. As of now, in order to tackle the bias issue, INDA automatically ignores specific fields (such as name, gender, age  and nationality) during the initial processing of each candidate data.  Furthermore, we decided to let users collect data of various types, including personal or sensitive details, but we  do not allow their usage if it is different from statistical purposes; our aim is to discourage recruiters from  focusing on candidates' personal information, and to put their attention on the candidate's skills and abilities.    We want to help recruiters to prevent any kind of bias while searching for the most valuable candidates they really need.    The following documentation is addressed both to developers, in order to provide all technical details for INDA integration, and to managers, to guide them in the exploration of the implementation possibilities.  The host of the API is [https://api.inda.ai/hr/v2/](https://api.inda.ai/hr/v2/). We recommend to check the API version and build (displayed near the documentation title). You can contact us at support@intervieweb.it in case of problems, suggestions, or particular needs.  The search panel on the left can be used to navigate through the documentation and provides an overview of the API structure. On the right, you can find (*i*) the url of the method, (*ii*) an example of request body (if present), and (*iii*) an example of response for each response code. Finally, in the central section of each API method, you can find (*i*) a general description of the purpose of the method, (*ii*) details on parameters and request body schema (if present), and (*iii*) details on response schema, error models, and error codes.    # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Contact: info@intervieweb.it
    Generated by: https://openapi-generator.tech
"""

import re  # noqa: F401
import sys  # noqa: F401

from inda_hr.api_client import ApiClient, Endpoint as _Endpoint
from inda_hr.model_utils import (  # noqa: F401
    check_allowed_values, check_validations, date, datetime, file_type,
    none_type, validate_and_convert_types)
from inda_hr.model.base_jobad_matching_evidence_query import BaseJobadMatchingEvidenceQuery
from inda_hr.model.base_jobad_matching_query import BaseJobadMatchingQuery
from inda_hr.model.error_model import ErrorModel
from inda_hr.model.http_validation_error import HTTPValidationError
from inda_hr.model.jobad_matching_evidence_query import JobadMatchingEvidenceQuery
from inda_hr.model.jobad_matching_query import JobadMatchingQuery
from inda_hr.model.match_job_ad_evidence_response import MatchJobAdEvidenceResponse
from inda_hr.model.search_job_ad_match_response import SearchJobAdMatchResponse


class ResumeToJobAdsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.match_jobads_evidence_from_indexed_resume_post_endpoint = _Endpoint(
            settings={
                'response_type': (MatchJobAdEvidenceResponse, ),
                'auth': ['APIKey'],
                'endpoint_path':
                '/hr/v2/index/{indexname}/jobads/matching/resume/{resume_id}/evidence/',
                'operation_id':
                'match_jobads_evidence_from_indexed_resume_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'indexname',
                    'resume_id',
                    'base_jobad_matching_evidence_query',
                ],
                'required': [
                    'indexname',
                    'resume_id',
                    'base_jobad_matching_evidence_query',
                ],
                'nullable': [],
                'enum': [],
                'validation': []
            },
            root_map={
                'validations': {},
                'allowed_values': {},
                'openapi_types': {
                    'indexname': (str, ),
                    'resume_id': (str, ),
                    'base_jobad_matching_evidence_query':
                    (BaseJobadMatchingEvidenceQuery, ),
                },
                'attribute_map': {
                    'indexname': 'indexname',
                    'resume_id': 'resume_id',
                },
                'location_map': {
                    'indexname': 'path',
                    'resume_id': 'path',
                    'base_jobad_matching_evidence_query': 'body',
                },
                'collection_format_map': {}
            },
            headers_map={
                'accept': ['application/json'],
                'content_type': ['application/json']
            },
            api_client=api_client)
        self.match_jobads_evidence_post_endpoint = _Endpoint(
            settings={
                'response_type': (MatchJobAdEvidenceResponse, ),
                'auth': ['APIKey'],
                'endpoint_path':
                '/hr/v2/index/{indexname}/jobads/matching/resume/evidence/',
                'operation_id': 'match_jobads_evidence_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'indexname',
                    'jobad_matching_evidence_query',
                    'src_lang',
                ],
                'required': [
                    'indexname',
                    'jobad_matching_evidence_query',
                ],
                'nullable': [],
                'enum': [
                    'src_lang',
                ],
                'validation': []
            },
            root_map={
                'validations': {},
                'allowed_values': {
                    ('src_lang', ): {
                        "ES": "es",
                        "DE": "de",
                        "PT": "pt",
                        "FR": "fr",
                        "EN": "en",
                        "IT": "it"
                    },
                },
                'openapi_types': {
                    'indexname': (str, ),
                    'jobad_matching_evidence_query':
                    (JobadMatchingEvidenceQuery, ),
                    'src_lang': (str, ),
                },
                'attribute_map': {
                    'indexname': 'indexname',
                    'src_lang': 'src_lang',
                },
                'location_map': {
                    'indexname': 'path',
                    'jobad_matching_evidence_query': 'body',
                    'src_lang': 'query',
                },
                'collection_format_map': {}
            },
            headers_map={
                'accept': ['application/json'],
                'content_type': ['application/json']
            },
            api_client=api_client)
        self.match_jobads_from_indexed_resume_post_endpoint = _Endpoint(
            settings={
                'response_type': (SearchJobAdMatchResponse, ),
                'auth': ['APIKey'],
                'endpoint_path':
                '/hr/v2/index/{indexname}/jobads/matching/resume/{resume_id}/',
                'operation_id': 'match_jobads_from_indexed_resume_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'indexname',
                    'resume_id',
                    'base_jobad_matching_query',
                    'size',
                    'offset',
                    'min_score',
                    'dst_lang',
                    'jobad_langs',
                ],
                'required': [
                    'indexname',
                    'resume_id',
                    'base_jobad_matching_query',
                ],
                'nullable': [],
                'enum': [
                    'dst_lang',
                    'jobad_langs',
                ],
                'validation': [
                    'size',
                    'offset',
                    'min_score',
                    'dst_lang',
                    'jobad_langs',
                ]
            },
            root_map={
                'validations': {
                    ('size', ): {
                        'inclusive_maximum': 50,
                    },
                    ('offset', ): {
                        'inclusive_minimum': 0,
                    },
                    ('min_score', ): {
                        'inclusive_minimum': 0.0,
                    },
                    ('dst_lang', ): {
                        'min_items': 1,
                    },
                    ('jobad_langs', ): {
                        'min_items': 1,
                    },
                },
                'allowed_values': {
                    ('dst_lang', ): {
                        "ES": "es",
                        "DE": "de",
                        "PT": "pt",
                        "FR": "fr",
                        "EN": "en",
                        "IT": "it"
                    },
                    ('jobad_langs', ): {
                        "ES": "es",
                        "DE": "de",
                        "PT": "pt",
                        "FR": "fr",
                        "EN": "en",
                        "IT": "it"
                    },
                },
                'openapi_types': {
                    'indexname': (str, ),
                    'resume_id': (str, ),
                    'base_jobad_matching_query': (BaseJobadMatchingQuery, ),
                    'size': (int, ),
                    'offset': (int, ),
                    'min_score': (float, ),
                    'dst_lang': ([str], ),
                    'jobad_langs': ([str], ),
                },
                'attribute_map': {
                    'indexname': 'indexname',
                    'resume_id': 'resume_id',
                    'size': 'size',
                    'offset': 'offset',
                    'min_score': 'min_score',
                    'dst_lang': 'dst_lang',
                    'jobad_langs': 'jobad_langs',
                },
                'location_map': {
                    'indexname': 'path',
                    'resume_id': 'path',
                    'base_jobad_matching_query': 'body',
                    'size': 'query',
                    'offset': 'query',
                    'min_score': 'query',
                    'dst_lang': 'query',
                    'jobad_langs': 'query',
                },
                'collection_format_map': {
                    'dst_lang': 'multi',
                    'jobad_langs': 'multi',
                }
            },
            headers_map={
                'accept': ['application/json'],
                'content_type': ['application/json']
            },
            api_client=api_client)
        self.match_jobads_post_endpoint = _Endpoint(
            settings={
                'response_type': (SearchJobAdMatchResponse, ),
                'auth': ['APIKey'],
                'endpoint_path':
                '/hr/v2/index/{indexname}/jobads/matching/resume/',
                'operation_id': 'match_jobads_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'indexname',
                    'jobad_matching_query',
                    'size',
                    'offset',
                    'min_score',
                    'src_lang',
                    'dst_lang',
                    'jobad_langs',
                ],
                'required': [
                    'indexname',
                    'jobad_matching_query',
                ],
                'nullable': [],
                'enum': [
                    'src_lang',
                    'dst_lang',
                    'jobad_langs',
                ],
                'validation': [
                    'size',
                    'offset',
                    'min_score',
                    'dst_lang',
                    'jobad_langs',
                ]
            },
            root_map={
                'validations': {
                    ('size', ): {
                        'inclusive_maximum': 50,
                    },
                    ('offset', ): {
                        'inclusive_minimum': 0,
                    },
                    ('min_score', ): {
                        'inclusive_minimum': 0.0,
                    },
                    ('dst_lang', ): {
                        'min_items': 1,
                    },
                    ('jobad_langs', ): {
                        'min_items': 1,
                    },
                },
                'allowed_values': {
                    ('src_lang', ): {
                        "ES": "es",
                        "DE": "de",
                        "PT": "pt",
                        "FR": "fr",
                        "EN": "en",
                        "IT": "it"
                    },
                    ('dst_lang', ): {
                        "ES": "es",
                        "DE": "de",
                        "PT": "pt",
                        "FR": "fr",
                        "EN": "en",
                        "IT": "it"
                    },
                    ('jobad_langs', ): {
                        "ES": "es",
                        "DE": "de",
                        "PT": "pt",
                        "FR": "fr",
                        "EN": "en",
                        "IT": "it"
                    },
                },
                'openapi_types': {
                    'indexname': (str, ),
                    'jobad_matching_query': (JobadMatchingQuery, ),
                    'size': (int, ),
                    'offset': (int, ),
                    'min_score': (float, ),
                    'src_lang': (str, ),
                    'dst_lang': ([str], ),
                    'jobad_langs': ([str], ),
                },
                'attribute_map': {
                    'indexname': 'indexname',
                    'size': 'size',
                    'offset': 'offset',
                    'min_score': 'min_score',
                    'src_lang': 'src_lang',
                    'dst_lang': 'dst_lang',
                    'jobad_langs': 'jobad_langs',
                },
                'location_map': {
                    'indexname': 'path',
                    'jobad_matching_query': 'body',
                    'size': 'query',
                    'offset': 'query',
                    'min_score': 'query',
                    'src_lang': 'query',
                    'dst_lang': 'query',
                    'jobad_langs': 'query',
                },
                'collection_format_map': {
                    'dst_lang': 'multi',
                    'jobad_langs': 'multi',
                }
            },
            headers_map={
                'accept': ['application/json'],
                'content_type': ['application/json']
            },
            api_client=api_client)

    def match_jobads_evidence_from_indexed_resume_post(
            self, indexname, resume_id, base_jobad_matching_evidence_query,
            **kwargs):
        """Match JobAds Evidence from indexed Resume  # noqa: E501

        This method can be used for a registered resume; it is analogous to the The [Match JobAds Evidence](https://api.inda.ai/hr/docs/v2/#operation/match_jobads_evidence__POST) method, but it takes in input the ID of the resume instead of its JSON.  Please refer to the [Match JobAds Evidence](https://api.inda.ai/hr/docs/v2/#operation/match_jobads_evidence__POST) description for further details on the method and on its output.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.match_jobads_evidence_from_indexed_resume_post(indexname, resume_id, base_jobad_matching_evidence_query, async_req=True)
        >>> result = thread.get()

        Args:
            indexname (str):
            resume_id (str):
            base_jobad_matching_evidence_query (BaseJobadMatchingEvidenceQuery):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            MatchJobAdEvidenceResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get('async_req', False)
        kwargs['_return_http_data_only'] = kwargs.get('_return_http_data_only',
                                                      True)
        kwargs['_preload_content'] = kwargs.get('_preload_content', True)
        kwargs['_request_timeout'] = kwargs.get('_request_timeout', None)
        kwargs['_check_input_type'] = kwargs.get('_check_input_type', True)
        kwargs['_check_return_type'] = kwargs.get('_check_return_type', True)
        kwargs['_spec_property_naming'] = kwargs.get('_spec_property_naming',
                                                     False)
        kwargs['_content_type'] = kwargs.get('_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['indexname'] = \
            indexname
        kwargs['resume_id'] = \
            resume_id
        kwargs['base_jobad_matching_evidence_query'] = \
            base_jobad_matching_evidence_query
        return self.match_jobads_evidence_from_indexed_resume_post_endpoint.call_with_http_info(
            **kwargs)

    def match_jobads_evidence_post(self, indexname,
                                   jobad_matching_evidence_query, **kwargs):
        """Match JobAds Evidence  # noqa: E501

        This method provides details about the score of a list of job adverts according to the matching with a given resume.  The method should be used after the call of [Match JobAds](https://api.inda.ai/hr/docs/v2/#operation/match_jobads__POST) or [Match JobAds from indexed Resume](https://api.inda.ai/hr/docs/v2/#operation/match_jobads_from_indexed_resume__POST), on a *JobadID* or a set of *JobadID*s returned by one of these methods, in order to obtain the evidence of the matching score.  The relevant information for the matching evidence is the same described in the [Match JobAds](https://api.inda.ai/hr/docs/v2/#operation/match_jobads__POST) method.  For each job advert *ID*, the method returns: + a matching score between the job advert's required and preferred [EQF level](https://en.wikipedia.org/wiki/European_Qualifications_Framework) and the candidate's one (if any); + a matching score between the job advert's required and preferred experience durations and the total duration of the candidate's work experiences (if any); + a matching score between the job advert's required and preferred seniorities and the candidate's seniority (if any); + a detail for each skill in the job advert, containing the relative matching score with respect to the resume; + a detail for each job title in the job advert, containing the relative matching score with respect to the resume.  Each aforementioned matching score has to be considered as an affinity score between job advert's and candidate's data, which contributes to the final [Match JobAds](https://api.inda.ai/hr/docs/v2/#operation/match_jobads__POST) response's <code style='color: #333333; opacity: 0.9'>Score</code>.  Any *JobAdID* not corresponding to an available job advert in the index *indexname* will be ignored.  Note that the [Match JobAds Evidence from indexed Resume](https://api.inda.ai/hr/docs/v2/#operation/match_jobads_evidence_from_indexed_resume__POST), method can be used for a resume which has been already indexed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.match_jobads_evidence_post(indexname, jobad_matching_evidence_query, async_req=True)
        >>> result = thread.get()

        Args:
            indexname (str):
            jobad_matching_evidence_query (JobadMatchingEvidenceQuery):

        Keyword Args:
            src_lang (str): Optional. Language in which the following *Resume.Data* entities are expressed: *Skills*, *WorkExperiences.Skills*, *JobTitles*, *WorkExperiences.PositionTitle* and *Languages*.If missing, the detected *Attachment.CV.PlainText* language is assumed as `src_lang`.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            MatchJobAdEvidenceResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get('async_req', False)
        kwargs['_return_http_data_only'] = kwargs.get('_return_http_data_only',
                                                      True)
        kwargs['_preload_content'] = kwargs.get('_preload_content', True)
        kwargs['_request_timeout'] = kwargs.get('_request_timeout', None)
        kwargs['_check_input_type'] = kwargs.get('_check_input_type', True)
        kwargs['_check_return_type'] = kwargs.get('_check_return_type', True)
        kwargs['_spec_property_naming'] = kwargs.get('_spec_property_naming',
                                                     False)
        kwargs['_content_type'] = kwargs.get('_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['indexname'] = \
            indexname
        kwargs['jobad_matching_evidence_query'] = \
            jobad_matching_evidence_query
        return self.match_jobads_evidence_post_endpoint.call_with_http_info(
            **kwargs)

    def match_jobads_from_indexed_resume_post(self, indexname, resume_id,
                                              base_jobad_matching_query,
                                              **kwargs):
        """Match JobAds from indexed Resume  # noqa: E501

        This method performs a search among the job adverts in index *indexname* to find the best matches for a given resume already registered in INDA. To perform the search starting from the resume of a candidate not yet registered in INDA, please use the [Match JobAds](https://api.inda.ai/hr/docs/v2/#operation/match_jobads__POST), method.  The method can be used, for instance, in the career page in order to guide the candidate to the best matching with their resume. The method can also be used -- via scheduled execution over a pool of resumes -- to generate for each applicant a feed of  suggested job positions which are relevant for them, in order to improve candidate engagement.  Skills and job titles are particularly relevant and should be present in the resume to obtain an accurate matching. Other relevant information -- e.g., experience duration, [EQF level](https://en.wikipedia.org/wiki/European_Qualifications_Framework)  -- is retrieved from the resume and contributes to the pertinence score of each job adverts, provided that the index contains a sufficient number of job adverts with that information.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.match_jobads_from_indexed_resume_post(indexname, resume_id, base_jobad_matching_query, async_req=True)
        >>> result = thread.get()

        Args:
            indexname (str):
            resume_id (str):
            base_jobad_matching_query (BaseJobadMatchingQuery):

        Keyword Args:
            size (int): Optional. Number of documents to return.. [optional] if omitted the server will use the default value of 5
            offset (int): Optional. Number of documents to skip. Ignored if *cache* is <code style='color: #333333; opacity: 0.9'>true</code>.. [optional] if omitted the server will use the default value of 0
            min_score (float): Optional. Minimum pertinence score.. [optional] if omitted the server will use the default value of 0
            dst_lang ([str]): Results languages. If left empty then the results will not be filtered by language and the they will contain multi-language results.. [optional]
            jobad_langs ([str]): DEPRECATED: use <code style='color: #333333; opacity: 0.9'>dst_langs</code> instead. Results languages. If left empty then the results will not be filtered by language.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SearchJobAdMatchResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get('async_req', False)
        kwargs['_return_http_data_only'] = kwargs.get('_return_http_data_only',
                                                      True)
        kwargs['_preload_content'] = kwargs.get('_preload_content', True)
        kwargs['_request_timeout'] = kwargs.get('_request_timeout', None)
        kwargs['_check_input_type'] = kwargs.get('_check_input_type', True)
        kwargs['_check_return_type'] = kwargs.get('_check_return_type', True)
        kwargs['_spec_property_naming'] = kwargs.get('_spec_property_naming',
                                                     False)
        kwargs['_content_type'] = kwargs.get('_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['indexname'] = \
            indexname
        kwargs['resume_id'] = \
            resume_id
        kwargs['base_jobad_matching_query'] = \
            base_jobad_matching_query
        return self.match_jobads_from_indexed_resume_post_endpoint.call_with_http_info(
            **kwargs)

    def match_jobads_post(self, indexname, jobad_matching_query, **kwargs):
        """Match JobAds  # noqa: E501

        This method performs a search among the job adverts in index *indexname* to find the best matches for a given resume. To perform the search starting from a resume already registered in INDA, we suggest to use the [Match JobAds from indexed Resume](https://api.inda.ai/hr/docs/v2/#operation/match_jobads_from_indexed_resume__POST), method.  The method can be used, for instance, in the career page in order to guide the candidate to the best matching with their resume. The method can also be used -- via scheduled execution over a pool of resumes -- to generate for each candidate a feed of  suggested job positions which are relevant for them, in order to improve candidate engagement.  Skills and job titles are particularly relevant and should be present in the resume to obtain an accurate matching. Other relevant information -- e.g., experience duration, [EQF level](https://en.wikipedia.org/wiki/European_Qualifications_Framework)  -- is retrieved from the resume and contributes to the pertinence score of each job adverts, provided that the index contains a sufficient number of job adverts with that information.  Optionally, a list of [*query filters*](https://api.inda.ai/hr/docs/v2/#tag/Query-Filters) (*QueryFilters*) can be provided to narrow the query. We strongly encourage use of query_filters to reduce computation time and improve the result accuracy.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.match_jobads_post(indexname, jobad_matching_query, async_req=True)
        >>> result = thread.get()

        Args:
            indexname (str):
            jobad_matching_query (JobadMatchingQuery):

        Keyword Args:
            size (int): Optional. Number of documents to return.. [optional] if omitted the server will use the default value of 5
            offset (int): Optional. Number of documents to skip. Ignored if *cache* is <code style='color: #333333; opacity: 0.9'>true</code>.. [optional] if omitted the server will use the default value of 0
            min_score (float): Optional. Minimum pertinence score.. [optional] if omitted the server will use the default value of 0
            src_lang (str): Job Description language. If left empty each section's language will detected automatically.. [optional]
            dst_lang ([str]): Results languages. If left empty then the results will not be filtered by language and the they will contain multi-language results.. [optional]
            jobad_langs ([str]): DEPRECATED: use <code style='color: #333333; opacity: 0.9'>dst_langs</code> instead. Results languages. If left empty then the results will not be filtered by language.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SearchJobAdMatchResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get('async_req', False)
        kwargs['_return_http_data_only'] = kwargs.get('_return_http_data_only',
                                                      True)
        kwargs['_preload_content'] = kwargs.get('_preload_content', True)
        kwargs['_request_timeout'] = kwargs.get('_request_timeout', None)
        kwargs['_check_input_type'] = kwargs.get('_check_input_type', True)
        kwargs['_check_return_type'] = kwargs.get('_check_return_type', True)
        kwargs['_spec_property_naming'] = kwargs.get('_spec_property_naming',
                                                     False)
        kwargs['_content_type'] = kwargs.get('_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['indexname'] = \
            indexname
        kwargs['jobad_matching_query'] = \
            jobad_matching_query
        return self.match_jobads_post_endpoint.call_with_http_info(**kwargs)
