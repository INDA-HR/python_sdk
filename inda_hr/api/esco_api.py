"""
    INDA HR - INtelligent Data Analysis for HR

     # Introduction  **INDA (INtelligent Data Analysis)** is an [Intervieweb](https://www.intervieweb.it/hrm/)  AI solution provided as a RESTful API.  The INDA pricing model is *credits-based*, which means that a certain number of credits is associated to each API request. Hence, users have to purchase a certain amount of credits (established according to their needs) which will be reduced  at each API call. INDA accepts and processes a user's request only if their credits quota is grater than - or,  at least, equal to - the number of credits required by that request. To obtain further details on the pricing, please visit our [site](https://inda.ai) or contact us.    INDA HR embraces a wide range of functionalities to manage the main elements of a recruitment process:   + [**candidate**](https://api.inda.ai/hr/docs/v2/#tag/Resume-Management) (hereafter also referred to as **resume** or **applicant**), or rather a  person looking for a job;  + [**job advertisement**](https://api.inda.ai/hr/docs/v2/#tag/JobAd-Management) (hereafter also referred to as **job ad**), which is a document   that collects all the main information and details about a job vacancy;  + [**application**](https://api.inda.ai/hr/docs/v2/#tag/Application-Management), that binds candidates to job ads; it is generated whenever a  candidate applies for a job.  Each of them has a specific set of methods that grants users the ability to create, read, update and delete the relative  documents, plus some special features based on AI approaches (such as *document parsing* or *semantic search*). They can be explored in their respective sections.  Data about the listed document types can be enriched by connecting them to other INDA supported entities, such as  [**companies**](https://api.inda.ai/hr/docs/v2/#tag/Company-Management) and [**universities**](https://api.inda.ai/hr/docs/v2/#tag/Universities), so that recruiters may  get a better and more detailed idea on the candidates' experiences and acquired skills.  All the functionalities mentioned above are meant to help recruiters during the talent acquisition process,  by exploiting the power of AI systems. Among the advantages a recruiter has by using this kind of systems, tackling the bias problem is surely one of the  most relevant. Bias in recruitment is a serious issue that affect both recruiters and candidates, since it may cause wrong hiring  decisions. As we care a lot about this problem, we are constantly working on reduce the bias in original data so that INDA  results may be as fair as possible. As of now, in order to tackle the bias issue, INDA automatically ignores specific fields (such as name, gender, age  and nationality) during the initial processing of each candidate data.  Furthermore, we decided to let users collect data of various types, including personal or sensitive details, but we  do not allow their usage if it is different from statistical purposes; our aim is to discourage recruiters from  focusing on candidates' personal information, and to put their attention on the candidate's skills and abilities.    We want to help recruiters to prevent any kind of bias while searching for the most valuable candidates they really need.    The following documentation is addressed both to developers, in order to provide all technical details for INDA integration, and to managers, to guide them in the exploration of the implementation possibilities.  The host of the API is [https://api.inda.ai/hr/v2/](https://api.inda.ai/hr/v2/). We recommend to check the API version and build (displayed near the documentation title). You can contact us at support@intervieweb.it in case of problems, suggestions, or particular needs.  The search panel on the left can be used to navigate through the documentation and provides an overview of the API structure. On the right, you can find (*i*) the url of the method, (*ii*) an example of request body (if present), and (*iii*) an example of response for each response code. Finally, in the central section of each API method, you can find (*i*) a general description of the purpose of the method, (*ii*) details on parameters and request body schema (if present), and (*iii*) details on response schema, error models, and error codes.    # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Contact: info@intervieweb.it
    Generated by: https://openapi-generator.tech
"""

import re  # noqa: F401
import sys  # noqa: F401

from inda_hr.api_client import ApiClient, Endpoint as _Endpoint
from inda_hr.model_utils import (  # noqa: F401
    check_allowed_values, check_validations, date, datetime, file_type,
    none_type, validate_and_convert_types)
from inda_hr.model.classification_mapping_esco_response import ClassificationMappingEscoResponse
from inda_hr.model.classification_mapping_isco_response import ClassificationMappingIscoResponse
from inda_hr.model.classification_mapping_istat_response import ClassificationMappingIstatResponse
from inda_hr.model.classification_mapping_onet_response import ClassificationMappingOnetResponse
from inda_hr.model.description_input import DescriptionInput
from inda_hr.model.error_model import ErrorModel
from inda_hr.model.esco_jobtitle_response import EscoJobtitleResponse
from inda_hr.model.esco_skill_response import EscoSkillResponse
from inda_hr.model.http_validation_error import HTTPValidationError
from inda_hr.model.most_similar_jobtitle_response_categorized import MostSimilarJobtitleResponseCategorized
from inda_hr.model.most_similar_skill_response_categorized import MostSimilarSkillResponseCategorized


class ESCOApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.esco_occupations_hierarchy_get_endpoint = _Endpoint(
            settings={
                'response_type': (MostSimilarJobtitleResponseCategorized, ),
                'auth': ['APIKey'],
                'endpoint_path': '/hr/v2/occupations/similar/esco/hierarchy/',
                'operation_id': 'esco_occupations_hierarchy_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'query',
                    'dst_lang',
                ],
                'required': [
                    'query',
                ],
                'nullable': [],
                'enum': [
                    'dst_lang',
                ],
                'validation': []
            },
            root_map={
                'validations': {},
                'allowed_values': {
                    ('dst_lang', ): {
                        "BG": "bg",
                        "CS": "cs",
                        "DA": "da",
                        "DE": "de",
                        "EL": "el",
                        "EN": "en",
                        "ES": "es",
                        "ET": "et",
                        "FI": "fi",
                        "FR": "fr",
                        "HR": "hr",
                        "HU": "hu",
                        "IT": "it",
                        "LT": "lt",
                        "LV": "lv",
                        "NL": "nl",
                        "PL": "pl",
                        "PT": "pt",
                        "RO": "ro",
                        "SK": "sk",
                        "SL": "sl",
                        "SV": "sv"
                    },
                },
                'openapi_types': {
                    'query': (str, ),
                    'dst_lang': (str, ),
                },
                'attribute_map': {
                    'query': 'query',
                    'dst_lang': 'dst_lang',
                },
                'location_map': {
                    'query': 'query',
                    'dst_lang': 'query',
                },
                'collection_format_map': {}
            },
            headers_map={
                'accept': ['application/json'],
                'content_type': [],
            },
            api_client=api_client)
        self.esco_skills_hierarchy_get_endpoint = _Endpoint(
            settings={
                'response_type': (MostSimilarSkillResponseCategorized, ),
                'auth': ['APIKey'],
                'endpoint_path': '/hr/v2/skills/similar/esco/hierarchy/',
                'operation_id': 'esco_skills_hierarchy_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'query',
                    'dst_lang',
                ],
                'required': [
                    'query',
                ],
                'nullable': [],
                'enum': [
                    'dst_lang',
                ],
                'validation': []
            },
            root_map={
                'validations': {},
                'allowed_values': {
                    ('dst_lang', ): {
                        "BG": "bg",
                        "CS": "cs",
                        "DA": "da",
                        "DE": "de",
                        "EL": "el",
                        "EN": "en",
                        "ES": "es",
                        "ET": "et",
                        "FI": "fi",
                        "FR": "fr",
                        "HR": "hr",
                        "HU": "hu",
                        "IT": "it",
                        "LT": "lt",
                        "LV": "lv",
                        "NL": "nl",
                        "PL": "pl",
                        "PT": "pt",
                        "RO": "ro",
                        "SK": "sk",
                        "SL": "sl",
                        "SV": "sv"
                    },
                },
                'openapi_types': {
                    'query': (str, ),
                    'dst_lang': (str, ),
                },
                'attribute_map': {
                    'query': 'query',
                    'dst_lang': 'dst_lang',
                },
                'location_map': {
                    'query': 'query',
                    'dst_lang': 'query',
                },
                'collection_format_map': {}
            },
            headers_map={
                'accept': ['application/json'],
                'content_type': [],
            },
            api_client=api_client)
        self.from_description_to_esco_occupations_post_endpoint = _Endpoint(
            settings={
                'response_type': (EscoJobtitleResponse, ),
                'auth': ['APIKey'],
                'endpoint_path': '/hr/v2/occupations/description/match/esco/',
                'operation_id': 'from_description_to_esco_occupations_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'description_input',
                    'dst_lang',
                    'size',
                    'min_score',
                ],
                'required': [
                    'description_input',
                ],
                'nullable': [],
                'enum': [
                    'dst_lang',
                ],
                'validation': [
                    'size',
                    'min_score',
                ]
            },
            root_map={
                'validations': {
                    ('size', ): {
                        'inclusive_maximum': 10,
                    },
                    ('min_score', ): {
                        'inclusive_maximum': 1.0,
                        'inclusive_minimum': 0.0,
                    },
                },
                'allowed_values': {
                    ('dst_lang', ): {
                        "BG": "bg",
                        "CS": "cs",
                        "DA": "da",
                        "DE": "de",
                        "EL": "el",
                        "EN": "en",
                        "ES": "es",
                        "ET": "et",
                        "FI": "fi",
                        "FR": "fr",
                        "HR": "hr",
                        "HU": "hu",
                        "IT": "it",
                        "LT": "lt",
                        "LV": "lv",
                        "NL": "nl",
                        "PL": "pl",
                        "PT": "pt",
                        "RO": "ro",
                        "SK": "sk",
                        "SL": "sl",
                        "SV": "sv"
                    },
                },
                'openapi_types': {
                    'description_input': (DescriptionInput, ),
                    'dst_lang': (str, ),
                    'size': (int, ),
                    'min_score': (float, ),
                },
                'attribute_map': {
                    'dst_lang': 'dst_lang',
                    'size': 'size',
                    'min_score': 'min_score',
                },
                'location_map': {
                    'description_input': 'body',
                    'dst_lang': 'query',
                    'size': 'query',
                    'min_score': 'query',
                },
                'collection_format_map': {}
            },
            headers_map={
                'accept': ['application/json'],
                'content_type': ['application/json']
            },
            api_client=api_client)
        self.from_description_to_esco_skills_post_endpoint = _Endpoint(
            settings={
                'response_type': (EscoSkillResponse, ),
                'auth': ['APIKey'],
                'endpoint_path': '/hr/v2/skills/description/match/esco/',
                'operation_id': 'from_description_to_esco_skills_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'description_input',
                    'dst_lang',
                    'size',
                    'min_score',
                ],
                'required': [
                    'description_input',
                ],
                'nullable': [],
                'enum': [
                    'dst_lang',
                ],
                'validation': [
                    'size',
                    'min_score',
                ]
            },
            root_map={
                'validations': {
                    ('size', ): {
                        'inclusive_maximum': 10,
                    },
                    ('min_score', ): {
                        'inclusive_maximum': 1.0,
                        'inclusive_minimum': 0.0,
                    },
                },
                'allowed_values': {
                    ('dst_lang', ): {
                        "BG": "bg",
                        "CS": "cs",
                        "DA": "da",
                        "DE": "de",
                        "EL": "el",
                        "EN": "en",
                        "ES": "es",
                        "ET": "et",
                        "FI": "fi",
                        "FR": "fr",
                        "HR": "hr",
                        "HU": "hu",
                        "IT": "it",
                        "LT": "lt",
                        "LV": "lv",
                        "NL": "nl",
                        "PL": "pl",
                        "PT": "pt",
                        "RO": "ro",
                        "SK": "sk",
                        "SL": "sl",
                        "SV": "sv"
                    },
                },
                'openapi_types': {
                    'description_input': (DescriptionInput, ),
                    'dst_lang': (str, ),
                    'size': (int, ),
                    'min_score': (float, ),
                },
                'attribute_map': {
                    'dst_lang': 'dst_lang',
                    'size': 'size',
                    'min_score': 'min_score',
                },
                'location_map': {
                    'description_input': 'body',
                    'dst_lang': 'query',
                    'size': 'query',
                    'min_score': 'query',
                },
                'collection_format_map': {}
            },
            headers_map={
                'accept': ['application/json'],
                'content_type': ['application/json']
            },
            api_client=api_client)
        self.mapping_esco_get_endpoint = _Endpoint(settings={
            'response_type': (ClassificationMappingEscoResponse, ),
            'auth': ['APIKey'],
            'endpoint_path':
            '/hr/v2/occupations/mapping/esco/',
            'operation_id':
            'mapping_esco_get',
            'http_method':
            'GET',
            'servers':
            None,
        },
                                                   params_map={
                                                       'all': [
                                                           'code',
                                                       ],
                                                       'required': [
                                                           'code',
                                                       ],
                                                       'nullable': [],
                                                       'enum': [],
                                                       'validation': []
                                                   },
                                                   root_map={
                                                       'validations': {},
                                                       'allowed_values': {},
                                                       'openapi_types': {
                                                           'code': (str, ),
                                                       },
                                                       'attribute_map': {
                                                           'code': 'code',
                                                       },
                                                       'location_map': {
                                                           'code': 'query',
                                                       },
                                                       'collection_format_map':
                                                       {}
                                                   },
                                                   headers_map={
                                                       'accept':
                                                       ['application/json'],
                                                       'content_type': [],
                                                   },
                                                   api_client=api_client)
        self.mapping_isco_get_endpoint = _Endpoint(settings={
            'response_type': (ClassificationMappingIscoResponse, ),
            'auth': ['APIKey'],
            'endpoint_path':
            '/hr/v2/occupations/mapping/isco/',
            'operation_id':
            'mapping_isco_get',
            'http_method':
            'GET',
            'servers':
            None,
        },
                                                   params_map={
                                                       'all': [
                                                           'code',
                                                       ],
                                                       'required': [
                                                           'code',
                                                       ],
                                                       'nullable': [],
                                                       'enum': [],
                                                       'validation': []
                                                   },
                                                   root_map={
                                                       'validations': {},
                                                       'allowed_values': {},
                                                       'openapi_types': {
                                                           'code': (str, ),
                                                       },
                                                       'attribute_map': {
                                                           'code': 'code',
                                                       },
                                                       'location_map': {
                                                           'code': 'query',
                                                       },
                                                       'collection_format_map':
                                                       {}
                                                   },
                                                   headers_map={
                                                       'accept':
                                                       ['application/json'],
                                                       'content_type': [],
                                                   },
                                                   api_client=api_client)
        self.mapping_istat_cp2011_get_endpoint = _Endpoint(
            settings={
                'response_type': (ClassificationMappingIstatResponse, ),
                'auth': ['APIKey'],
                'endpoint_path': '/hr/v2/occupations/mapping/istat/',
                'operation_id': 'mapping_istat_cp2011_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'code',
                ],
                'required': [
                    'code',
                ],
                'nullable': [],
                'enum': [],
                'validation': []
            },
            root_map={
                'validations': {},
                'allowed_values': {},
                'openapi_types': {
                    'code': (str, ),
                },
                'attribute_map': {
                    'code': 'code',
                },
                'location_map': {
                    'code': 'query',
                },
                'collection_format_map': {}
            },
            headers_map={
                'accept': ['application/json'],
                'content_type': [],
            },
            api_client=api_client)
        self.mapping_onet_get_endpoint = _Endpoint(settings={
            'response_type': (ClassificationMappingOnetResponse, ),
            'auth': ['APIKey'],
            'endpoint_path':
            '/hr/v2/occupations/mapping/onet/',
            'operation_id':
            'mapping_onet_get',
            'http_method':
            'GET',
            'servers':
            None,
        },
                                                   params_map={
                                                       'all': [
                                                           'code',
                                                       ],
                                                       'required': [
                                                           'code',
                                                       ],
                                                       'nullable': [],
                                                       'enum': [],
                                                       'validation': []
                                                   },
                                                   root_map={
                                                       'validations': {},
                                                       'allowed_values': {},
                                                       'openapi_types': {
                                                           'code': (str, ),
                                                       },
                                                       'attribute_map': {
                                                           'code': 'code',
                                                       },
                                                       'location_map': {
                                                           'code': 'query',
                                                       },
                                                       'collection_format_map':
                                                       {}
                                                   },
                                                   headers_map={
                                                       'accept':
                                                       ['application/json'],
                                                       'content_type': [],
                                                   },
                                                   api_client=api_client)
        self.similar_esco_occupations_get_endpoint = _Endpoint(
            settings={
                'response_type': (EscoJobtitleResponse, ),
                'auth': ['APIKey'],
                'endpoint_path': '/hr/v2/occupations/similar/esco/',
                'operation_id': 'similar_esco_occupations_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'query',
                    'dst_lang',
                    'size',
                    'min_score',
                ],
                'required': [
                    'query',
                ],
                'nullable': [],
                'enum': [
                    'dst_lang',
                ],
                'validation': [
                    'size',
                    'min_score',
                ]
            },
            root_map={
                'validations': {
                    ('size', ): {
                        'inclusive_maximum': 10,
                    },
                    ('min_score', ): {
                        'inclusive_maximum': 1.0,
                        'inclusive_minimum': 0.0,
                    },
                },
                'allowed_values': {
                    ('dst_lang', ): {
                        "BG": "bg",
                        "CS": "cs",
                        "DA": "da",
                        "DE": "de",
                        "EL": "el",
                        "EN": "en",
                        "ES": "es",
                        "ET": "et",
                        "FI": "fi",
                        "FR": "fr",
                        "HR": "hr",
                        "HU": "hu",
                        "IT": "it",
                        "LT": "lt",
                        "LV": "lv",
                        "NL": "nl",
                        "PL": "pl",
                        "PT": "pt",
                        "RO": "ro",
                        "SK": "sk",
                        "SL": "sl",
                        "SV": "sv"
                    },
                },
                'openapi_types': {
                    'query': (str, ),
                    'dst_lang': (str, ),
                    'size': (int, ),
                    'min_score': (float, ),
                },
                'attribute_map': {
                    'query': 'query',
                    'dst_lang': 'dst_lang',
                    'size': 'size',
                    'min_score': 'min_score',
                },
                'location_map': {
                    'query': 'query',
                    'dst_lang': 'query',
                    'size': 'query',
                    'min_score': 'query',
                },
                'collection_format_map': {}
            },
            headers_map={
                'accept': ['application/json'],
                'content_type': [],
            },
            api_client=api_client)
        self.similar_esco_skills_get_endpoint = _Endpoint(
            settings={
                'response_type': (EscoSkillResponse, ),
                'auth': ['APIKey'],
                'endpoint_path': '/hr/v2/skills/similar/esco/',
                'operation_id': 'similar_esco_skills_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'query',
                    'dst_lang',
                    'size',
                    'min_score',
                ],
                'required': [
                    'query',
                ],
                'nullable': [],
                'enum': [
                    'dst_lang',
                ],
                'validation': [
                    'size',
                    'min_score',
                ]
            },
            root_map={
                'validations': {
                    ('size', ): {
                        'inclusive_maximum': 10,
                    },
                    ('min_score', ): {
                        'inclusive_maximum': 1.0,
                        'inclusive_minimum': 0.0,
                    },
                },
                'allowed_values': {
                    ('dst_lang', ): {
                        "BG": "bg",
                        "CS": "cs",
                        "DA": "da",
                        "DE": "de",
                        "EL": "el",
                        "EN": "en",
                        "ES": "es",
                        "ET": "et",
                        "FI": "fi",
                        "FR": "fr",
                        "HR": "hr",
                        "HU": "hu",
                        "IT": "it",
                        "LT": "lt",
                        "LV": "lv",
                        "NL": "nl",
                        "PL": "pl",
                        "PT": "pt",
                        "RO": "ro",
                        "SK": "sk",
                        "SL": "sl",
                        "SV": "sv"
                    },
                },
                'openapi_types': {
                    'query': (str, ),
                    'dst_lang': (str, ),
                    'size': (int, ),
                    'min_score': (float, ),
                },
                'attribute_map': {
                    'query': 'query',
                    'dst_lang': 'dst_lang',
                    'size': 'size',
                    'min_score': 'min_score',
                },
                'location_map': {
                    'query': 'query',
                    'dst_lang': 'query',
                    'size': 'query',
                    'min_score': 'query',
                },
                'collection_format_map': {}
            },
            headers_map={
                'accept': ['application/json'],
                'content_type': [],
            },
            api_client=api_client)

    def esco_occupations_hierarchy_get(self, query, **kwargs):
        """ESCO Occupations Hierarchy  # noqa: E501

         This method provides the most similar ESCO job title given a *jobtitle* (that could be a word or a sentence in several languages), its hierarchy classification according with ISCO classification, and the top three industries and job functions where the occupation is distributed.  More details about ESCO occupations hierarchy are showed [here](https://ec.europa.eu/esco/portal/occupation).    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.esco_occupations_hierarchy_get(query, async_req=True)
        >>> result = thread.get()

        Args:
            query (str): It could be any word or sentence in several languages.

        Keyword Args:
            dst_lang (str): Language of the similar ESCO occupations.. [optional] if omitted the server will use the default value of "it"
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            MostSimilarJobtitleResponseCategorized
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get('async_req', False)
        kwargs['_return_http_data_only'] = kwargs.get('_return_http_data_only',
                                                      True)
        kwargs['_preload_content'] = kwargs.get('_preload_content', True)
        kwargs['_request_timeout'] = kwargs.get('_request_timeout', None)
        kwargs['_check_input_type'] = kwargs.get('_check_input_type', True)
        kwargs['_check_return_type'] = kwargs.get('_check_return_type', True)
        kwargs['_spec_property_naming'] = kwargs.get('_spec_property_naming',
                                                     False)
        kwargs['_content_type'] = kwargs.get('_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['query'] = \
            query
        return self.esco_occupations_hierarchy_get_endpoint.call_with_http_info(
            **kwargs)

    def esco_skills_hierarchy_get(self, query, **kwargs):
        """ESCO Skills Hierarchy  # noqa: E501

         This method provides the most similar ESCO skills given a *query* (representing a skill) that could be a word or a sentence in several languages; also its hierarchy classification according with ESCO is returned.  More details about ESCO skills hierarchy are showed [here](https://ec.europa.eu/esco/portal/skill).    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.esco_skills_hierarchy_get(query, async_req=True)
        >>> result = thread.get()

        Args:
            query (str): A word or a brief sentence in several languages.

        Keyword Args:
            dst_lang (str): Language of the similar ESCO skills.. [optional] if omitted the server will use the default value of "it"
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            MostSimilarSkillResponseCategorized
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get('async_req', False)
        kwargs['_return_http_data_only'] = kwargs.get('_return_http_data_only',
                                                      True)
        kwargs['_preload_content'] = kwargs.get('_preload_content', True)
        kwargs['_request_timeout'] = kwargs.get('_request_timeout', None)
        kwargs['_check_input_type'] = kwargs.get('_check_input_type', True)
        kwargs['_check_return_type'] = kwargs.get('_check_return_type', True)
        kwargs['_spec_property_naming'] = kwargs.get('_spec_property_naming',
                                                     False)
        kwargs['_content_type'] = kwargs.get('_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['query'] = \
            query
        return self.esco_skills_hierarchy_get_endpoint.call_with_http_info(
            **kwargs)

    def from_description_to_esco_occupations_post(self, description_input,
                                                  **kwargs):
        """From description to ESCO Occupations  # noqa: E501

         This method provides the list of n most affine ESCO occupations given a sentence or a long description. For each returned occupation, the service provides also a list of the main related skills according to ESCO classification.  More details about ESCO occupations are showed [here](https://ec.europa.eu/esco/portal/occupation).    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.from_description_to_esco_occupations_post(description_input, async_req=True)
        >>> result = thread.get()

        Args:
            description_input (DescriptionInput):

        Keyword Args:
            dst_lang (str): Language of the similar ESCO occupations.. [optional] if omitted the server will use the default value of "it"
            size (int): The maximum number of similar ESCO occupations retrieved by the algorithm.. [optional] if omitted the server will use the default value of 1
            min_score (float): Minimum score of the similar ESCO occupations with respect to the job title queried by the user.. [optional] if omitted the server will use the default value of 0.2
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EscoJobtitleResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get('async_req', False)
        kwargs['_return_http_data_only'] = kwargs.get('_return_http_data_only',
                                                      True)
        kwargs['_preload_content'] = kwargs.get('_preload_content', True)
        kwargs['_request_timeout'] = kwargs.get('_request_timeout', None)
        kwargs['_check_input_type'] = kwargs.get('_check_input_type', True)
        kwargs['_check_return_type'] = kwargs.get('_check_return_type', True)
        kwargs['_spec_property_naming'] = kwargs.get('_spec_property_naming',
                                                     False)
        kwargs['_content_type'] = kwargs.get('_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['description_input'] = \
            description_input
        return self.from_description_to_esco_occupations_post_endpoint.call_with_http_info(
            **kwargs)

    def from_description_to_esco_skills_post(self, description_input,
                                             **kwargs):
        """From description to ESCO Skills  # noqa: E501

         This method provides the list of n most affine ESCO skills given a sentence or a long description. For each returned skill, the service provides also a list of the main occupations where the skill is mandatory according to ESCO classification.  More details about ESCO skills are showed [here](https://ec.europa.eu/esco/portal/skill).    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.from_description_to_esco_skills_post(description_input, async_req=True)
        >>> result = thread.get()

        Args:
            description_input (DescriptionInput):

        Keyword Args:
            dst_lang (str): Language of the similar ESCO skills.. [optional] if omitted the server will use the default value of "it"
            size (int): The maximum number of similar ESCO skills retrieved by the algorithm.. [optional] if omitted the server will use the default value of 1
            min_score (float): Minimum score of the similar ESCO skills with respect to the skill queried by the user.. [optional] if omitted the server will use the default value of 0.2
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EscoSkillResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get('async_req', False)
        kwargs['_return_http_data_only'] = kwargs.get('_return_http_data_only',
                                                      True)
        kwargs['_preload_content'] = kwargs.get('_preload_content', True)
        kwargs['_request_timeout'] = kwargs.get('_request_timeout', None)
        kwargs['_check_input_type'] = kwargs.get('_check_input_type', True)
        kwargs['_check_return_type'] = kwargs.get('_check_return_type', True)
        kwargs['_spec_property_naming'] = kwargs.get('_spec_property_naming',
                                                     False)
        kwargs['_content_type'] = kwargs.get('_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['description_input'] = \
            description_input
        return self.from_description_to_esco_skills_post_endpoint.call_with_http_info(
            **kwargs)

    def mapping_esco_get(self, code, **kwargs):
        """Mapping ESCO  # noqa: E501

         This method provides the mapping from a [ESCO](https://ec.europa.eu/esco/portal) occupation code to: - [ISCO](https://www.ilo.org/public/english/bureau/stat/isco/) occupation codes; - [O*NET](https://www.onetonline.org/) occupation codes; - [ISTAT-CP2011](http://professioni.istat.it/cp2011/) occupation codes;  All requests are displayed in English.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.mapping_esco_get(code, async_req=True)
        >>> result = thread.get()

        Args:
            code (str): [ESCO code](https://ec.europa.eu/esco/portal/occupation).

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ClassificationMappingEscoResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get('async_req', False)
        kwargs['_return_http_data_only'] = kwargs.get('_return_http_data_only',
                                                      True)
        kwargs['_preload_content'] = kwargs.get('_preload_content', True)
        kwargs['_request_timeout'] = kwargs.get('_request_timeout', None)
        kwargs['_check_input_type'] = kwargs.get('_check_input_type', True)
        kwargs['_check_return_type'] = kwargs.get('_check_return_type', True)
        kwargs['_spec_property_naming'] = kwargs.get('_spec_property_naming',
                                                     False)
        kwargs['_content_type'] = kwargs.get('_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['code'] = \
            code
        return self.mapping_esco_get_endpoint.call_with_http_info(**kwargs)

    def mapping_isco_get(self, code, **kwargs):
        """Mapping ISCO  # noqa: E501

         This method provides the mapping from a [ISCO](https://www.ilo.org/public/english/bureau/stat/isco/) occupation code to: - [ESCO](https://ec.europa.eu/esco/portal) occupation codes; - [O*NET](https://www.onetonline.org/) occupation codes; - [ISTAT-CP2011](http://professioni.istat.it/cp2011/) occupation codes;  All requests are displayed in English.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.mapping_isco_get(code, async_req=True)
        >>> result = thread.get()

        Args:
            code (str): [ISCO code](https://www.ilo.org/public/english/bureau/stat/isco/).

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ClassificationMappingIscoResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get('async_req', False)
        kwargs['_return_http_data_only'] = kwargs.get('_return_http_data_only',
                                                      True)
        kwargs['_preload_content'] = kwargs.get('_preload_content', True)
        kwargs['_request_timeout'] = kwargs.get('_request_timeout', None)
        kwargs['_check_input_type'] = kwargs.get('_check_input_type', True)
        kwargs['_check_return_type'] = kwargs.get('_check_return_type', True)
        kwargs['_spec_property_naming'] = kwargs.get('_spec_property_naming',
                                                     False)
        kwargs['_content_type'] = kwargs.get('_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['code'] = \
            code
        return self.mapping_isco_get_endpoint.call_with_http_info(**kwargs)

    def mapping_istat_cp2011_get(self, code, **kwargs):
        """Mapping ISTAT-CP2011  # noqa: E501

         This method provides the mapping from a [ISTAT-CP2011](http://professioni.istat.it/cp2011/) occupation code to: - [ESCO](https://ec.europa.eu/esco/portal) occupation codes; - [O*NET](https://www.onetonline.org/) occupation codes; - [ISCO](https://www.ilo.org/public/english/bureau/stat/isco/) occupation codes;  All requests are displayed in English.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.mapping_istat_cp2011_get(code, async_req=True)
        >>> result = thread.get()

        Args:
            code (str): [ISTAT code](http://professioni.istat.it/cp2011/).

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ClassificationMappingIstatResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get('async_req', False)
        kwargs['_return_http_data_only'] = kwargs.get('_return_http_data_only',
                                                      True)
        kwargs['_preload_content'] = kwargs.get('_preload_content', True)
        kwargs['_request_timeout'] = kwargs.get('_request_timeout', None)
        kwargs['_check_input_type'] = kwargs.get('_check_input_type', True)
        kwargs['_check_return_type'] = kwargs.get('_check_return_type', True)
        kwargs['_spec_property_naming'] = kwargs.get('_spec_property_naming',
                                                     False)
        kwargs['_content_type'] = kwargs.get('_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['code'] = \
            code
        return self.mapping_istat_cp2011_get_endpoint.call_with_http_info(
            **kwargs)

    def mapping_onet_get(self, code, **kwargs):
        """Mapping O*NET  # noqa: E501

         This method provides the mapping from a [O*NET](https://www.onetonline.org/) occupation code to: - [ESCO](https://ec.europa.eu/esco/portal) occupation codes; - [ISTAT-CP2011](http://professioni.istat.it/cp2011/) occupation codes; - [ISCO](https://www.ilo.org/public/english/bureau/stat/isco/) occupation codes;  All requests are displayed in English.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.mapping_onet_get(code, async_req=True)
        >>> result = thread.get()

        Args:
            code (str): [O*NET code](https://www.onetonline.org/).

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ClassificationMappingOnetResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get('async_req', False)
        kwargs['_return_http_data_only'] = kwargs.get('_return_http_data_only',
                                                      True)
        kwargs['_preload_content'] = kwargs.get('_preload_content', True)
        kwargs['_request_timeout'] = kwargs.get('_request_timeout', None)
        kwargs['_check_input_type'] = kwargs.get('_check_input_type', True)
        kwargs['_check_return_type'] = kwargs.get('_check_return_type', True)
        kwargs['_spec_property_naming'] = kwargs.get('_spec_property_naming',
                                                     False)
        kwargs['_content_type'] = kwargs.get('_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['code'] = \
            code
        return self.mapping_onet_get_endpoint.call_with_http_info(**kwargs)

    def similar_esco_occupations_get(self, query, **kwargs):
        """Similar ESCO Occupations  # noqa: E501

         This method provides the list of n most similar ESCO occupations given a *jobtitle*. For each returned occupation, the service provides also a list of the main related skills according to ESCO classification.  More details about ESCO occupations are showed [here](https://ec.europa.eu/esco/portal/occupation).    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.similar_esco_occupations_get(query, async_req=True)
        >>> result = thread.get()

        Args:
            query (str): A word or a brief sentence in several languages.

        Keyword Args:
            dst_lang (str): Language of the similar ESCO occupations.. [optional] if omitted the server will use the default value of "it"
            size (int): The maximum number of similar ESCO occupations retrieved by the algorithm.. [optional] if omitted the server will use the default value of 1
            min_score (float): Minimum score of the similar ESCO occupations with respect to the job title queried by the user.. [optional] if omitted the server will use the default value of 0.2
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EscoJobtitleResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get('async_req', False)
        kwargs['_return_http_data_only'] = kwargs.get('_return_http_data_only',
                                                      True)
        kwargs['_preload_content'] = kwargs.get('_preload_content', True)
        kwargs['_request_timeout'] = kwargs.get('_request_timeout', None)
        kwargs['_check_input_type'] = kwargs.get('_check_input_type', True)
        kwargs['_check_return_type'] = kwargs.get('_check_return_type', True)
        kwargs['_spec_property_naming'] = kwargs.get('_spec_property_naming',
                                                     False)
        kwargs['_content_type'] = kwargs.get('_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['query'] = \
            query
        return self.similar_esco_occupations_get_endpoint.call_with_http_info(
            **kwargs)

    def similar_esco_skills_get(self, query, **kwargs):
        """Similar ESCO Skills  # noqa: E501

         This method provides the list of n most similar ESCO skills given a *skill*. For each returned skill, the service provides also a list of the main occupations where the skill is mandatory according to ESCO classification.  More details about ESCO skills are showed [here](https://ec.europa.eu/esco/portal/skill).    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.similar_esco_skills_get(query, async_req=True)
        >>> result = thread.get()

        Args:
            query (str): A word or a brief sentence in several languages.

        Keyword Args:
            dst_lang (str): Language of the similar ESCO skills.. [optional] if omitted the server will use the default value of "it"
            size (int): The maximum number of similar ESCO skills retrieved by the algorithm.. [optional] if omitted the server will use the default value of 1
            min_score (float): Minimum score of the similar ESCO skills with respect to the skill queried by the user.. [optional] if omitted the server will use the default value of 0.2
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            EscoSkillResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get('async_req', False)
        kwargs['_return_http_data_only'] = kwargs.get('_return_http_data_only',
                                                      True)
        kwargs['_preload_content'] = kwargs.get('_preload_content', True)
        kwargs['_request_timeout'] = kwargs.get('_request_timeout', None)
        kwargs['_check_input_type'] = kwargs.get('_check_input_type', True)
        kwargs['_check_return_type'] = kwargs.get('_check_return_type', True)
        kwargs['_spec_property_naming'] = kwargs.get('_spec_property_naming',
                                                     False)
        kwargs['_content_type'] = kwargs.get('_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['query'] = \
            query
        return self.similar_esco_skills_get_endpoint.call_with_http_info(
            **kwargs)
