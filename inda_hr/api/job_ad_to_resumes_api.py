"""
    INDA HR - INtelligent Data Analysis for HR

     # Introduction  **INDA (INtelligent Data Analysis)** is an [Intervieweb](https://www.intervieweb.it/hrm/)  AI solution provided as a RESTful API.  The INDA pricing model is *credits-based*, which means that a certain number of credits is associated to each API request. Hence, users have to purchase a certain amount of credits (established according to their needs) which will be reduced  at each API call. INDA accepts and processes a user's request only if their credits quota is grater than - or,  at least, equal to - the number of credits required by that request. To obtain further details on the pricing, please visit our [site](https://inda.ai) or contact us.    INDA HR embraces a wide range of functionalities to manage the main elements of a recruitment process:   + [**candidate**](https://api.inda.ai/hr/docs/v2/#tag/Resume-Management) (hereafter also referred to as **resume** or **applicant**), or rather a  person looking for a job;  + [**job advertisement**](https://api.inda.ai/hr/docs/v2/#tag/JobAd-Management) (hereafter also referred to as **job ad**), which is a document   that collects all the main information and details about a job vacancy;  + [**application**](https://api.inda.ai/hr/docs/v2/#tag/Application-Management), that binds candidates to job ads; it is generated whenever a  candidate applies for a job.  Each of them has a specific set of methods that grants users the ability to create, read, update and delete the relative  documents, plus some special features based on AI approaches (such as *document parsing* or *semantic search*). They can be explored in their respective sections.  Data about the listed document types can be enriched by connecting them to other INDA supported entities, such as  [**companies**](https://api.inda.ai/hr/docs/v2/#tag/Company-Management) and [**universities**](https://api.inda.ai/hr/docs/v2/#tag/Universities), so that recruiters may  get a better and more detailed idea on the candidates' experiences and acquired skills.  All the functionalities mentioned above are meant to help recruiters during the talent acquisition process,  by exploiting the power of AI systems. Among the advantages a recruiter has by using this kind of systems, tackling the bias problem is surely one of the  most relevant. Bias in recruitment is a serious issue that affect both recruiters and candidates, since it may cause wrong hiring  decisions. As we care a lot about this problem, we are constantly working on reduce the bias in original data so that INDA  results may be as fair as possible. As of now, in order to tackle the bias issue, INDA automatically ignores specific fields (such as name, gender, age  and nationality) during the initial processing of each candidate data.  Furthermore, we decided to let users collect data of various types, including personal or sensitive details, but we  do not allow their usage if it is different from statistical purposes; our aim is to discourage recruiters from  focusing on candidates' personal information, and to put their attention on the candidate's skills and abilities.    We want to help recruiters to prevent any kind of bias while searching for the most valuable candidates they really need.    The following documentation is addressed both to developers, in order to provide all technical details for INDA integration, and to managers, to guide them in the exploration of the implementation possibilities.  The host of the API is [https://api.inda.ai/hr/v2/](https://api.inda.ai/hr/v2/). We recommend to check the API version and build (displayed near the documentation title). You can contact us at support@intervieweb.it in case of problems, suggestions, or particular needs.  The search panel on the left can be used to navigate through the documentation and provides an overview of the API structure. On the right, you can find (*i*) the url of the method, (*ii*) an example of request body (if present), and (*iii*) an example of response for each response code. Finally, in the central section of each API method, you can find (*i*) a general description of the purpose of the method, (*ii*) details on parameters and request body schema (if present), and (*iii*) details on response schema, error models, and error codes.    # noqa: E501

    The version of the OpenAPI document: 2.28194
    Contact: info@intervieweb.it
    Generated by: https://openapi-generator.tech
"""

import re  # noqa: F401
import sys  # noqa: F401

from inda_hr.api_client import ApiClient, Endpoint as _Endpoint
from inda_hr.model_utils import (  # noqa: F401
    check_allowed_values, check_validations, date, datetime, file_type,
    none_type, validate_and_convert_types)
from inda_hr.model.base_resume_matching_evidence_query import BaseResumeMatchingEvidenceQuery
from inda_hr.model.base_resume_matching_query import BaseResumeMatchingQuery
from inda_hr.model.error_model import ErrorModel
from inda_hr.model.http_validation_error import HTTPValidationError
from inda_hr.model.match_resume_evidence_response import MatchResumeEvidenceResponse
from inda_hr.model.resume_matching_evidence_query import ResumeMatchingEvidenceQuery
from inda_hr.model.resume_matching_query import ResumeMatchingQuery
from inda_hr.model.search_resume_match_response import SearchResumeMatchResponse


class JobAdToResumesApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.match_resumes_evidence_from_indexed_jobad_post_endpoint = _Endpoint(
            settings={
                'response_type': (MatchResumeEvidenceResponse, ),
                'auth': ['APIKey'],
                'endpoint_path':
                '/hr/v2/index/{indexname}/resumes/matching/jobad/{jobad_id}/evidence/',
                'operation_id':
                'match_resumes_evidence_from_indexed_jobad_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'indexname',
                    'jobad_id',
                    'base_resume_matching_evidence_query',
                ],
                'required': [
                    'indexname',
                    'jobad_id',
                    'base_resume_matching_evidence_query',
                ],
                'nullable': [],
                'enum': [],
                'validation': []
            },
            root_map={
                'validations': {},
                'allowed_values': {},
                'openapi_types': {
                    'indexname': (str, ),
                    'jobad_id': (str, ),
                    'base_resume_matching_evidence_query':
                    (BaseResumeMatchingEvidenceQuery, ),
                },
                'attribute_map': {
                    'indexname': 'indexname',
                    'jobad_id': 'jobad_id',
                },
                'location_map': {
                    'indexname': 'path',
                    'jobad_id': 'path',
                    'base_resume_matching_evidence_query': 'body',
                },
                'collection_format_map': {}
            },
            headers_map={
                'accept': ['application/json'],
                'content_type': ['application/json']
            },
            api_client=api_client)
        self.match_resumes_evidence_post_endpoint = _Endpoint(
            settings={
                'response_type': (MatchResumeEvidenceResponse, ),
                'auth': ['APIKey'],
                'endpoint_path':
                '/hr/v2/index/{indexname}/resumes/matching/jobad/evidence/',
                'operation_id': 'match_resumes_evidence_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'indexname',
                    'resume_matching_evidence_query',
                ],
                'required': [
                    'indexname',
                    'resume_matching_evidence_query',
                ],
                'nullable': [],
                'enum': [],
                'validation': []
            },
            root_map={
                'validations': {},
                'allowed_values': {},
                'openapi_types': {
                    'indexname': (str, ),
                    'resume_matching_evidence_query':
                    (ResumeMatchingEvidenceQuery, ),
                },
                'attribute_map': {
                    'indexname': 'indexname',
                },
                'location_map': {
                    'indexname': 'path',
                    'resume_matching_evidence_query': 'body',
                },
                'collection_format_map': {}
            },
            headers_map={
                'accept': ['application/json'],
                'content_type': ['application/json']
            },
            api_client=api_client)
        self.match_resumes_from_indexed_jobad_post_endpoint = _Endpoint(
            settings={
                'response_type': (SearchResumeMatchResponse, ),
                'auth': ['APIKey'],
                'endpoint_path':
                '/hr/v2/index/{indexname}/resumes/matching/jobad/{jobad_id}/',
                'operation_id': 'match_resumes_from_indexed_jobad_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'indexname',
                    'jobad_id',
                    'base_resume_matching_query',
                    'size',
                    'min_score',
                    'resume_langs',
                    'only_applicants',
                ],
                'required': [
                    'indexname',
                    'jobad_id',
                    'base_resume_matching_query',
                ],
                'nullable': [],
                'enum': [
                    'resume_langs',
                ],
                'validation': [
                    'size',
                    'min_score',
                    'resume_langs',
                ]
            },
            root_map={
                'validations': {
                    ('size', ): {
                        'inclusive_maximum': 100,
                    },
                    ('min_score', ): {
                        'inclusive_minimum': 0.0,
                    },
                    ('resume_langs', ): {
                        'min_items': 1,
                    },
                },
                'allowed_values': {
                    ('resume_langs', ): {
                        "ES": "es",
                        "PT": "pt",
                        "EN": "en",
                        "IT": "it",
                        "FR": "fr",
                        "DE": "de"
                    },
                },
                'openapi_types': {
                    'indexname': (str, ),
                    'jobad_id': (str, ),
                    'base_resume_matching_query': (BaseResumeMatchingQuery, ),
                    'size': (int, ),
                    'min_score': (float, ),
                    'resume_langs': ([str], ),
                    'only_applicants': (bool, ),
                },
                'attribute_map': {
                    'indexname': 'indexname',
                    'jobad_id': 'jobad_id',
                    'size': 'size',
                    'min_score': 'min_score',
                    'resume_langs': 'resume_langs',
                    'only_applicants': 'only_applicants',
                },
                'location_map': {
                    'indexname': 'path',
                    'jobad_id': 'path',
                    'base_resume_matching_query': 'body',
                    'size': 'query',
                    'min_score': 'query',
                    'resume_langs': 'query',
                    'only_applicants': 'query',
                },
                'collection_format_map': {
                    'resume_langs': 'multi',
                }
            },
            headers_map={
                'accept': ['application/json'],
                'content_type': ['application/json']
            },
            api_client=api_client)
        self.match_resumes_post_endpoint = _Endpoint(
            settings={
                'response_type': (SearchResumeMatchResponse, ),
                'auth': ['APIKey'],
                'endpoint_path':
                '/hr/v2/index/{indexname}/resumes/matching/jobad/',
                'operation_id': 'match_resumes_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'indexname',
                    'resume_matching_query',
                    'size',
                    'min_score',
                    'resume_langs',
                ],
                'required': [
                    'indexname',
                    'resume_matching_query',
                ],
                'nullable': [],
                'enum': [
                    'resume_langs',
                ],
                'validation': [
                    'size',
                    'min_score',
                    'resume_langs',
                ]
            },
            root_map={
                'validations': {
                    ('size', ): {
                        'inclusive_maximum': 100,
                    },
                    ('min_score', ): {
                        'inclusive_minimum': 0.0,
                    },
                    ('resume_langs', ): {
                        'min_items': 1,
                    },
                },
                'allowed_values': {
                    ('resume_langs', ): {
                        "ES": "es",
                        "PT": "pt",
                        "EN": "en",
                        "IT": "it",
                        "FR": "fr",
                        "DE": "de"
                    },
                },
                'openapi_types': {
                    'indexname': (str, ),
                    'resume_matching_query': (ResumeMatchingQuery, ),
                    'size': (int, ),
                    'min_score': (float, ),
                    'resume_langs': ([str], ),
                },
                'attribute_map': {
                    'indexname': 'indexname',
                    'size': 'size',
                    'min_score': 'min_score',
                    'resume_langs': 'resume_langs',
                },
                'location_map': {
                    'indexname': 'path',
                    'resume_matching_query': 'body',
                    'size': 'query',
                    'min_score': 'query',
                    'resume_langs': 'query',
                },
                'collection_format_map': {
                    'resume_langs': 'multi',
                }
            },
            headers_map={
                'accept': ['application/json'],
                'content_type': ['application/json']
            },
            api_client=api_client)

    def match_resumes_evidence_from_indexed_jobad_post(
            self, indexname, jobad_id, base_resume_matching_evidence_query,
            **kwargs):
        """Match Resumes Evidence from indexed JobAd  # noqa: E501

         This method can be used for a registerd job advert; it is analogous to the The [Match Resume Evidence](https://api.inda.ai/hr/docs/v2/#operation/match_resumes_evidence__POST) method, but it takes in input the ID of the job advert instead of its JSON.  Please refer to the [Match Resumes Evidence](https://api.inda.ai/hr/docs/v2/#operation/match_resumes_evidence__POST) description for further details on the method and on its output.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.match_resumes_evidence_from_indexed_jobad_post(indexname, jobad_id, base_resume_matching_evidence_query, async_req=True)
        >>> result = thread.get()

        Args:
            indexname (str):
            jobad_id (str):
            base_resume_matching_evidence_query (BaseResumeMatchingEvidenceQuery):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            MatchResumeEvidenceResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get('async_req', False)
        kwargs['_return_http_data_only'] = kwargs.get('_return_http_data_only',
                                                      True)
        kwargs['_preload_content'] = kwargs.get('_preload_content', True)
        kwargs['_request_timeout'] = kwargs.get('_request_timeout', None)
        kwargs['_check_input_type'] = kwargs.get('_check_input_type', True)
        kwargs['_check_return_type'] = kwargs.get('_check_return_type', True)
        kwargs['_spec_property_naming'] = kwargs.get('_spec_property_naming',
                                                     False)
        kwargs['_content_type'] = kwargs.get('_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['indexname'] = \
            indexname
        kwargs['jobad_id'] = \
            jobad_id
        kwargs['base_resume_matching_evidence_query'] = \
            base_resume_matching_evidence_query
        return self.match_resumes_evidence_from_indexed_jobad_post_endpoint.call_with_http_info(
            **kwargs)

    def match_resumes_evidence_post(self, indexname,
                                    resume_matching_evidence_query, **kwargs):
        """Match Resumes Evidence  # noqa: E501

         This method provides details about the score of a list of resumes according to the matching with a given job advert.  The method should be used after the call of [Match Resumes](https://api.inda.ai/hr/docs/v2/#operation/match_resumes__POST) or [Match Resumes from indexed JobAd](https://api.inda.ai/hr/docs/v2/#operation/match_resumes_from_indexed_jobad__POST), on a *ResumeID* or a set of *ResumeID*s returned by one of these methods, in order to obtain the evidence of the matching score.  The relevant information for the matching evidence is the same described in the [Match Resumes](https://api.inda.ai/hr/docs/v2/#operation/match_resumes__POST) method.  For each *ResumeID*, the method returns + A global matching score between all the job titles specified in the job advert and the resume job titles + A detail for each job title in the job advert, containing a matching score for this specified job title and a list of entities found in the resumes which are semantically related to the specified job title + A global matching scores between the required skills specified in the job advert and the resume skills + A detail for each required skill in the job advert, containing a matching score for this specified skill and a list of entities found in the resumes which are semantically related to the specified skill + An analogous information for the preferred skills specified in the job advert, if present. + A matching score between the [EQF level](https://en.wikipedia.org/wiki/European_Qualifications_Framework) of the candidate and the required and preferred EQF (if any) + A matching score between the experience of the candidate and the required and preferred experience (if any)  Any *ResumeID* not corresponding to an available resume in the index *indexname* will be ignored.  Note that the [Match Resumes Evidence from indexed JobAd](https://api.inda.ai/hr/docs/v2/#operation/match_resumes_evidence_from_indexed_jobad__POST), method can be used for a job advert which has been already indexed.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.match_resumes_evidence_post(indexname, resume_matching_evidence_query, async_req=True)
        >>> result = thread.get()

        Args:
            indexname (str):
            resume_matching_evidence_query (ResumeMatchingEvidenceQuery):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            MatchResumeEvidenceResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get('async_req', False)
        kwargs['_return_http_data_only'] = kwargs.get('_return_http_data_only',
                                                      True)
        kwargs['_preload_content'] = kwargs.get('_preload_content', True)
        kwargs['_request_timeout'] = kwargs.get('_request_timeout', None)
        kwargs['_check_input_type'] = kwargs.get('_check_input_type', True)
        kwargs['_check_return_type'] = kwargs.get('_check_return_type', True)
        kwargs['_spec_property_naming'] = kwargs.get('_spec_property_naming',
                                                     False)
        kwargs['_content_type'] = kwargs.get('_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['indexname'] = \
            indexname
        kwargs['resume_matching_evidence_query'] = \
            resume_matching_evidence_query
        return self.match_resumes_evidence_post_endpoint.call_with_http_info(
            **kwargs)

    def match_resumes_from_indexed_jobad_post(self, indexname, jobad_id,
                                              base_resume_matching_query,
                                              **kwargs):
        """Match Resumes from indexed JobAd  # noqa: E501

         This method performs a search among the resumes in index *indexname* to find the best matching for a given job advert.  The method can be used for any job advert which has been already added in the index. Note that, unless the parameter *only_applicants* is set to <code style='color: #333333; opacity: 0.9'>false</code>, only the resumes registered to the job advert will be considered in the search.  Note also that the [Match Resumes](https://api.inda.ai/hr/docs/v2/#operation/match_resumes__POST) method should be used for a job advert which has not not yet been indexed.  Please refer to the [Match Resumes](https://api.inda.ai/hr/docs/v2/#operation/match_resumes__POST) method for details on the relevant information used for the matching, on the suggested filters, and on the output.  The [Match Resumes Evidence from indexed JobAd](https://api.inda.ai/hr/docs/v2/#operation/match_resumes_evidence_from_indexed_jobad__POST) method can be used to obtain the evidence of the matching score.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.match_resumes_from_indexed_jobad_post(indexname, jobad_id, base_resume_matching_query, async_req=True)
        >>> result = thread.get()

        Args:
            indexname (str):
            jobad_id (str):
            base_resume_matching_query (BaseResumeMatchingQuery):

        Keyword Args:
            size (int): Optional. Number of documents to return.. [optional] if omitted the server will use the default value of 20
            min_score (float): Optional. Minimum pertinence score.. [optional] if omitted the server will use the default value of 0
            resume_langs ([str]): Languages of the Resumes. Defaults to the JobAd language.. [optional]
            only_applicants (bool): If true, it narrows the search to the resumes registered to the job advert.. [optional] if omitted the server will use the default value of True
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            SearchResumeMatchResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get('async_req', False)
        kwargs['_return_http_data_only'] = kwargs.get('_return_http_data_only',
                                                      True)
        kwargs['_preload_content'] = kwargs.get('_preload_content', True)
        kwargs['_request_timeout'] = kwargs.get('_request_timeout', None)
        kwargs['_check_input_type'] = kwargs.get('_check_input_type', True)
        kwargs['_check_return_type'] = kwargs.get('_check_return_type', True)
        kwargs['_spec_property_naming'] = kwargs.get('_spec_property_naming',
                                                     False)
        kwargs['_content_type'] = kwargs.get('_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['indexname'] = \
            indexname
        kwargs['jobad_id'] = \
            jobad_id
        kwargs['base_resume_matching_query'] = \
            base_resume_matching_query
        return self.match_resumes_from_indexed_jobad_post_endpoint.call_with_http_info(
            **kwargs)

    def match_resumes_post(self, indexname, resume_matching_query, **kwargs):
        """Match Resumes  # noqa: E501

         This method performs a search among the resumes in index *indexname* to find the best matchings for a given job advert.  The method should be used after the json of the job advert has been completely formed, but before the job advert is added in the index. We strongly recommend the use of the method [Match Resumes from indexed JobAd](https://api.inda.ai/hr/docs/v2/#operation/match_resumes_from_indexed_jobad__POST),  for a job advert which has been already indexed, as it allows to focus on the resumes who registered to the  job advert.   Note also that the [JobAd Knowledge Extraction](https://api.inda.ai/hr/docs/v2/#tag/JobAd-Knowledge-Extraction) methods can be used to enrich the job advert JSON with relevant information. The following information is particularly relevant and should be present in the job advert to obtain an accurate matching:  + The main job title  + Related job titles (if any)  + The required skills  + The preferred skills (if any)  Other relevant information -- e.g., required and preferred duration, required and preferred [EQF level](https://en.wikipedia.org/wiki/European_Qualifications_Framework)  -- is retrieved from the job advert JSON and contributes to the pertinence score of each resume, provided that the index contains a sufficient number of resumes with that information.  Optionally, a list of [*query filters*](https://api.inda.ai/hr/docs/v2/#tag/Query-Filters) (*QueryFilters*) can be provided to narrow the query. We strongly encourage use of query filters to reduce computation time and improve the result accuracy. For instance, the following filters may be used: + Filter on the last update date (*Metadata.LastModified*) + Filter on the [EQF level](https://en.wikipedia.org/wiki/European_Qualifications_Framework) (*Data.ProfileSummary.HighestEducationLevelCode.Value.EQF*) + Filter on the duration (*Data.ProfileSummary.WorkExperiencesTotalDuration.Value*) + Filter on the applicant address, if this is a relevant information  The Mandatory requirements specified within the *JobAd* (subfields of a *required* field) narrow the search to the suitable resumes, provided that the index contains a sufficient number of candidates with the information required to filter; if a requirement specified in the *JobAd* involves the same field associated to a filter specified in *QueryFilters*, the latter overrides the former.   Furthermore, in order to tackle the bias problem, INDA automatically ignores specific fields (such as name, gender, age and nationality) during the initial processing of each resume data. We are constantly working on reduce the bias in original data so that INDA results may be as fair as possible.   The method returns a list of JSON documents, each of which contains a resume that represents a job advert applicant; the resumes are sorted according to a pertinence score (*Score*) determined on the basis of the matching level in terms of the relevant information discussed above that are specified in the job advert. Please refer to the response sample on the right for further details on the output.  The [Match Resumes Evidence](https://api.inda.ai/hr/docs/v2/#operation/match_resumes_evidence__POST) method can be used to obtain the evidence of the matching score.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.match_resumes_post(indexname, resume_matching_query, async_req=True)
        >>> result = thread.get()

        Args:
            indexname (str):
            resume_matching_query (ResumeMatchingQuery):

        Keyword Args:
            size (int): Optional. Number of documents to return.. [optional] if omitted the server will use the default value of 20
            min_score (float): Optional. Minimum pertinence score.. [optional] if omitted the server will use the default value of 0
            resume_langs ([str]): Languages of the Resumes. Defaults to the JobAd language.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            SearchResumeMatchResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get('async_req', False)
        kwargs['_return_http_data_only'] = kwargs.get('_return_http_data_only',
                                                      True)
        kwargs['_preload_content'] = kwargs.get('_preload_content', True)
        kwargs['_request_timeout'] = kwargs.get('_request_timeout', None)
        kwargs['_check_input_type'] = kwargs.get('_check_input_type', True)
        kwargs['_check_return_type'] = kwargs.get('_check_return_type', True)
        kwargs['_spec_property_naming'] = kwargs.get('_spec_property_naming',
                                                     False)
        kwargs['_content_type'] = kwargs.get('_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['indexname'] = \
            indexname
        kwargs['resume_matching_query'] = \
            resume_matching_query
        return self.match_resumes_post_endpoint.call_with_http_info(**kwargs)
