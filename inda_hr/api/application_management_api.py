"""
    INDA HR - INtelligent Data Analysis for HR

     # Introduction  **INDA (INtelligent Data Analysis)** is an [Intervieweb](https://www.intervieweb.it/hrm/)  AI solution provided as a RESTful API.  The INDA pricing model is *credits-based*, which means that a certain number of credits is associated to each API request. Hence, users have to purchase a certain amount of credits (established according to their needs) which will be reduced  at each API call. INDA accepts and processes a user's request only if their credits quota is grater than - or,  at least, equal to - the number of credits required by that request. To obtain further details on the pricing, please visit our [site](https://inda.ai) or contact us.    INDA HR embraces a wide range of functionalities to manage the main elements of a recruitment process:   + [**candidate**](https://api.inda.ai/hr/docs/v2/#tag/Resume-Management) (hereafter also referred to as **resume** or **applicant**), or rather a  person looking for a job;  + [**job advertisement**](https://api.inda.ai/hr/docs/v2/#tag/JobAd-Management) (hereafter also referred to as **job ad**), which is a document   that collects all the main information and details about a job vacancy;  + [**application**](https://api.inda.ai/hr/docs/v2/#tag/Application-Management), that binds candidates to job ads; it is generated whenever a  candidate applies for a job.  Each of them has a specific set of methods that grants users the ability to create, read, update and delete the relative  documents, plus some special features based on AI approaches (such as *document parsing* or *semantic search*). They can be explored in their respective sections.  Data about the listed document types can be enriched by connecting them to other INDA supported entities, such as  [**companies**](https://api.inda.ai/hr/docs/v2/#tag/Company-Management) and [**universities**](https://api.inda.ai/hr/docs/v2/#tag/Universities), so that recruiters may  get a better and more detailed idea on the candidates' experiences and acquired skills.  All the functionalities mentioned above are meant to help recruiters during the talent acquisition process,  by exploiting the power of AI systems. Among the advantages a recruiter has by using this kind of systems, tackling the bias problem is surely one of the  most relevant. Bias in recruitment is a serious issue that affect both recruiters and candidates, since it may cause wrong hiring  decisions. As we care a lot about this problem, we are constantly working on reduce the bias in original data so that INDA  results may be as fair as possible. As of now, in order to tackle the bias issue, INDA automatically ignores specific fields (such as name, gender, age  and nationality) during the initial processing of each candidate data.  Furthermore, we decided to let users collect data of various types, including personal or sensitive details, but we  do not allow their usage if it is different from statistical purposes; our aim is to discourage recruiters from  focusing on candidates' personal information, and to put their attention on the candidate's skills and abilities.    We want to help recruiters to prevent any kind of bias while searching for the most valuable candidates they really need.    The following documentation is addressed both to developers, in order to provide all technical details for INDA integration, and to managers, to guide them in the exploration of the implementation possibilities.  The host of the API is [https://api.inda.ai/hr/v2/](https://api.inda.ai/hr/v2/). We recommend to check the API version and build (displayed near the documentation title). You can contact us at support@intervieweb.it in case of problems, suggestions, or particular needs.  The search panel on the left can be used to navigate through the documentation and provides an overview of the API structure. On the right, you can find (*i*) the url of the method, (*ii*) an example of request body (if present), and (*iii*) an example of response for each response code. Finally, in the central section of each API method, you can find (*i*) a general description of the purpose of the method, (*ii*) details on parameters and request body schema (if present), and (*iii*) details on response schema, error models, and error codes.    # noqa: E501

    The version of the OpenAPI document: 2.32211
    Contact: info@intervieweb.it
    Generated by: https://openapi-generator.tech
"""

import re  # noqa: F401
import sys  # noqa: F401

from inda_hr.api_client import ApiClient, Endpoint as _Endpoint
from inda_hr.model_utils import (  # noqa: F401
    check_allowed_values, check_validations, date, datetime, file_type,
    none_type, validate_and_convert_types)
from inda_hr.model.application_id_response import ApplicationIDResponse
from inda_hr.model.application_responses_status import ApplicationResponsesStatus
from inda_hr.model.application_status_request import ApplicationStatusRequest
from inda_hr.model.apply_item_request import ApplyItemRequest
from inda_hr.model.base_application_request import BaseApplicationRequest
from inda_hr.model.delete_application_response import DeleteApplicationResponse
from inda_hr.model.delete_applications_response import DeleteApplicationsResponse
from inda_hr.model.delete_candidates_response import DeleteCandidatesResponse
from inda_hr.model.error_model import ErrorModel
from inda_hr.model.get_application_response import GetApplicationResponse
from inda_hr.model.get_applications_response import GetApplicationsResponse
from inda_hr.model.get_candidates_response import GetCandidatesResponse
from inda_hr.model.http_validation_error import HTTPValidationError
from inda_hr.model.patch_application_request import PatchApplicationRequest
from inda_hr.model.patch_application_response import PatchApplicationResponse


class ApplicationManagementApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.add_application_post_endpoint = _Endpoint(
            settings={
                'response_type': (ApplicationIDResponse, ),
                'auth': ['APIKey'],
                'endpoint_path':
                '/hr/v2/index/{indexname}/jobad/{jobad_id}/applications/resume/{resume_id}/',
                'operation_id': 'add_application_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'indexname',
                    'jobad_id',
                    'resume_id',
                    'base_application_request',
                ],
                'required': [
                    'indexname',
                    'jobad_id',
                    'resume_id',
                ],
                'nullable': [],
                'enum': [],
                'validation': []
            },
            root_map={
                'validations': {},
                'allowed_values': {},
                'openapi_types': {
                    'indexname': (str, ),
                    'jobad_id': (JobadId, ),
                    'resume_id': (str, ),
                    'base_application_request': (BaseApplicationRequest, ),
                },
                'attribute_map': {
                    'indexname': 'indexname',
                    'jobad_id': 'jobad_id',
                    'resume_id': 'resume_id',
                },
                'location_map': {
                    'indexname': 'path',
                    'jobad_id': 'path',
                    'resume_id': 'path',
                    'base_application_request': 'body',
                },
                'collection_format_map': {}
            },
            headers_map={
                'accept': ['application/json'],
                'content_type': ['application/json']
            },
            api_client=api_client)
        self.add_application_stage_post_endpoint = _Endpoint(
            settings={
                'response_type': (ApplicationIDResponse, ),
                'auth': ['APIKey'],
                'endpoint_path':
                '/hr/v2/index/{indexname}/jobad/{jobad_id}/applications/resume/{resume_id}/hiring-pipeline/stage/',
                'operation_id': 'add_application_stage_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'indexname',
                    'resume_id',
                    'jobad_id',
                    'application_status_request',
                ],
                'required': [
                    'indexname',
                    'resume_id',
                    'jobad_id',
                    'application_status_request',
                ],
                'nullable': [],
                'enum': [],
                'validation': []
            },
            root_map={
                'validations': {},
                'allowed_values': {},
                'openapi_types': {
                    'indexname': (str, ),
                    'resume_id': (str, ),
                    'jobad_id': (JobadId, ),
                    'application_status_request': (ApplicationStatusRequest, ),
                },
                'attribute_map': {
                    'indexname': 'indexname',
                    'resume_id': 'resume_id',
                    'jobad_id': 'jobad_id',
                },
                'location_map': {
                    'indexname': 'path',
                    'resume_id': 'path',
                    'jobad_id': 'path',
                    'application_status_request': 'body',
                },
                'collection_format_map': {}
            },
            headers_map={
                'accept': ['application/json'],
                'content_type': ['application/json']
            },
            api_client=api_client)
        self.application_status_get_endpoint = _Endpoint(
            settings={
                'response_type': (ApplicationResponsesStatus, ),
                'auth': ['APIKey'],
                'endpoint_path':
                '/hr/v2/index/{indexname}/jobad/{jobad_id}/applications/resume/{resume_id}/status/',
                'operation_id': 'application_status_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'indexname',
                    'jobad_id',
                    'resume_id',
                ],
                'required': [
                    'indexname',
                    'jobad_id',
                    'resume_id',
                ],
                'nullable': [],
                'enum': [],
                'validation': []
            },
            root_map={
                'validations': {},
                'allowed_values': {},
                'openapi_types': {
                    'indexname': (str, ),
                    'jobad_id': (JobadId, ),
                    'resume_id': (str, ),
                },
                'attribute_map': {
                    'indexname': 'indexname',
                    'jobad_id': 'jobad_id',
                    'resume_id': 'resume_id',
                },
                'location_map': {
                    'indexname': 'path',
                    'jobad_id': 'path',
                    'resume_id': 'path',
                },
                'collection_format_map': {}
            },
            headers_map={
                'accept': ['application/json'],
                'content_type': [],
            },
            api_client=api_client)
        self.apply_post_endpoint = _Endpoint(settings={
            'response_type': (ApplicationIDResponse, ),
            'auth': ['APIKey'],
            'endpoint_path':
            '/hr/v2/index/{indexname}/jobad/{jobad_id}/apply/',
            'operation_id':
            'apply_post',
            'http_method':
            'POST',
            'servers':
            None,
        },
                                             params_map={
                                                 'all': [
                                                     'indexname',
                                                     'jobad_id',
                                                     'apply_item_request',
                                                     'resume_id',
                                                     'src_lang',
                                                     'dst_lang',
                                                 ],
                                                 'required': [
                                                     'indexname',
                                                     'jobad_id',
                                                     'apply_item_request',
                                                 ],
                                                 'nullable': [],
                                                 'enum': [
                                                     'src_lang',
                                                     'dst_lang',
                                                 ],
                                                 'validation': []
                                             },
                                             root_map={
                                                 'validations': {},
                                                 'allowed_values': {
                                                     ('src_lang', ): {
                                                         "PT": "pt",
                                                         "IT": "it",
                                                         "EN": "en",
                                                         "DE": "de",
                                                         "FR": "fr",
                                                         "ES": "es"
                                                     },
                                                     ('dst_lang', ): {
                                                         "PT": "pt",
                                                         "IT": "it",
                                                         "EN": "en",
                                                         "DE": "de",
                                                         "FR": "fr",
                                                         "ES": "es"
                                                     },
                                                 },
                                                 'openapi_types': {
                                                     'indexname': (str, ),
                                                     'jobad_id': (JobadId, ),
                                                     'apply_item_request':
                                                     (ApplyItemRequest, ),
                                                     'resume_id': (str, ),
                                                     'src_lang': (str, ),
                                                     'dst_lang': (str, ),
                                                 },
                                                 'attribute_map': {
                                                     'indexname': 'indexname',
                                                     'jobad_id': 'jobad_id',
                                                     'resume_id': 'resume_id',
                                                     'src_lang': 'src_lang',
                                                     'dst_lang': 'dst_lang',
                                                 },
                                                 'location_map': {
                                                     'indexname': 'path',
                                                     'jobad_id': 'path',
                                                     'apply_item_request':
                                                     'body',
                                                     'resume_id': 'query',
                                                     'src_lang': 'query',
                                                     'dst_lang': 'query',
                                                 },
                                                 'collection_format_map': {}
                                             },
                                             headers_map={
                                                 'accept':
                                                 ['application/json'],
                                                 'content_type':
                                                 ['application/json']
                                             },
                                             api_client=api_client)
        self.delete_applicants_delete_endpoint = _Endpoint(
            settings={
                'response_type': (DeleteCandidatesResponse, ),
                'auth': ['APIKey'],
                'endpoint_path':
                '/hr/v2/index/{indexname}/jobad/{jobad_id}/applications/resumes/',
                'operation_id': 'delete_applicants_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'indexname',
                    'jobad_id',
                ],
                'required': [
                    'indexname',
                    'jobad_id',
                ],
                'nullable': [],
                'enum': [],
                'validation': []
            },
            root_map={
                'validations': {},
                'allowed_values': {},
                'openapi_types': {
                    'indexname': (str, ),
                    'jobad_id': (JobadId, ),
                },
                'attribute_map': {
                    'indexname': 'indexname',
                    'jobad_id': 'jobad_id',
                },
                'location_map': {
                    'indexname': 'path',
                    'jobad_id': 'path',
                },
                'collection_format_map': {}
            },
            headers_map={
                'accept': ['application/json'],
                'content_type': [],
            },
            api_client=api_client)
        self.delete_application_delete_endpoint = _Endpoint(
            settings={
                'response_type': (DeleteApplicationResponse, ),
                'auth': ['APIKey'],
                'endpoint_path':
                '/hr/v2/index/{indexname}/jobad/{jobad_id}/applications/resume/{resume_id}/',
                'operation_id': 'delete_application_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'indexname',
                    'jobad_id',
                    'resume_id',
                ],
                'required': [
                    'indexname',
                    'jobad_id',
                    'resume_id',
                ],
                'nullable': [],
                'enum': [],
                'validation': []
            },
            root_map={
                'validations': {},
                'allowed_values': {},
                'openapi_types': {
                    'indexname': (str, ),
                    'jobad_id': (JobadId, ),
                    'resume_id': (str, ),
                },
                'attribute_map': {
                    'indexname': 'indexname',
                    'jobad_id': 'jobad_id',
                    'resume_id': 'resume_id',
                },
                'location_map': {
                    'indexname': 'path',
                    'jobad_id': 'path',
                    'resume_id': 'path',
                },
                'collection_format_map': {}
            },
            headers_map={
                'accept': ['application/json'],
                'content_type': [],
            },
            api_client=api_client)
        self.delete_application_stage_delete_endpoint = _Endpoint(
            settings={
                'response_type': (ApplicationIDResponse, ),
                'auth': ['APIKey'],
                'endpoint_path':
                '/hr/v2/index/{indexname}/jobad/{jobad_id}/applications/resume/{resume_id}/hiring-pipeline/stage/',
                'operation_id': 'delete_application_stage_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'indexname',
                    'jobad_id',
                    'resume_id',
                    'status',
                    'date',
                ],
                'required': [
                    'indexname',
                    'jobad_id',
                    'resume_id',
                    'status',
                ],
                'nullable': [],
                'enum': [
                    'status',
                ],
                'validation': []
            },
            root_map={
                'validations': {},
                'allowed_values': {
                    ('status', ): {
                        "APPLIED": "APPLIED",
                        "SOURCED": "SOURCED",
                        "SCREEN": "SCREEN",
                        "INTERVIEW": "INTERVIEW",
                        "EVALUATION": "EVALUATION",
                        "OFFER": "OFFER",
                        "HIRED": "HIRED",
                        "DISQUALIFIED": "DISQUALIFIED"
                    },
                },
                'openapi_types': {
                    'indexname': (str, ),
                    'jobad_id': (JobadId, ),
                    'resume_id': (str, ),
                    'status': (str, ),
                    'date': (datetime, ),
                },
                'attribute_map': {
                    'indexname': 'indexname',
                    'jobad_id': 'jobad_id',
                    'resume_id': 'resume_id',
                    'status': 'status',
                    'date': 'date',
                },
                'location_map': {
                    'indexname': 'path',
                    'jobad_id': 'path',
                    'resume_id': 'path',
                    'status': 'query',
                    'date': 'query',
                },
                'collection_format_map': {}
            },
            headers_map={
                'accept': ['application/json'],
                'content_type': [],
            },
            api_client=api_client)
        self.delete_applications_delete_endpoint = _Endpoint(
            settings={
                'response_type': (DeleteApplicationsResponse, ),
                'auth': ['APIKey'],
                'endpoint_path':
                '/hr/v2/index/{indexname}/resume/{resume_id}/applications/jobads/',
                'operation_id': 'delete_applications_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'indexname',
                    'resume_id',
                ],
                'required': [
                    'indexname',
                    'resume_id',
                ],
                'nullable': [],
                'enum': [],
                'validation': []
            },
            root_map={
                'validations': {},
                'allowed_values': {},
                'openapi_types': {
                    'indexname': (str, ),
                    'resume_id': (str, ),
                },
                'attribute_map': {
                    'indexname': 'indexname',
                    'resume_id': 'resume_id',
                },
                'location_map': {
                    'indexname': 'path',
                    'resume_id': 'path',
                },
                'collection_format_map': {}
            },
            headers_map={
                'accept': ['application/json'],
                'content_type': [],
            },
            api_client=api_client)
        self.get_applicants_get_endpoint = _Endpoint(
            settings={
                'response_type': (GetCandidatesResponse, ),
                'auth': ['APIKey'],
                'endpoint_path':
                '/hr/v2/index/{indexname}/jobad/{jobad_id}/applications/resumes/',
                'operation_id': 'get_applicants_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'indexname',
                    'jobad_id',
                    'cache',
                    'cache_time',
                    'offset',
                    'search_id',
                    'size',
                ],
                'required': [
                    'indexname',
                    'jobad_id',
                ],
                'nullable': [],
                'enum': [],
                'validation': [
                    'cache_time',
                    'offset',
                    'size',
                ]
            },
            root_map={
                'validations': {
                    ('cache_time', ): {
                        'inclusive_maximum': 600,
                    },
                    ('offset', ): {
                        'inclusive_minimum': 0,
                    },
                    ('size', ): {
                        'inclusive_maximum': 1000,
                    },
                },
                'allowed_values': {},
                'openapi_types': {
                    'indexname': (str, ),
                    'jobad_id': (JobadId, ),
                    'cache': (bool, ),
                    'cache_time': (int, ),
                    'offset': (int, ),
                    'search_id': (str, ),
                    'size': (int, ),
                },
                'attribute_map': {
                    'indexname': 'indexname',
                    'jobad_id': 'jobad_id',
                    'cache': 'cache',
                    'cache_time': 'cache_time',
                    'offset': 'offset',
                    'search_id': 'search_id',
                    'size': 'size',
                },
                'location_map': {
                    'indexname': 'path',
                    'jobad_id': 'path',
                    'cache': 'query',
                    'cache_time': 'query',
                    'offset': 'query',
                    'search_id': 'query',
                    'size': 'query',
                },
                'collection_format_map': {}
            },
            headers_map={
                'accept': ['application/json'],
                'content_type': [],
            },
            api_client=api_client)
        self.get_application_get_endpoint = _Endpoint(settings={
            'response_type': (GetApplicationResponse, ),
            'auth': ['APIKey'],
            'endpoint_path':
            '/hr/v2/index/{indexname}/jobad/{jobad_id}/applications/resume/{resume_id}/',
            'operation_id':
            'get_application_get',
            'http_method':
            'GET',
            'servers':
            None,
        },
                                                      params_map={
                                                          'all': [
                                                              'indexname',
                                                              'resume_id',
                                                              'jobad_id',
                                                          ],
                                                          'required': [
                                                              'indexname',
                                                              'resume_id',
                                                              'jobad_id',
                                                          ],
                                                          'nullable': [],
                                                          'enum': [],
                                                          'validation': []
                                                      },
                                                      root_map={
                                                          'validations': {},
                                                          'allowed_values': {},
                                                          'openapi_types': {
                                                              'indexname':
                                                              (str, ),
                                                              'resume_id':
                                                              (str, ),
                                                              'jobad_id':
                                                              (JobadId, ),
                                                          },
                                                          'attribute_map': {
                                                              'indexname':
                                                              'indexname',
                                                              'resume_id':
                                                              'resume_id',
                                                              'jobad_id':
                                                              'jobad_id',
                                                          },
                                                          'location_map': {
                                                              'indexname':
                                                              'path',
                                                              'resume_id':
                                                              'path',
                                                              'jobad_id':
                                                              'path',
                                                          },
                                                          'collection_format_map':
                                                          {}
                                                      },
                                                      headers_map={
                                                          'accept':
                                                          ['application/json'],
                                                          'content_type': [],
                                                      },
                                                      api_client=api_client)
        self.get_applications_get_endpoint = _Endpoint(
            settings={
                'response_type': (GetApplicationsResponse, ),
                'auth': ['APIKey'],
                'endpoint_path':
                '/hr/v2/index/{indexname}/resume/{resume_id}/applications/jobads/',
                'operation_id': 'get_applications_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'indexname',
                    'resume_id',
                    'cache',
                    'cache_time',
                    'offset',
                    'search_id',
                    'size',
                ],
                'required': [
                    'indexname',
                    'resume_id',
                ],
                'nullable': [],
                'enum': [],
                'validation': [
                    'cache_time',
                    'offset',
                    'size',
                ]
            },
            root_map={
                'validations': {
                    ('cache_time', ): {
                        'inclusive_maximum': 600,
                    },
                    ('offset', ): {
                        'inclusive_minimum': 0,
                    },
                    ('size', ): {
                        'inclusive_maximum': 1000,
                    },
                },
                'allowed_values': {},
                'openapi_types': {
                    'indexname': (str, ),
                    'resume_id': (str, ),
                    'cache': (bool, ),
                    'cache_time': (int, ),
                    'offset': (int, ),
                    'search_id': (str, ),
                    'size': (int, ),
                },
                'attribute_map': {
                    'indexname': 'indexname',
                    'resume_id': 'resume_id',
                    'cache': 'cache',
                    'cache_time': 'cache_time',
                    'offset': 'offset',
                    'search_id': 'search_id',
                    'size': 'size',
                },
                'location_map': {
                    'indexname': 'path',
                    'resume_id': 'path',
                    'cache': 'query',
                    'cache_time': 'query',
                    'offset': 'query',
                    'search_id': 'query',
                    'size': 'query',
                },
                'collection_format_map': {}
            },
            headers_map={
                'accept': ['application/json'],
                'content_type': [],
            },
            api_client=api_client)
        self.patch_application_patch_endpoint = _Endpoint(
            settings={
                'response_type': (PatchApplicationResponse, ),
                'auth': ['APIKey'],
                'endpoint_path':
                '/hr/v2/index/{indexname}/jobad/{jobad_id}/applications/resume/{resume_id}/',
                'operation_id': 'patch_application_patch',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'indexname',
                    'jobad_id',
                    'resume_id',
                    'patch_application_request',
                ],
                'required': [
                    'indexname',
                    'jobad_id',
                    'resume_id',
                    'patch_application_request',
                ],
                'nullable': [],
                'enum': [],
                'validation': []
            },
            root_map={
                'validations': {},
                'allowed_values': {},
                'openapi_types': {
                    'indexname': (str, ),
                    'jobad_id': (JobadId, ),
                    'resume_id': (str, ),
                    'patch_application_request': (PatchApplicationRequest, ),
                },
                'attribute_map': {
                    'indexname': 'indexname',
                    'jobad_id': 'jobad_id',
                    'resume_id': 'resume_id',
                },
                'location_map': {
                    'indexname': 'path',
                    'jobad_id': 'path',
                    'resume_id': 'path',
                    'patch_application_request': 'body',
                },
                'collection_format_map': {}
            },
            headers_map={
                'accept': ['application/json'],
                'content_type': ['application/json']
            },
            api_client=api_client)

    def add_application_post(self, indexname, jobad_id, resume_id, **kwargs):
        """Add Application  # noqa: E501

         This method stores on *indexname* the application made by the applicant *resume_id* to the job advertisement *jobad_id*.  It is assumed that both the resume and the job advertisement involved have been previously added to *indexname* by  the appropriate methods.  On the right, we provide an example of input structure; further details are available in dedicated sections.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.add_application_post(indexname, jobad_id, resume_id, async_req=True)
        >>> result = thread.get()

        Args:
            indexname (str):
            jobad_id (JobadId):
            resume_id (str):

        Keyword Args:
            base_application_request (BaseApplicationRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ApplicationIDResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get('async_req', False)
        kwargs['_return_http_data_only'] = kwargs.get('_return_http_data_only',
                                                      True)
        kwargs['_preload_content'] = kwargs.get('_preload_content', True)
        kwargs['_request_timeout'] = kwargs.get('_request_timeout', None)
        kwargs['_check_input_type'] = kwargs.get('_check_input_type', True)
        kwargs['_check_return_type'] = kwargs.get('_check_return_type', True)
        kwargs['_spec_property_naming'] = kwargs.get('_spec_property_naming',
                                                     False)
        kwargs['_content_type'] = kwargs.get('_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['indexname'] = \
            indexname
        kwargs['jobad_id'] = \
            jobad_id
        kwargs['resume_id'] = \
            resume_id
        return self.add_application_post_endpoint.call_with_http_info(**kwargs)

    def add_application_stage_post(self, indexname, resume_id, jobad_id,
                                   application_status_request, **kwargs):
        """Add Application Stage  # noqa: E501

         This method updates the applicant hiring pipeline by adding a new stage according to the requested values.  The supported stages for the hiring pipelines are: <code style='color: #333333; opacity: 0.9'>APPLIED</code>, <code style='color: #333333; opacity: 0.9'>SOURCED</code>, <code style='color: #333333; opacity: 0.9'>SCREEN</code>, <code style='color: #333333; opacity: 0.9'>INTERVIEW</code>, <code style='color: #333333; opacity: 0.9'>EVALUATION</code>, <code style='color: #333333; opacity: 0.9'>OFFER</code>, <code style='color: #333333; opacity: 0.9'>HIRED</code>, <code style='color: #333333; opacity: 0.9'>DISQUALIFIED</code>.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.add_application_stage_post(indexname, resume_id, jobad_id, application_status_request, async_req=True)
        >>> result = thread.get()

        Args:
            indexname (str):
            resume_id (str):
            jobad_id (JobadId):
            application_status_request (ApplicationStatusRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ApplicationIDResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get('async_req', False)
        kwargs['_return_http_data_only'] = kwargs.get('_return_http_data_only',
                                                      True)
        kwargs['_preload_content'] = kwargs.get('_preload_content', True)
        kwargs['_request_timeout'] = kwargs.get('_request_timeout', None)
        kwargs['_check_input_type'] = kwargs.get('_check_input_type', True)
        kwargs['_check_return_type'] = kwargs.get('_check_return_type', True)
        kwargs['_spec_property_naming'] = kwargs.get('_spec_property_naming',
                                                     False)
        kwargs['_content_type'] = kwargs.get('_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['indexname'] = \
            indexname
        kwargs['resume_id'] = \
            resume_id
        kwargs['jobad_id'] = \
            jobad_id
        kwargs['application_status_request'] = \
            application_status_request
        return self.add_application_stage_post_endpoint.call_with_http_info(
            **kwargs)

    def application_status_get(self, indexname, jobad_id, resume_id, **kwargs):
        """Application Status  # noqa: E501

         This method returns the status of an application, which can be any of the following: + *Processing*: the application is in INDA process queue; + *Available*: the application is in the index and is available to the user; + *Duplicate*: the application was a duplicate, refer to the indicated pair  (*ResumeID*, *JobAdID*) to retrieve the already indexed one; + *Failed*: the processing of the input failed; + *Missing*: none of the previous; the pair (*ResumeID*, *JobAdID*) may be wrong or corresponding to a deleted application.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.application_status_get(indexname, jobad_id, resume_id, async_req=True)
        >>> result = thread.get()

        Args:
            indexname (str):
            jobad_id (JobadId):
            resume_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ApplicationResponsesStatus
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get('async_req', False)
        kwargs['_return_http_data_only'] = kwargs.get('_return_http_data_only',
                                                      True)
        kwargs['_preload_content'] = kwargs.get('_preload_content', True)
        kwargs['_request_timeout'] = kwargs.get('_request_timeout', None)
        kwargs['_check_input_type'] = kwargs.get('_check_input_type', True)
        kwargs['_check_return_type'] = kwargs.get('_check_return_type', True)
        kwargs['_spec_property_naming'] = kwargs.get('_spec_property_naming',
                                                     False)
        kwargs['_content_type'] = kwargs.get('_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['indexname'] = \
            indexname
        kwargs['jobad_id'] = \
            jobad_id
        kwargs['resume_id'] = \
            resume_id
        return self.application_status_get_endpoint.call_with_http_info(
            **kwargs)

    def apply_post(self, indexname, jobad_id, apply_item_request, **kwargs):
        """Apply  # noqa: E501

         This method adds a candidate resume to *indexname* and registers their application to *jobad_id*.  In an asynchronous fashion, the resume to be processed is added to the server's task queue and the assigned *ResumeID*  is returned immediately; when its processing is successfully completed and the resume is effectively added to  *indexname*, the pipeline continues with the candidate request to apply to the job advertisement identified by  *jobad_id*.  Under the hood, this method performs: + [Add Resume](https://api.inda.ai/hr/docs/v2/#operation/add_resume__POST)  + [Add Application](https://api.inda.ai/hr/docs/v2/#operation/add_application__POST)  Note that the document may not successfully conclude the processing pipeline (e.g., it may be discarded because duplicate of one of the documents already present in the *indexname*), and thus it may not be actually added to the index. The same may happen while processing the application request.  In order to verify the resume and the application status, the user can use the *ResumeID* and the *JobAdID* through  the following methods: + [Resume Status](https://api.inda.ai/hr/docs/v2/#operation/resume_status__GET) + [Application Status](https://api.inda.ai/hr/docs/v2/#operation/application_status__GET) + [Get Failures](https://api.inda.ai/hr/docs/v2/#operation/get_failures__GET)  On the right, we provide an example of input structure; further details are available in dedicated sections.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.apply_post(indexname, jobad_id, apply_item_request, async_req=True)
        >>> result = thread.get()

        Args:
            indexname (str):
            jobad_id (JobadId):
            apply_item_request (ApplyItemRequest):

        Keyword Args:
            resume_id (str): [optional]
            src_lang (str): Optional. Language in which the following *Resume.Data* entities are expressed: *Skills*, *WorkExperiences.Skills*, *JobTitles*, *WorkExperiences.PositionTitle* and *Languages*.If missing, the detected *Attachment.CV.File* language is assumed as `src_lang`.. [optional]
            dst_lang (str): Optional. Destination language in which the following *Resume.Data* entities are translated: *Skills*, *WorkExperiences.Skills*, *JobTitles*, *WorkExperiences.PositionTitle* and *Languages*.If missing, the input or detected `src_lang` is assumed as `dst_lang`.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ApplicationIDResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get('async_req', False)
        kwargs['_return_http_data_only'] = kwargs.get('_return_http_data_only',
                                                      True)
        kwargs['_preload_content'] = kwargs.get('_preload_content', True)
        kwargs['_request_timeout'] = kwargs.get('_request_timeout', None)
        kwargs['_check_input_type'] = kwargs.get('_check_input_type', True)
        kwargs['_check_return_type'] = kwargs.get('_check_return_type', True)
        kwargs['_spec_property_naming'] = kwargs.get('_spec_property_naming',
                                                     False)
        kwargs['_content_type'] = kwargs.get('_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['indexname'] = \
            indexname
        kwargs['jobad_id'] = \
            jobad_id
        kwargs['apply_item_request'] = \
            apply_item_request
        return self.apply_post_endpoint.call_with_http_info(**kwargs)

    def delete_applicants_delete(self, indexname, jobad_id, **kwargs):
        """Delete Applicants  # noqa: E501

         This method removes all the applicants associated with *jobad_id* from the index *indexname*.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_applicants_delete(indexname, jobad_id, async_req=True)
        >>> result = thread.get()

        Args:
            indexname (str):
            jobad_id (JobadId):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            DeleteCandidatesResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get('async_req', False)
        kwargs['_return_http_data_only'] = kwargs.get('_return_http_data_only',
                                                      True)
        kwargs['_preload_content'] = kwargs.get('_preload_content', True)
        kwargs['_request_timeout'] = kwargs.get('_request_timeout', None)
        kwargs['_check_input_type'] = kwargs.get('_check_input_type', True)
        kwargs['_check_return_type'] = kwargs.get('_check_return_type', True)
        kwargs['_spec_property_naming'] = kwargs.get('_spec_property_naming',
                                                     False)
        kwargs['_content_type'] = kwargs.get('_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['indexname'] = \
            indexname
        kwargs['jobad_id'] = \
            jobad_id
        return self.delete_applicants_delete_endpoint.call_with_http_info(
            **kwargs)

    def delete_application_delete(self, indexname, jobad_id, resume_id,
                                  **kwargs):
        """Delete Application  # noqa: E501

         This method removes the application associated with *jobad_id* and *resume_id* from the index *indexname*.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_application_delete(indexname, jobad_id, resume_id, async_req=True)
        >>> result = thread.get()

        Args:
            indexname (str):
            jobad_id (JobadId):
            resume_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            DeleteApplicationResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get('async_req', False)
        kwargs['_return_http_data_only'] = kwargs.get('_return_http_data_only',
                                                      True)
        kwargs['_preload_content'] = kwargs.get('_preload_content', True)
        kwargs['_request_timeout'] = kwargs.get('_request_timeout', None)
        kwargs['_check_input_type'] = kwargs.get('_check_input_type', True)
        kwargs['_check_return_type'] = kwargs.get('_check_return_type', True)
        kwargs['_spec_property_naming'] = kwargs.get('_spec_property_naming',
                                                     False)
        kwargs['_content_type'] = kwargs.get('_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['indexname'] = \
            indexname
        kwargs['jobad_id'] = \
            jobad_id
        kwargs['resume_id'] = \
            resume_id
        return self.delete_application_delete_endpoint.call_with_http_info(
            **kwargs)

    def delete_application_stage_delete(self, indexname, jobad_id, resume_id,
                                        status, **kwargs):
        """Delete Application Stage  # noqa: E501

         This method updates the applicant hiring pipeline by deleting a previously stored stage according to the requested  values.  The supported stages for the hiring pipelines are: <code style='color: #333333; opacity: 0.9'>APPLIED</code>, <code style='color: #333333; opacity: 0.9'>SOURCED</code>, <code style='color: #333333; opacity: 0.9'>SCREEN</code>, <code style='color: #333333; opacity: 0.9'>INTERVIEW</code>, <code style='color: #333333; opacity: 0.9'>EVALUATION</code>, <code style='color: #333333; opacity: 0.9'>OFFER</code>, <code style='color: #333333; opacity: 0.9'>HIRED</code>, <code style='color: #333333; opacity: 0.9'>DISQUALIFIED</code>.  Note that all the stages matching *status* and *date* (if present) query parameters will be removed from the  hiring pipeline.     # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_application_stage_delete(indexname, jobad_id, resume_id, status, async_req=True)
        >>> result = thread.get()

        Args:
            indexname (str):
            jobad_id (JobadId):
            resume_id (str):
            status (str): The status describes the hiring pipeline level. The statuses are: <code style='color: #333333; opacity: 0.9'>APPLIED</code>, <code style='color: #333333; opacity: 0.9'>SOURCED</code>, <code style='color: #333333; opacity: 0.9'>SCREEN</code>, <code style='color: #333333; opacity: 0.9'>INTERVIEW</code>, <code style='color: #333333; opacity: 0.9'>EVALUATION</code>, <code style='color: #333333; opacity: 0.9'>OFFER</code>, <code style='color: #333333; opacity: 0.9'>HIRED</code>, <code style='color: #333333; opacity: 0.9'>DISQUALIFIED</code>.

        Keyword Args:
            date (datetime): The date in which the status changed.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ApplicationIDResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get('async_req', False)
        kwargs['_return_http_data_only'] = kwargs.get('_return_http_data_only',
                                                      True)
        kwargs['_preload_content'] = kwargs.get('_preload_content', True)
        kwargs['_request_timeout'] = kwargs.get('_request_timeout', None)
        kwargs['_check_input_type'] = kwargs.get('_check_input_type', True)
        kwargs['_check_return_type'] = kwargs.get('_check_return_type', True)
        kwargs['_spec_property_naming'] = kwargs.get('_spec_property_naming',
                                                     False)
        kwargs['_content_type'] = kwargs.get('_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['indexname'] = \
            indexname
        kwargs['jobad_id'] = \
            jobad_id
        kwargs['resume_id'] = \
            resume_id
        kwargs['status'] = \
            status
        return self.delete_application_stage_delete_endpoint.call_with_http_info(
            **kwargs)

    def delete_applications_delete(self, indexname, resume_id, **kwargs):
        """Delete Applications  # noqa: E501

         This method removes all the applications associated with *resume_id* from the index *indexname*.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_applications_delete(indexname, resume_id, async_req=True)
        >>> result = thread.get()

        Args:
            indexname (str):
            resume_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            DeleteApplicationsResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get('async_req', False)
        kwargs['_return_http_data_only'] = kwargs.get('_return_http_data_only',
                                                      True)
        kwargs['_preload_content'] = kwargs.get('_preload_content', True)
        kwargs['_request_timeout'] = kwargs.get('_request_timeout', None)
        kwargs['_check_input_type'] = kwargs.get('_check_input_type', True)
        kwargs['_check_return_type'] = kwargs.get('_check_return_type', True)
        kwargs['_spec_property_naming'] = kwargs.get('_spec_property_naming',
                                                     False)
        kwargs['_content_type'] = kwargs.get('_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['indexname'] = \
            indexname
        kwargs['resume_id'] = \
            resume_id
        return self.delete_applications_delete_endpoint.call_with_http_info(
            **kwargs)

    def get_applicants_get(self, indexname, jobad_id, **kwargs):
        """Get Applicants  # noqa: E501

         This method returns a list of UUID4 associated to applicants of the job advertisement with id *jobad_id* stored in the index *indexname*.  Query parameters are used to specify the *offset* and *size* of the search. The method uses *cache* = <code style='color: #333333; opacity: 0.9'>true</code> by default, meaning that it will cache automatically each search for *cache_time* seconds. When caching is active, *offset* is ignored; in order to navigate or scroll the entire search response (in chunks of size *size*, as specified in the first search), this method should be used through the *search_id*. When *search_id* is provided, other query parameters are ignored, except *cache_time*.  The use of caching is highly recommended to improve the performances.  Note that a new *search_id* is provided for every scroll. Search IDs are not unique but it is strongly recommended to update the *search_id* at every call of this method with the *SearchID* of the last response. If the *SearchID* is missing or equal to <code style='color: #333333; opacity: 0.9'>null</code>, the scroll has ended.  Beware that the scroll can ONLY go forward in the search cache because it is meant to review large searches.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_applicants_get(indexname, jobad_id, async_req=True)
        >>> result = thread.get()

        Args:
            indexname (str):
            jobad_id (JobadId):

        Keyword Args:
            cache (bool): Optional. Whether the search results should be cached or not.. [optional] if omitted the server will use the default value of True
            cache_time (int): Optional. Seconds.Ignored if *cache* is <code style='color: #333333; opacity: 0.9'>false</code>.. [optional] if omitted the server will use the default value of 300
            offset (int): Optional. Number of documents to skip. Ignored if *cache* is <code style='color: #333333; opacity: 0.9'>true</code>.. [optional] if omitted the server will use the default value of 0
            search_id (str): Both the initial search request and each subsequent scroll request returns a *SearchID*. The *SearchID* may or may not  change between requests; however, only the most recently received *SearchID* should be used.. [optional]
            size (int): Optional. Number of documents to return.. [optional] if omitted the server will use the default value of 50
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GetCandidatesResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get('async_req', False)
        kwargs['_return_http_data_only'] = kwargs.get('_return_http_data_only',
                                                      True)
        kwargs['_preload_content'] = kwargs.get('_preload_content', True)
        kwargs['_request_timeout'] = kwargs.get('_request_timeout', None)
        kwargs['_check_input_type'] = kwargs.get('_check_input_type', True)
        kwargs['_check_return_type'] = kwargs.get('_check_return_type', True)
        kwargs['_spec_property_naming'] = kwargs.get('_spec_property_naming',
                                                     False)
        kwargs['_content_type'] = kwargs.get('_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['indexname'] = \
            indexname
        kwargs['jobad_id'] = \
            jobad_id
        return self.get_applicants_get_endpoint.call_with_http_info(**kwargs)

    def get_application_get(self, indexname, resume_id, jobad_id, **kwargs):
        """Get Application  # noqa: E501

         This method returns the information related to the application stored with ids *resume_id* and *jobad_id* in the index *indexname*.  As reported in the schema below, the method has two different response schemas: + a *Status* response is returned when the application or the related [resume](https://api.inda.ai/hr/docs/v2/#tag/Resume-Management) is still in the processing queue, if the processing failed, or if the requested application has never been stored (e.g., resume processing failed when using [Apply](https://api.inda.ai/hr/docs/v2/#operation/apply__POST) method); + a *GetApplicationResponse* response is returned if the application has been successfully processed and inserted in the index.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_application_get(indexname, resume_id, jobad_id, async_req=True)
        >>> result = thread.get()

        Args:
            indexname (str):
            resume_id (str):
            jobad_id (JobadId):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GetApplicationResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get('async_req', False)
        kwargs['_return_http_data_only'] = kwargs.get('_return_http_data_only',
                                                      True)
        kwargs['_preload_content'] = kwargs.get('_preload_content', True)
        kwargs['_request_timeout'] = kwargs.get('_request_timeout', None)
        kwargs['_check_input_type'] = kwargs.get('_check_input_type', True)
        kwargs['_check_return_type'] = kwargs.get('_check_return_type', True)
        kwargs['_spec_property_naming'] = kwargs.get('_spec_property_naming',
                                                     False)
        kwargs['_content_type'] = kwargs.get('_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['indexname'] = \
            indexname
        kwargs['resume_id'] = \
            resume_id
        kwargs['jobad_id'] = \
            jobad_id
        return self.get_application_get_endpoint.call_with_http_info(**kwargs)

    def get_applications_get(self, indexname, resume_id, **kwargs):
        """Get Applications  # noqa: E501

         This method returns a list of UUID4 associated to those job advertisements that have the resume of id *resume_id* as applicant. Both resumes and job advertisements are stored in the *index* indexname.  Query parameters are used to specify the *offset* and *size* of the search. The method uses *cache* = <code style='color: #333333; opacity: 0.9'>true</code> by default, meaning that it will cache automatically each search for *cache_time* seconds. When caching is active, *offset* is ignored; in order to navigate or scroll the entire search response (in chunks of size *size*, as specified in the first search), this method should be used through the *search_id*. When *search_id* is provided, other query parameters are ignored, except *cache_time*.  The use of caching is highly recommended to improve the performances.  Note that a new *search_id* is provided for every scroll. Search IDs are not unique but it is strongly recommended to update the *search_id* at every call of this method with the *SearchID* of the last response.  Beware that the scroll can ONLY go forward in the search cache because it is meant to review large searches.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_applications_get(indexname, resume_id, async_req=True)
        >>> result = thread.get()

        Args:
            indexname (str):
            resume_id (str):

        Keyword Args:
            cache (bool): Optional. Whether the search results should be cached or not.. [optional] if omitted the server will use the default value of True
            cache_time (int): Optional. Seconds.. [optional] if omitted the server will use the default value of 300
            offset (int): Optional. Number of documents to skip. Ignored if *cache* is <code style='color: #333333; opacity: 0.9'>true</code>.. [optional] if omitted the server will use the default value of 0
            search_id (str): Both the initial search request and each subsequent scroll request returns a *search_id*. The *search_id* may or may not  change between requests; however, only the most recently received *search_id* should be used.. [optional]
            size (int): Optional. Number of documents to return.. [optional] if omitted the server will use the default value of 50
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GetApplicationsResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get('async_req', False)
        kwargs['_return_http_data_only'] = kwargs.get('_return_http_data_only',
                                                      True)
        kwargs['_preload_content'] = kwargs.get('_preload_content', True)
        kwargs['_request_timeout'] = kwargs.get('_request_timeout', None)
        kwargs['_check_input_type'] = kwargs.get('_check_input_type', True)
        kwargs['_check_return_type'] = kwargs.get('_check_return_type', True)
        kwargs['_spec_property_naming'] = kwargs.get('_spec_property_naming',
                                                     False)
        kwargs['_content_type'] = kwargs.get('_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['indexname'] = \
            indexname
        kwargs['resume_id'] = \
            resume_id
        return self.get_applications_get_endpoint.call_with_http_info(**kwargs)

    def patch_application_patch(self, indexname, jobad_id, resume_id,
                                patch_application_request, **kwargs):
        """Patch Application  # noqa: E501

         This method updates the information related to the application stored with id *resume_id* and *jobad_id*.  This method accepts an application/json body with the same structure as [Add Application](https://api.inda.ai/hr/docs/v2/#operation/add_application__POST) however in this case all fields are optional. Fields that contain differences between the corresponding original ones are substituted, while new fields are added. Bear in mind that lists are considered as singular value, therefore to modify an entry in a list it is necessary to insert the full list.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.patch_application_patch(indexname, jobad_id, resume_id, patch_application_request, async_req=True)
        >>> result = thread.get()

        Args:
            indexname (str):
            jobad_id (JobadId):
            resume_id (str):
            patch_application_request (PatchApplicationRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PatchApplicationResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get('async_req', False)
        kwargs['_return_http_data_only'] = kwargs.get('_return_http_data_only',
                                                      True)
        kwargs['_preload_content'] = kwargs.get('_preload_content', True)
        kwargs['_request_timeout'] = kwargs.get('_request_timeout', None)
        kwargs['_check_input_type'] = kwargs.get('_check_input_type', True)
        kwargs['_check_return_type'] = kwargs.get('_check_return_type', True)
        kwargs['_spec_property_naming'] = kwargs.get('_spec_property_naming',
                                                     False)
        kwargs['_content_type'] = kwargs.get('_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['indexname'] = \
            indexname
        kwargs['jobad_id'] = \
            jobad_id
        kwargs['resume_id'] = \
            resume_id
        kwargs['patch_application_request'] = \
            patch_application_request
        return self.patch_application_patch_endpoint.call_with_http_info(
            **kwargs)
