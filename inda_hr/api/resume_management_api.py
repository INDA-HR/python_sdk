"""
    INDA HR - INtelligent Data Analysis for HR

     # Introduction  **INDA (INtelligent Data Analysis)** is an [Intervieweb](https://www.intervieweb.it/hrm/)  AI solution provided as a RESTful API.  The INDA pricing model is *credits-based*, which means that a certain number of credits is associated to each API request. Hence, users have to purchase a certain amount of credits (established according to their needs) which will be reduced  at each API call. INDA accepts and processes a user's request only if their credits quota is grater than - or,  at least, equal to - the number of credits required by that request. To obtain further details on the pricing, please visit our [site](https://inda.ai) or contact us.    INDA HR embraces a wide range of functionalities to manage the main elements of a recruitment process:   + [**candidate**](https://api.inda.ai/hr/docs/v2/#tag/Resume-Management) (hereafter also referred to as **resume** or **applicant**), or rather a  person looking for a job;  + [**job advertisement**](https://api.inda.ai/hr/docs/v2/#tag/JobAd-Management) (hereafter also referred to as **job ad**), which is a document   that collects all the main information and details about a job vacancy;  + [**application**](https://api.inda.ai/hr/docs/v2/#tag/Application-Management), that binds candidates to job ads; it is generated whenever a  candidate applies for a job.  Each of them has a specific set of methods that grants users the ability to create, read, update and delete the relative  documents, plus some special features based on AI approaches (such as *document parsing* or *semantic search*). They can be explored in their respective sections.  Data about the listed document types can be enriched by connecting them to other INDA supported entities, such as  [**companies**](https://api.inda.ai/hr/docs/v2/#tag/Company-Management) and [**universities**](https://api.inda.ai/hr/docs/v2/#tag/Universities), so that recruiters may  get a better and more detailed idea on the candidates' experiences and acquired skills.  All the functionalities mentioned above are meant to help recruiters during the talent acquisition process,  by exploiting the power of AI systems. Among the advantages a recruiter has by using this kind of systems, tackling the bias problem is surely one of the  most relevant. Bias in recruitment is a serious issue that affect both recruiters and candidates, since it may cause wrong hiring  decisions. As we care a lot about this problem, we are constantly working on reduce the bias in original data so that INDA  results may be as fair as possible. As of now, in order to tackle the bias issue, INDA automatically ignores specific fields (such as name, gender, age  and nationality) during the initial processing of each candidate data.  Furthermore, we decided to let users collect data of various types, including personal or sensitive details, but we  do not allow their usage if it is different from statistical purposes; our aim is to discourage recruiters from  focusing on candidates' personal information, and to put their attention on the candidate's skills and abilities.    We want to help recruiters to prevent any kind of bias while searching for the most valuable candidates they really need.    The following documentation is addressed both to developers, in order to provide all technical details for INDA integration, and to managers, to guide them in the exploration of the implementation possibilities.  The host of the API is [https://api.inda.ai/hr/v2/](https://api.inda.ai/hr/v2/). We recommend to check the API version and build (displayed near the documentation title). You can contact us at support@intervieweb.it in case of problems, suggestions, or particular needs.  The search panel on the left can be used to navigate through the documentation and provides an overview of the API structure. On the right, you can find (*i*) the url of the method, (*ii*) an example of request body (if present), and (*iii*) an example of response for each response code. Finally, in the central section of each API method, you can find (*i*) a general description of the purpose of the method, (*ii*) details on parameters and request body schema (if present), and (*iii*) details on response schema, error models, and error codes.    # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Contact: info@intervieweb.it
    Generated by: https://openapi-generator.tech
"""

import re  # noqa: F401
import sys  # noqa: F401

from inda_hr.api_client import ApiClient, Endpoint as _Endpoint
from inda_hr.model_utils import (  # noqa: F401
    check_allowed_values, check_validations, date, datetime, file_type,
    none_type, validate_and_convert_types)
from inda_hr.model.base_item_id_response import BaseItemIdResponse
from inda_hr.model.base_models_error_model import BaseModelsErrorModel
from inda_hr.model.binary_item_response import BinaryItemResponse
from inda_hr.model.binary_pic_response import BinaryPicResponse
from inda_hr.model.delete_item_response import DeleteItemResponse
from inda_hr.model.document_text_response import DocumentTextResponse
from inda_hr.model.error_model import ErrorModel
from inda_hr.model.file_item_request import FileItemRequest
from inda_hr.model.get_item_response import GetItemResponse
from inda_hr.model.http_validation_error import HTTPValidationError
from inda_hr.model.item_id_response import ItemIdResponse
from inda_hr.model.patch_item_request import PatchItemRequest
from inda_hr.model.patch_item_response import PatchItemResponse
from inda_hr.model.resume_responses_status import ResumeResponsesStatus
from inda_hr.model.update_item_request import UpdateItemRequest
from inda_hr.model.update_pic_request import UpdatePicRequest


class ResumeManagementApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.add_resume_post_endpoint = _Endpoint(
            settings={
                'response_type': (ItemIdResponse, ),
                'auth': ['APIKey'],
                'endpoint_path': '/hr/v2/index/{indexname}/resume/',
                'operation_id': 'add_resume_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'indexname',
                    'file_item_request',
                    'sync',
                    'resume_id',
                    'src_lang',
                    'dst_lang',
                ],
                'required': [
                    'indexname',
                    'file_item_request',
                ],
                'nullable': [],
                'enum': [
                    'src_lang',
                    'dst_lang',
                ],
                'validation': []
            },
            root_map={
                'validations': {},
                'allowed_values': {
                    ('src_lang', ): {
                        "PT": "pt",
                        "IT": "it",
                        "EN": "en",
                        "DE": "de",
                        "FR": "fr",
                        "ES": "es"
                    },
                    ('dst_lang', ): {
                        "PT": "pt",
                        "IT": "it",
                        "EN": "en",
                        "DE": "de",
                        "FR": "fr",
                        "ES": "es"
                    },
                },
                'openapi_types': {
                    'indexname': (str, ),
                    'file_item_request': (FileItemRequest, ),
                    'sync': (bool, ),
                    'resume_id': (str, ),
                    'src_lang': (str, ),
                    'dst_lang': (str, ),
                },
                'attribute_map': {
                    'indexname': 'indexname',
                    'sync': 'sync',
                    'resume_id': 'resume_id',
                    'src_lang': 'src_lang',
                    'dst_lang': 'dst_lang',
                },
                'location_map': {
                    'indexname': 'path',
                    'file_item_request': 'body',
                    'sync': 'query',
                    'resume_id': 'query',
                    'src_lang': 'query',
                    'dst_lang': 'query',
                },
                'collection_format_map': {}
            },
            headers_map={
                'accept': ['application/json'],
                'content_type': ['application/json']
            },
            api_client=api_client)
        self.delete_pic_delete_endpoint = _Endpoint(
            settings={
                'response_type': (DeleteItemResponse, ),
                'auth': ['APIKey'],
                'endpoint_path':
                '/hr/v2/index/{indexname}/resume/{resume_id}/pic/',
                'operation_id': 'delete_pic_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'indexname',
                    'resume_id',
                ],
                'required': [
                    'indexname',
                    'resume_id',
                ],
                'nullable': [],
                'enum': [],
                'validation': []
            },
            root_map={
                'validations': {},
                'allowed_values': {},
                'openapi_types': {
                    'indexname': (str, ),
                    'resume_id': (str, ),
                },
                'attribute_map': {
                    'indexname': 'indexname',
                    'resume_id': 'resume_id',
                },
                'location_map': {
                    'indexname': 'path',
                    'resume_id': 'path',
                },
                'collection_format_map': {}
            },
            headers_map={
                'accept': ['application/json'],
                'content_type': [],
            },
            api_client=api_client)
        self.delete_resume_delete_endpoint = _Endpoint(
            settings={
                'response_type': (DeleteItemResponse, ),
                'auth': ['APIKey'],
                'endpoint_path':
                '/hr/v2/index/{indexname}/resume/{resume_id}/',
                'operation_id': 'delete_resume_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'indexname',
                    'resume_id',
                ],
                'required': [
                    'indexname',
                    'resume_id',
                ],
                'nullable': [],
                'enum': [],
                'validation': []
            },
            root_map={
                'validations': {},
                'allowed_values': {},
                'openapi_types': {
                    'indexname': (str, ),
                    'resume_id': (str, ),
                },
                'attribute_map': {
                    'indexname': 'indexname',
                    'resume_id': 'resume_id',
                },
                'location_map': {
                    'indexname': 'path',
                    'resume_id': 'path',
                },
                'collection_format_map': {}
            },
            headers_map={
                'accept': ['application/json'],
                'content_type': [],
            },
            api_client=api_client)
        self.get_cv_get_endpoint = _Endpoint(settings={
            'response_type': (BinaryItemResponse, ),
            'auth': ['APIKey'],
            'endpoint_path':
            '/hr/v2/index/{indexname}/resume/{resume_id}/document/',
            'operation_id':
            'get_cv_get',
            'http_method':
            'GET',
            'servers':
            None,
        },
                                             params_map={
                                                 'all': [
                                                     'indexname',
                                                     'resume_id',
                                                 ],
                                                 'required': [
                                                     'indexname',
                                                     'resume_id',
                                                 ],
                                                 'nullable': [],
                                                 'enum': [],
                                                 'validation': []
                                             },
                                             root_map={
                                                 'validations': {},
                                                 'allowed_values': {},
                                                 'openapi_types': {
                                                     'indexname': (str, ),
                                                     'resume_id': (str, ),
                                                 },
                                                 'attribute_map': {
                                                     'indexname': 'indexname',
                                                     'resume_id': 'resume_id',
                                                 },
                                                 'location_map': {
                                                     'indexname': 'path',
                                                     'resume_id': 'path',
                                                 },
                                                 'collection_format_map': {}
                                             },
                                             headers_map={
                                                 'accept':
                                                 ['application/json'],
                                                 'content_type': [],
                                             },
                                             api_client=api_client)
        self.get_cv_text_get_endpoint = _Endpoint(settings={
            'response_type': (DocumentTextResponse, ),
            'auth': ['APIKey'],
            'endpoint_path':
            '/hr/v2/index/{indexname}/resume/{resume_id}/text/',
            'operation_id':
            'get_cv_text_get',
            'http_method':
            'GET',
            'servers':
            None,
        },
                                                  params_map={
                                                      'all': [
                                                          'indexname',
                                                          'resume_id',
                                                      ],
                                                      'required': [
                                                          'indexname',
                                                          'resume_id',
                                                      ],
                                                      'nullable': [],
                                                      'enum': [],
                                                      'validation': []
                                                  },
                                                  root_map={
                                                      'validations': {},
                                                      'allowed_values': {},
                                                      'openapi_types': {
                                                          'indexname': (str, ),
                                                          'resume_id': (str, ),
                                                      },
                                                      'attribute_map': {
                                                          'indexname':
                                                          'indexname',
                                                          'resume_id':
                                                          'resume_id',
                                                      },
                                                      'location_map': {
                                                          'indexname': 'path',
                                                          'resume_id': 'path',
                                                      },
                                                      'collection_format_map':
                                                      {}
                                                  },
                                                  headers_map={
                                                      'accept':
                                                      ['application/json'],
                                                      'content_type': [],
                                                  },
                                                  api_client=api_client)
        self.get_pic_get_endpoint = _Endpoint(settings={
            'response_type': (BinaryPicResponse, ),
            'auth': ['APIKey'],
            'endpoint_path':
            '/hr/v2/index/{indexname}/resume/{resume_id}/pic/',
            'operation_id':
            'get_pic_get',
            'http_method':
            'GET',
            'servers':
            None,
        },
                                              params_map={
                                                  'all': [
                                                      'indexname',
                                                      'resume_id',
                                                  ],
                                                  'required': [
                                                      'indexname',
                                                      'resume_id',
                                                  ],
                                                  'nullable': [],
                                                  'enum': [],
                                                  'validation': []
                                              },
                                              root_map={
                                                  'validations': {},
                                                  'allowed_values': {},
                                                  'openapi_types': {
                                                      'indexname': (str, ),
                                                      'resume_id': (str, ),
                                                  },
                                                  'attribute_map': {
                                                      'indexname': 'indexname',
                                                      'resume_id': 'resume_id',
                                                  },
                                                  'location_map': {
                                                      'indexname': 'path',
                                                      'resume_id': 'path',
                                                  },
                                                  'collection_format_map': {}
                                              },
                                              headers_map={
                                                  'accept':
                                                  ['application/json'],
                                                  'content_type': [],
                                              },
                                              api_client=api_client)
        self.get_resume_get_endpoint = _Endpoint(settings={
            'response_type': (GetItemResponse, ),
            'auth': ['APIKey'],
            'endpoint_path':
            '/hr/v2/index/{indexname}/resume/{resume_id}/',
            'operation_id':
            'get_resume_get',
            'http_method':
            'GET',
            'servers':
            None,
        },
                                                 params_map={
                                                     'all': [
                                                         'indexname',
                                                         'resume_id',
                                                     ],
                                                     'required': [
                                                         'indexname',
                                                         'resume_id',
                                                     ],
                                                     'nullable': [],
                                                     'enum': [],
                                                     'validation': []
                                                 },
                                                 root_map={
                                                     'validations': {},
                                                     'allowed_values': {},
                                                     'openapi_types': {
                                                         'indexname': (str, ),
                                                         'resume_id': (str, ),
                                                     },
                                                     'attribute_map': {
                                                         'indexname':
                                                         'indexname',
                                                         'resume_id':
                                                         'resume_id',
                                                     },
                                                     'location_map': {
                                                         'indexname': 'path',
                                                         'resume_id': 'path',
                                                     },
                                                     'collection_format_map':
                                                     {}
                                                 },
                                                 headers_map={
                                                     'accept':
                                                     ['application/json'],
                                                     'content_type': [],
                                                 },
                                                 api_client=api_client)
        self.patch_resume_patch_endpoint = _Endpoint(
            settings={
                'response_type': (PatchItemResponse, ),
                'auth': ['APIKey'],
                'endpoint_path':
                '/hr/v2/index/{indexname}/resume/{resume_id}/',
                'operation_id': 'patch_resume_patch',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'indexname',
                    'resume_id',
                    'patch_item_request',
                    'src_lang',
                ],
                'required': [
                    'indexname',
                    'resume_id',
                    'patch_item_request',
                ],
                'nullable': [],
                'enum': [
                    'src_lang',
                ],
                'validation': []
            },
            root_map={
                'validations': {},
                'allowed_values': {
                    ('src_lang', ): {
                        "PT": "pt",
                        "IT": "it",
                        "EN": "en",
                        "DE": "de",
                        "FR": "fr",
                        "ES": "es"
                    },
                },
                'openapi_types': {
                    'indexname': (str, ),
                    'resume_id': (str, ),
                    'patch_item_request': (PatchItemRequest, ),
                    'src_lang': (str, ),
                },
                'attribute_map': {
                    'indexname': 'indexname',
                    'resume_id': 'resume_id',
                    'src_lang': 'src_lang',
                },
                'location_map': {
                    'indexname': 'path',
                    'resume_id': 'path',
                    'patch_item_request': 'body',
                    'src_lang': 'query',
                },
                'collection_format_map': {}
            },
            headers_map={
                'accept': ['application/json'],
                'content_type': ['application/json']
            },
            api_client=api_client)
        self.resume_status_get_endpoint = _Endpoint(
            settings={
                'response_type': (ResumeResponsesStatus, ),
                'auth': ['APIKey'],
                'endpoint_path':
                '/hr/v2/index/{indexname}/resume/{resume_id}/status/',
                'operation_id': 'resume_status_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'indexname',
                    'resume_id',
                ],
                'required': [
                    'indexname',
                    'resume_id',
                ],
                'nullable': [],
                'enum': [],
                'validation': []
            },
            root_map={
                'validations': {},
                'allowed_values': {},
                'openapi_types': {
                    'indexname': (str, ),
                    'resume_id': (str, ),
                },
                'attribute_map': {
                    'indexname': 'indexname',
                    'resume_id': 'resume_id',
                },
                'location_map': {
                    'indexname': 'path',
                    'resume_id': 'path',
                },
                'collection_format_map': {}
            },
            headers_map={
                'accept': ['application/json'],
                'content_type': [],
            },
            api_client=api_client)
        self.update_pic_put_endpoint = _Endpoint(settings={
            'response_type': (PatchItemResponse, ),
            'auth': ['APIKey'],
            'endpoint_path':
            '/hr/v2/index/{indexname}/resume/{resume_id}/pic/',
            'operation_id':
            'update_pic_put',
            'http_method':
            'PUT',
            'servers':
            None,
        },
                                                 params_map={
                                                     'all': [
                                                         'indexname',
                                                         'resume_id',
                                                         'update_pic_request',
                                                     ],
                                                     'required': [
                                                         'indexname',
                                                         'resume_id',
                                                         'update_pic_request',
                                                     ],
                                                     'nullable': [],
                                                     'enum': [],
                                                     'validation': []
                                                 },
                                                 root_map={
                                                     'validations': {},
                                                     'allowed_values': {},
                                                     'openapi_types': {
                                                         'indexname': (str, ),
                                                         'resume_id': (str, ),
                                                         'update_pic_request':
                                                         (UpdatePicRequest, ),
                                                     },
                                                     'attribute_map': {
                                                         'indexname':
                                                         'indexname',
                                                         'resume_id':
                                                         'resume_id',
                                                     },
                                                     'location_map': {
                                                         'indexname':
                                                         'path',
                                                         'resume_id':
                                                         'path',
                                                         'update_pic_request':
                                                         'body',
                                                     },
                                                     'collection_format_map':
                                                     {}
                                                 },
                                                 headers_map={
                                                     'accept':
                                                     ['application/json'],
                                                     'content_type':
                                                     ['application/json']
                                                 },
                                                 api_client=api_client)
        self.update_resume_put_endpoint = _Endpoint(
            settings={
                'response_type': (BaseItemIdResponse, ),
                'auth': ['APIKey'],
                'endpoint_path':
                '/hr/v2/index/{indexname}/resume/{resume_id}/',
                'operation_id': 'update_resume_put',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'indexname',
                    'resume_id',
                    'update_item_request',
                    'src_lang',
                ],
                'required': [
                    'indexname',
                    'resume_id',
                    'update_item_request',
                ],
                'nullable': [],
                'enum': [
                    'src_lang',
                ],
                'validation': []
            },
            root_map={
                'validations': {},
                'allowed_values': {
                    ('src_lang', ): {
                        "PT": "pt",
                        "IT": "it",
                        "EN": "en",
                        "DE": "de",
                        "FR": "fr",
                        "ES": "es"
                    },
                },
                'openapi_types': {
                    'indexname': (str, ),
                    'resume_id': (str, ),
                    'update_item_request': (UpdateItemRequest, ),
                    'src_lang': (str, ),
                },
                'attribute_map': {
                    'indexname': 'indexname',
                    'resume_id': 'resume_id',
                    'src_lang': 'src_lang',
                },
                'location_map': {
                    'indexname': 'path',
                    'resume_id': 'path',
                    'update_item_request': 'body',
                    'src_lang': 'query',
                },
                'collection_format_map': {}
            },
            headers_map={
                'accept': ['application/json'],
                'content_type': ['application/json']
            },
            api_client=api_client)

    def add_resume_post(self, indexname, file_item_request, **kwargs):
        """Add Resume  # noqa: E501

         This method adds a resume to *indexname* and assigns it a *resume_id* (namely, a Unique Universal ID or UUID4).  On the right, we provide an example of input structure that corresponds to the result of the method [Parse Resume](https://api.inda.ai/hr/docs/v2/#operation/parse_resume__POST). However, the input structure is customizable. Further details can be found in the [Resume Model](https://api.inda.ai/hr/docs/v2/#tag/Resume) section.  Entities among skills, job (or position) titles and languages are automatically mapped by INDAto the adopted knowledge base, so that users can leverage on standardized values.Original values and entity IDs are available in *Details.RawValues* and *Details.Code*, respectively.Unrecognized items are ignored and not indexed, except for the *WorkExperiences.PositionTitle* entities.  This method adds the resume to be processed to the server's task queue and return immediately the *resume_id*. Note that the document may not successfully conclude the processing pipeline (e.g., it may be discarded because duplicate of one of the documents already present in the *indexname*), and thus it may not be actually added to the index.  In order to verify the resume status, the user can use the *resume_id* through the following methods: + [Resume Status](https://api.inda.ai/hr/docs/v2/#operation/resume_status__GET) + [Get Failures](https://api.inda.ai/hr/docs/v2/#operation/get_failures__GET)  For a synchronous approach, use the *sync* query parameter: if set to *true*, the resume is processed immediately. However, for standard usage in production environments, we recommend relying on the asynchronous strategy by ignoring  this parameter, in order to reduce the response times (due to the heterogeneity of resumes, the response time of each  resume processing can vary substantially among different documents).  Please note that, for user's convenience, the [API credits requests](https://api.inda.ai/hr/docs/v2/#tag/Credits-Management) assume that the  synchronous approach is named as *Add Resume Sync*, so that it can be easily distinguished from the asynchronous  *Add Resume*.    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.add_resume_post(indexname, file_item_request, async_req=True)
        >>> result = thread.get()

        Args:
            indexname (str):
            file_item_request (FileItemRequest):

        Keyword Args:
            sync (bool): Optional. Whether to wait for the resume processing or not.. [optional] if omitted the server will use the default value of False
            resume_id (str): Optional. ID to use for the resume. Already existing IDs will cause a 409 error.. [optional]
            src_lang (str): Optional. Language in which the following *Data* entities are expressed: *Skills*, *WorkExperiences.Skills*, *JobTitles*, *WorkExperiences.PositionTitle* and *Languages*.If missing, the detected *Attachment.CV.File* language is assumed as `src_lang`.. [optional]
            dst_lang (str): Optional. Destination language in which the following *Data* entities are translated: *Skills*, *WorkExperiences.Skills*, *JobTitles*, *WorkExperiences.PositionTitle* and *Languages*.If missing, the input or detected `src_lang` is assumed as `dst_lang`.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ItemIdResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get('async_req', False)
        kwargs['_return_http_data_only'] = kwargs.get('_return_http_data_only',
                                                      True)
        kwargs['_preload_content'] = kwargs.get('_preload_content', True)
        kwargs['_request_timeout'] = kwargs.get('_request_timeout', None)
        kwargs['_check_input_type'] = kwargs.get('_check_input_type', True)
        kwargs['_check_return_type'] = kwargs.get('_check_return_type', True)
        kwargs['_spec_property_naming'] = kwargs.get('_spec_property_naming',
                                                     False)
        kwargs['_content_type'] = kwargs.get('_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['indexname'] = \
            indexname
        kwargs['file_item_request'] = \
            file_item_request
        return self.add_resume_post_endpoint.call_with_http_info(**kwargs)

    def delete_pic_delete(self, indexname, resume_id, **kwargs):
        """Delete Pic  # noqa: E501

         This method deletes the profile picture associated with the resume *resume_id* and sets its profile picture to the default one.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_pic_delete(indexname, resume_id, async_req=True)
        >>> result = thread.get()

        Args:
            indexname (str):
            resume_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            DeleteItemResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get('async_req', False)
        kwargs['_return_http_data_only'] = kwargs.get('_return_http_data_only',
                                                      True)
        kwargs['_preload_content'] = kwargs.get('_preload_content', True)
        kwargs['_request_timeout'] = kwargs.get('_request_timeout', None)
        kwargs['_check_input_type'] = kwargs.get('_check_input_type', True)
        kwargs['_check_return_type'] = kwargs.get('_check_return_type', True)
        kwargs['_spec_property_naming'] = kwargs.get('_spec_property_naming',
                                                     False)
        kwargs['_content_type'] = kwargs.get('_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['indexname'] = \
            indexname
        kwargs['resume_id'] = \
            resume_id
        return self.delete_pic_delete_endpoint.call_with_http_info(**kwargs)

    def delete_resume_delete(self, indexname, resume_id, **kwargs):
        """Delete Resume  # noqa: E501

         This method deletes the resume associated with *resume_id* from the index *indexname*.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_resume_delete(indexname, resume_id, async_req=True)
        >>> result = thread.get()

        Args:
            indexname (str):
            resume_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            DeleteItemResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get('async_req', False)
        kwargs['_return_http_data_only'] = kwargs.get('_return_http_data_only',
                                                      True)
        kwargs['_preload_content'] = kwargs.get('_preload_content', True)
        kwargs['_request_timeout'] = kwargs.get('_request_timeout', None)
        kwargs['_check_input_type'] = kwargs.get('_check_input_type', True)
        kwargs['_check_return_type'] = kwargs.get('_check_return_type', True)
        kwargs['_spec_property_naming'] = kwargs.get('_spec_property_naming',
                                                     False)
        kwargs['_content_type'] = kwargs.get('_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['indexname'] = \
            indexname
        kwargs['resume_id'] = \
            resume_id
        return self.delete_resume_delete_endpoint.call_with_http_info(**kwargs)

    def get_cv_get(self, indexname, resume_id, **kwargs):
        """Get CV  # noqa: E501

         This method returns the Base64 encoding and the extension of the document associated  with the resume *resume_id*.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_cv_get(indexname, resume_id, async_req=True)
        >>> result = thread.get()

        Args:
            indexname (str):
            resume_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            BinaryItemResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get('async_req', False)
        kwargs['_return_http_data_only'] = kwargs.get('_return_http_data_only',
                                                      True)
        kwargs['_preload_content'] = kwargs.get('_preload_content', True)
        kwargs['_request_timeout'] = kwargs.get('_request_timeout', None)
        kwargs['_check_input_type'] = kwargs.get('_check_input_type', True)
        kwargs['_check_return_type'] = kwargs.get('_check_return_type', True)
        kwargs['_spec_property_naming'] = kwargs.get('_spec_property_naming',
                                                     False)
        kwargs['_content_type'] = kwargs.get('_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['indexname'] = \
            indexname
        kwargs['resume_id'] = \
            resume_id
        return self.get_cv_get_endpoint.call_with_http_info(**kwargs)

    def get_cv_text_get(self, indexname, resume_id, **kwargs):
        """Get CV Text  # noqa: E501

         This method returns the text of the document associated with the resume *resume_id*. Note that this method merely returns the text, since the extraction has occurred during the add/update of the resume.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_cv_text_get(indexname, resume_id, async_req=True)
        >>> result = thread.get()

        Args:
            indexname (str):
            resume_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            DocumentTextResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get('async_req', False)
        kwargs['_return_http_data_only'] = kwargs.get('_return_http_data_only',
                                                      True)
        kwargs['_preload_content'] = kwargs.get('_preload_content', True)
        kwargs['_request_timeout'] = kwargs.get('_request_timeout', None)
        kwargs['_check_input_type'] = kwargs.get('_check_input_type', True)
        kwargs['_check_return_type'] = kwargs.get('_check_return_type', True)
        kwargs['_spec_property_naming'] = kwargs.get('_spec_property_naming',
                                                     False)
        kwargs['_content_type'] = kwargs.get('_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['indexname'] = \
            indexname
        kwargs['resume_id'] = \
            resume_id
        return self.get_cv_text_get_endpoint.call_with_http_info(**kwargs)

    def get_pic_get(self, indexname, resume_id, **kwargs):
        """Get Pic  # noqa: E501

         This method returns the Base64 encoding and the extension of the profile picture associated with the resume *resume_id*.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_pic_get(indexname, resume_id, async_req=True)
        >>> result = thread.get()

        Args:
            indexname (str):
            resume_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            BinaryPicResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get('async_req', False)
        kwargs['_return_http_data_only'] = kwargs.get('_return_http_data_only',
                                                      True)
        kwargs['_preload_content'] = kwargs.get('_preload_content', True)
        kwargs['_request_timeout'] = kwargs.get('_request_timeout', None)
        kwargs['_check_input_type'] = kwargs.get('_check_input_type', True)
        kwargs['_check_return_type'] = kwargs.get('_check_return_type', True)
        kwargs['_spec_property_naming'] = kwargs.get('_spec_property_naming',
                                                     False)
        kwargs['_content_type'] = kwargs.get('_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['indexname'] = \
            indexname
        kwargs['resume_id'] = \
            resume_id
        return self.get_pic_get_endpoint.call_with_http_info(**kwargs)

    def get_resume_get(self, indexname, resume_id, **kwargs):
        """Get Resume  # noqa: E501

         This method returns the information related to the resume stored with id *resume_id* in the index *indexname*.  As reported in the schema below, the method has two different response schemas: + a *4xx* response is returned when the resume is still in the processing queue, if the processing failed, or if its *resume_id* has never been seen; + a *200* response is returned if the resume has been successfully processed and inserted in the index.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_resume_get(indexname, resume_id, async_req=True)
        >>> result = thread.get()

        Args:
            indexname (str):
            resume_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GetItemResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get('async_req', False)
        kwargs['_return_http_data_only'] = kwargs.get('_return_http_data_only',
                                                      True)
        kwargs['_preload_content'] = kwargs.get('_preload_content', True)
        kwargs['_request_timeout'] = kwargs.get('_request_timeout', None)
        kwargs['_check_input_type'] = kwargs.get('_check_input_type', True)
        kwargs['_check_return_type'] = kwargs.get('_check_return_type', True)
        kwargs['_spec_property_naming'] = kwargs.get('_spec_property_naming',
                                                     False)
        kwargs['_content_type'] = kwargs.get('_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['indexname'] = \
            indexname
        kwargs['resume_id'] = \
            resume_id
        return self.get_resume_get_endpoint.call_with_http_info(**kwargs)

    def patch_resume_patch(self, indexname, resume_id, patch_item_request,
                           **kwargs):
        """Patch Resume  # noqa: E501

         This method updates the information related to the resume stored with id *resume_id*.  This method accepts an application/json body with the same structure as [Add Resume](https://api.inda.ai/hr/docs/v2/#operation/add_resume__POST), however in this case all fields are optional. Fields that contain differences between the corresponding original ones are substituted, while new fields are added. Bear in mind that lists are considered as singular value, therefore to modify an entry in a list it is necessary to insert the full list.  Note that this method only modifies the information; in order to change the attached file, please refer to the method [Update Resume](https://api.inda.ai/hr/docs/v2/#operation/update_resume__PUT).  Entities among skills, job (or position) titles and languages are automatically mapped by INDAto the adopted knowledge base, so that users can leverage on standardized values.Original values and entity IDs are available in *Details.RawValues* and *Details.Code*, respectively.Unrecognized items are ignored and not indexed, except for the *WorkExperiences.PositionTitle* entities.  Please note that, unlike the [Add Resume](https://api.inda.ai/hr/docs/v2/#operation/add_resume__POST), this function does not allowusers to set a `dst_lang`, as the one used at index time cannot be changed.It can be retrieved by accessing the *Metadata.Language* field.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.patch_resume_patch(indexname, resume_id, patch_item_request, async_req=True)
        >>> result = thread.get()

        Args:
            indexname (str):
            resume_id (str):
            patch_item_request (PatchItemRequest):

        Keyword Args:
            src_lang (str): Optional. Language in which the following *Data* entities are expressed: *Skills*, *WorkExperiences.Skills*, *JobTitles*, *WorkExperiences.PositionTitle* and *Languages*.If missing, the indexed *Attachment.CV.File* language is assumed as `src_lang`.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PatchItemResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get('async_req', False)
        kwargs['_return_http_data_only'] = kwargs.get('_return_http_data_only',
                                                      True)
        kwargs['_preload_content'] = kwargs.get('_preload_content', True)
        kwargs['_request_timeout'] = kwargs.get('_request_timeout', None)
        kwargs['_check_input_type'] = kwargs.get('_check_input_type', True)
        kwargs['_check_return_type'] = kwargs.get('_check_return_type', True)
        kwargs['_spec_property_naming'] = kwargs.get('_spec_property_naming',
                                                     False)
        kwargs['_content_type'] = kwargs.get('_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['indexname'] = \
            indexname
        kwargs['resume_id'] = \
            resume_id
        kwargs['patch_item_request'] = \
            patch_item_request
        return self.patch_resume_patch_endpoint.call_with_http_info(**kwargs)

    def resume_status_get(self, indexname, resume_id, **kwargs):
        """Resume Status  # noqa: E501

         This method returns the status of a resume, which can be any of the following: + *Processing*: the resume is in INDA process queues; + *Available*: the resume is in the index and is available to the user; + *Duplicate*: the resume was a duplicate, refer to the indicated *DuplicateID* to retrieve the already  indexed one; + *Failed*: the processing of the input failed; + *Missing*: none of the previous; the *resume_id* may be wrong or corresponding to a deleted resume.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.resume_status_get(indexname, resume_id, async_req=True)
        >>> result = thread.get()

        Args:
            indexname (str):
            resume_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ResumeResponsesStatus
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get('async_req', False)
        kwargs['_return_http_data_only'] = kwargs.get('_return_http_data_only',
                                                      True)
        kwargs['_preload_content'] = kwargs.get('_preload_content', True)
        kwargs['_request_timeout'] = kwargs.get('_request_timeout', None)
        kwargs['_check_input_type'] = kwargs.get('_check_input_type', True)
        kwargs['_check_return_type'] = kwargs.get('_check_return_type', True)
        kwargs['_spec_property_naming'] = kwargs.get('_spec_property_naming',
                                                     False)
        kwargs['_content_type'] = kwargs.get('_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['indexname'] = \
            indexname
        kwargs['resume_id'] = \
            resume_id
        return self.resume_status_get_endpoint.call_with_http_info(**kwargs)

    def update_pic_put(self, indexname, resume_id, update_pic_request,
                       **kwargs):
        """Update Pic  # noqa: E501

         This method updates the profile picture associated with the resume *resume_id*.  The supported extensions are <code style='color: #333333; opacity: 0.9'>png</code>, <code style='color: #333333; opacity: 0.9'>jpg</code>, <code style='color: #333333; opacity: 0.9'>jpeg</code>.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_pic_put(indexname, resume_id, update_pic_request, async_req=True)
        >>> result = thread.get()

        Args:
            indexname (str):
            resume_id (str):
            update_pic_request (UpdatePicRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PatchItemResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get('async_req', False)
        kwargs['_return_http_data_only'] = kwargs.get('_return_http_data_only',
                                                      True)
        kwargs['_preload_content'] = kwargs.get('_preload_content', True)
        kwargs['_request_timeout'] = kwargs.get('_request_timeout', None)
        kwargs['_check_input_type'] = kwargs.get('_check_input_type', True)
        kwargs['_check_return_type'] = kwargs.get('_check_return_type', True)
        kwargs['_spec_property_naming'] = kwargs.get('_spec_property_naming',
                                                     False)
        kwargs['_content_type'] = kwargs.get('_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['indexname'] = \
            indexname
        kwargs['resume_id'] = \
            resume_id
        kwargs['update_pic_request'] = \
            update_pic_request
        return self.update_pic_put_endpoint.call_with_http_info(**kwargs)

    def update_resume_put(self, indexname, resume_id, update_item_request,
                          **kwargs):
        """Update Resume  # noqa: E501

         This method updates both the information and the CV file (*Data.Attachments.CV.File*) related to the resume stored with  id *resume_id*.  This method manages to update the structured data in the same way [Patch Resume](https://api.inda.ai/hr/docs/v2/#operation/patch_resume__PATCH) does as well as  updating the corresponding CV file. It verifies if the file is duplicate with respect to the data already present into the *indexname*. If it finds a  possible duplicate with the same *resume_id* (if one is reuploading the same CV file) it proceeds updating the  structured data, skipping the file update, while it manages to completely delete the item *resume_id* if the file is  found on *indexname* but associated with a resume with different *resume_id*.  The method will enqueue the task and immediately return a response in an asynchronous fashion. In order to verify the  *resume_id* status one could rely on: + [Resume Status](https://api.inda.ai/hr/docs/v2/#operation/resume_status__GET) + [Get Failures](https://api.inda.ai/hr/docs/v2/#operation/get_failures__GET)  Entities among skills, job (or position) titles and languages are automatically mapped by INDAto the adopted knowledge base, so that users can leverage on standardized values.Original values and entity IDs are available in *Details.RawValues* and *Details.Code*, respectively.Unrecognized items are ignored and not indexed, except for the *WorkExperiences.PositionTitle* entities.  Please note that, unlike the [Add Resume](https://api.inda.ai/hr/docs/v2/#operation/add_resume__POST), this function does not allowusers to set a `dst_lang`, as the one used at index time cannot be changed.It can be retrieved by accessing the *Metadata.Language* field.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_resume_put(indexname, resume_id, update_item_request, async_req=True)
        >>> result = thread.get()

        Args:
            indexname (str):
            resume_id (str):
            update_item_request (UpdateItemRequest):

        Keyword Args:
            src_lang (str): Optional. Language in which the following *Data* entities are expressed: *Skills*, *WorkExperiences.Skills*, *JobTitles*, *WorkExperiences.PositionTitle* and *Languages*.If missing, the detected *Attachment.CV.File* language is assumed as `src_lang`.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            BaseItemIdResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get('async_req', False)
        kwargs['_return_http_data_only'] = kwargs.get('_return_http_data_only',
                                                      True)
        kwargs['_preload_content'] = kwargs.get('_preload_content', True)
        kwargs['_request_timeout'] = kwargs.get('_request_timeout', None)
        kwargs['_check_input_type'] = kwargs.get('_check_input_type', True)
        kwargs['_check_return_type'] = kwargs.get('_check_return_type', True)
        kwargs['_spec_property_naming'] = kwargs.get('_spec_property_naming',
                                                     False)
        kwargs['_content_type'] = kwargs.get('_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['indexname'] = \
            indexname
        kwargs['resume_id'] = \
            resume_id
        kwargs['update_item_request'] = \
            update_item_request
        return self.update_resume_put_endpoint.call_with_http_info(**kwargs)
