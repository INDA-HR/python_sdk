"""
    INDA HR - INtelligent Data Analysis for HR

     # Introduction  **INDA (INtelligent Data Analysis)** is an [Intervieweb](https://www.intervieweb.it/hrm/)  AI solution provided as a RESTful API.  The INDA pricing model is *credits-based*, which means that a certain number of credits is associated to each API request. Hence, users have to purchase a certain amount of credits (established according to their needs) which will be reduced  at each API call. INDA accepts and processes a user's request only if their credits quota is grater than - or,  at least, equal to - the number of credits required by that request. To obtain further details on the pricing, please visit our [site](https://inda.ai) or contact us.    INDA HR embraces a wide range of functionalities to manage the main elements of a recruitment process:   + [**candidate**](https://api.inda.ai/hr/docs/v2/#tag/Resume-Management) (hereafter also referred to as **resume** or **applicant**), or rather a  person looking for a job;  + [**job advertisement**](https://api.inda.ai/hr/docs/v2/#tag/JobAd-Management) (hereafter also referred to as **job ad**), which is a document   that collects all the main information and details about a job vacancy;  + [**application**](https://api.inda.ai/hr/docs/v2/#tag/Application-Management), that binds candidates to job ads; it is generated whenever a  candidate applies for a job.  Each of them has a specific set of methods that grants users the ability to create, read, update and delete the relative  documents, plus some special features based on AI approaches (such as *document parsing* or *semantic search*). They can be explored in their respective sections.  Data about the listed document types can be enriched by connecting them to other INDA supported entities, such as  [**companies**](https://api.inda.ai/hr/docs/v2/#tag/Company-Management) and [**universities**](https://api.inda.ai/hr/docs/v2/#tag/Universities), so that recruiters may  get a better and more detailed idea on the candidates' experiences and acquired skills.  All the functionalities mentioned above are meant to help recruiters during the talent acquisition process,  by exploiting the power of AI systems. Among the advantages a recruiter has by using this kind of systems, tackling the bias problem is surely one of the  most relevant. Bias in recruitment is a serious issue that affect both recruiters and candidates, since it may cause wrong hiring  decisions. As we care a lot about this problem, we are constantly working on reduce the bias in original data so that INDA  results may be as fair as possible. As of now, in order to tackle the bias issue, INDA automatically ignores specific fields (such as name, gender, age  and nationality) during the initial processing of each candidate data.  Furthermore, we decided to let users collect data of various types, including personal or sensitive details, but we  do not allow their usage if it is different from statistical purposes; our aim is to discourage recruiters from  focusing on candidates' personal information, and to put their attention on the candidate's skills and abilities.    We want to help recruiters to prevent any kind of bias while searching for the most valuable candidates they really need.    The following documentation is addressed both to developers, in order to provide all technical details for INDA integration, and to managers, to guide them in the exploration of the implementation possibilities.  The host of the API is [https://api.inda.ai/hr/v2/](https://api.inda.ai/hr/v2/). We recommend to check the API version and build (displayed near the documentation title). You can contact us at support@intervieweb.it in case of problems, suggestions, or particular needs.  The search panel on the left can be used to navigate through the documentation and provides an overview of the API structure. On the right, you can find (*i*) the url of the method, (*ii*) an example of request body (if present), and (*iii*) an example of response for each response code. Finally, in the central section of each API method, you can find (*i*) a general description of the purpose of the method, (*ii*) details on parameters and request body schema (if present), and (*iii*) details on response schema, error models, and error codes.    # noqa: E501

    The version of the OpenAPI document: 2.28194
    Contact: info@intervieweb.it
    Generated by: https://openapi-generator.tech
"""

import re  # noqa: F401
import sys  # noqa: F401

from inda_hr.api_client import ApiClient, Endpoint as _Endpoint
from inda_hr.model_utils import (  # noqa: F401
    check_allowed_values, check_validations, date, datetime, file_type,
    none_type, validate_and_convert_types)
from inda_hr.model.custom_fields import CustomFields
from inda_hr.model.customized_fields import CustomizedFields
from inda_hr.model.http_validation_error import HTTPValidationError
from inda_hr.model.mapping_response import MappingResponse


class CustomizationsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.customize_resumes_post_endpoint = _Endpoint(
            settings={
                'response_type': (CustomizedFields, ),
                'auth': ['APIKey'],
                'endpoint_path': '/hr/v2/index/{indexname}/resumes/customize/',
                'operation_id': 'customize_resumes_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'indexname',
                    'custom_fields',
                ],
                'required': [
                    'indexname',
                    'custom_fields',
                ],
                'nullable': [],
                'enum': [],
                'validation': []
            },
            root_map={
                'validations': {},
                'allowed_values': {},
                'openapi_types': {
                    'indexname': (str, ),
                    'custom_fields': (CustomFields, ),
                },
                'attribute_map': {
                    'indexname': 'indexname',
                },
                'location_map': {
                    'indexname': 'path',
                    'custom_fields': 'body',
                },
                'collection_format_map': {}
            },
            headers_map={
                'accept': ['application/json'],
                'content_type': ['application/json']
            },
            api_client=api_client)
        self.get_resume_customizations_get_endpoint = _Endpoint(
            settings={
                'response_type': (MappingResponse, ),
                'auth': ['APIKey'],
                'endpoint_path': '/hr/v2/index/{indexname}/resumes/mapping/',
                'operation_id': 'get_resume_customizations_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'indexname',
                ],
                'required': [
                    'indexname',
                ],
                'nullable': [],
                'enum': [],
                'validation': []
            },
            root_map={
                'validations': {},
                'allowed_values': {},
                'openapi_types': {
                    'indexname': (str, ),
                },
                'attribute_map': {
                    'indexname': 'indexname',
                },
                'location_map': {
                    'indexname': 'path',
                },
                'collection_format_map': {}
            },
            headers_map={
                'accept': ['application/json'],
                'content_type': [],
            },
            api_client=api_client)

    def customize_resumes_post(self, indexname, custom_fields, **kwargs):
        """Customize Resumes  # noqa: E501

         It is possible to customize the resume structure to add fields of various types to it. These can be useful to store user information or to use refined filters in queries.  Fields can be added at anytime but **they cannot be removed** and **field types cannot be changed**! This API call accepts a list of items under *Fields*, each item has the following properties:  + **Field**: Dot-notation position of the desired field in the items. + **Type**: One of the field types described below. + **Params**: Each field type accepts different parameters and they are explained in the code blocks below it.  **String types**  The family of types for long text and singular keywords.  + *keyword*: A short string value supporting only exact-match term queries  ``` {   \"Boost\": Optional[float]          # Multiplicative score boost when executing queries on this field, defaults to 1.0   \"NullValue\": Optional[str]        # Items where this field is missing or null will be indexed with this value instead } ```  + *text*: Long varied sentences and pieces of text; tokenized and analyzed, it supports complex and generic match queries  ``` {   \"Boost\": Optional[float]          # Multiplicative score boost when executing queries on this field, defaults to 1.0 } ```  + *constant_keyword*: A keyword value that must be the same in all documents where it's present  ``` {   \"Value\": Optional[str]      # The value to assign to this field in documents, it will default to the value of the first indexed document if not provided } ```  + *wildcard*: Similar to keyword values, but optimized to support wildcard queries with glob-like patterns  ``` {   \"NullValue\": Optional[str]       # Items where this field is missing or null will be indexed with this value instead } ```  **Numbers**  Numeric types used to express amounts.  + *long*: Long (64bits) integer.  ``` {   \"Boost\": Optional[float]            # Multiplicative score boost when executing queries on this field, defaults to 1.0   \"NullValue\": Optional[int]          # Items where this field is missing or null will be indexed with this value instead   \"Coerce\": Optional[bool]            # Whether ambiguous values should be cast to the required field type, e.g.: str(\"20\") to int(20), defaults to true   \"IgnoreMalformed\": Optional[bool]   # Whether malformed and uncastable values should be ignored or throw an exception, which is the default } ```  + *integer*: Normal (32bits) integer.  ``` {   \"Boost\": Optional[float]            # Multiplicative score boost when executing queries on this field, defaults to 1.0   \"NullValue\": Optional[int]          # Items where this field is missing or null will be indexed with this value instead   \"Coerce\": Optional[bool]            # Whether ambiguous values should be cast to the required field type, e.g.: str(\"20\") to int(20), defaults to true   \"IgnoreMalformed\": Optional[bool]   # Whether malformed and uncastable values should be ignored or throw an exception, which is the default } ```  + *short*: Short (16bits) integer.  ``` {   \"Boost\": Optional[float]            # Multiplicative score boost when executing queries on this field, defaults to 1.0   \"NullValue\": Optional[int]          # Items where this field is missing or null will be indexed with this value instead   \"Coerce\": Optional[bool]            # Whether ambiguous values should be cast to the required field type, e.g.: str(\"20\") to int(20), defaults to true   \"IgnoreMalformed\": Optional[bool]   # Whether malformed and uncastable values should be ignored or throw an exception, which is the default } ```  + *byte*: Single byte (8bits) integer.  ``` {   \"Boost\": Optional[float]            # Multiplicative score boost when executing queries on this field, defaults to 1.0   \"NullValue\": Optional[int]          # Items where this field is missing or null will be indexed with this value instead   \"Coerce\": Optional[bool]            # Whether ambiguous values should be cast to the required field type, e.g.: str(\"20\") to int(20), defaults to true   \"IgnoreMalformed\": Optional[bool]   # Whether malformed and uncastable values should be ignored or throw an exception, which is the default } ```  + *double*: Double precision (64bits) floating point number.  ``` {   \"Boost\": Optional[float]                # Multiplicative score boost when executing queries on this field, defaults to 1.0   \"NullValue\": Optional[float]            # Items where this field is missing or null will be indexed with this value instead   \"Coerce\": Optional[bool]                # Whether ambiguous values should be cast to the required field type, e.g.: str(\"20\") to int(20), defaults to true   \"IgnoreMalformed\": Optional[bool]       # Whether malformed and uncastable values should be ignored or throw an exception, which is the default } ```  + *float*: Single precision (32bits) floating point number.  ``` {   \"Boost\": Optional[float]                # Multiplicative score boost when executing queries on this field, defaults to 1.0   \"NullValue\": Optional[float]            # Items where this field is missing or null will be indexed with this value instead   \"Coerce\": Optional[bool]                # Whether ambiguous values should be cast to the required field type, e.g.: str(\"20\") to int(20), defaults to true   \"IgnoreMalformed\": Optional[bool]       # Whether malformed and uncastable values should be ignored or throw an exception, which is the default } ```  + *half_float*: Half precision (16bits) floating point number.  ``` {   \"Boost\": Optional[float]                # Multiplicative score boost when executing queries on this field, defaults to 1.0   \"NullValue\": Optional[float]            # Items where this field is missing or null will be indexed with this value instead   \"Coerce\": Optional[bool]                # Whether ambiguous values should be cast to the required field type, e.g.: str(\"20\") to int(20), defaults to true   \"IgnoreMalformed\": Optional[bool]       # Whether malformed and uncastable values should be ignored or throw an exception, which is the default } ```  + *scaled_float*: A floating point number backed by a long integer, scaled by a fixed double factor.  ``` {   \"ScalingFactor\": float                  # Scaling factor   \"Boost\": Optional[float]                # Multiplicative score boost when executing queries on this field, defaults to 1.0   \"NullValue\": Optional[int]              # Items where this field is missing or null will be indexed with this value instead   \"Coerce\": Optional[bool]                # Whether ambiguous values should be cast to the required field type, e.g.: str(\"20\") to int(20), defaults to true   \"IgnoreMalformed\": Optional[bool]       # Whether malformed and uncastable values should be ignored or throw an exception, which is the default } ```  **Objects and relational types**  Representations of data structures, i.e. lists and maps/dictionaries.  + *object*: A JSON object.  ``` {   \"Dynamic\": Optional[bool]   # Whether the mapping for this object can be further modified in the future, defaults to true (and you should leave it like that) } ```  + *flattened*: An entire JSON object as a single field value.  ``` {   \"Dynamic\": Optional[bool]   # Whether the mapping for this object can be further modified in the future, defaults to true (and you should leave it like that)   \"Boost\": Optional[float]    # Multiplicative score boost when executing queries on this field and its subfields, defaults to 1.0 } ```  + *nested*: A JSON object that preserves the relationship between its subfields.  ``` {   \"Dynamic\": Optional[bool]   # Whether the mapping for this object can be further modified in the future, defaults to true (and you should leave it like that) } ```  **Range types**  Fields defined as ranges of values.  + *integer_range*: A range of integers (32bits).  ``` {   \"Boost\": Optional[float]                # Multiplicative score boost when executing queries on this field, defaults to 1.0   \"Coerce\": Optional[bool]                # Whether ambiguous values should be cast to the required field type, e.g.: str(\"20\") to int(20), defaults to true } ```  + *long_range*: A range of long (64bits) integers.  ``` {   \"Boost\": Optional[float]                # Multiplicative score boost when executing queries on this field, defaults to 1.0   \"Coerce\": Optional[bool]                # Whether ambiguous values should be cast to the required field type, e.g.: str(\"20\") to int(20), defaults to true } ```  + *float_range*: A range of standard precision (32bits) floating point numbers.  ``` {   \"Boost\": Optional[float]                # Multiplicative score boost when executing queries on this field, defaults to 1.0   \"Coerce\": Optional[bool]                # Whether ambiguous values should be cast to the required field type, e.g.: str(\"20\") to int(20), defaults to true } ```  + *double_range*: A range of double precision (64bits) floating point numbers.  ``` {   \"Boost\": Optional[float]                # Multiplicative score boost when executing queries on this field, defaults to 1.0   \"Coerce\": Optional[bool]                # Whether ambiguous values should be cast to the required field type, e.g.: str(\"20\") to int(20), defaults to true } ```  + *date_range*: A range of dates, using ISO 8601 standard ([YYYY]-[MM]-[DD]T[HH]:[MM]:[SS].[ms]+[HH:MM]).  ``` {   \"Boost\": Optional[float]                # Multiplicative score boost when executing queries on this field, defaults to 1.0   \"Coerce\": Optional[bool]                # Whether ambiguous values should be cast to the required field type, e.g.: str(\"20\") to int(20), defaults to true } ```  + *ip_range*: A range of IP addresses.  ``` {   \"Boost\": Optional[float]                # Multiplicative score boost when executing queries on this field, defaults to 1.0   \"Coerce\": Optional[bool]                # Whether ambiguous values should be cast to the required field type, e.g.: str(\"20\") to int(20), defaults to true } ```  **Spatial data types**  + *geo_point*: Latitude and longitude points, each field must be a map/dictionary containing \"lat\" (latitude) and \"lon\" (longitude) properties, expressed with signed floating point values.  ``` {   \"IgnoreMalformed\": Optional[bool]          # Whether malformed and values should be ignored or throw an exception, which is the default   \"NullValue\": Optional[geo_point]           # Items where this field is missing or null will be indexed with this value instead } ```  + *point*: Arbitrary cartesian points, each field must be a map/dictionary containing \"x\" and \"y\" properties, expressed with signed floating point values.  ``` {   \"IgnoreMalformed\": Optional[bool]          # Whether malformed and values should be ignored or throw an exception, which is the default   \"NullValue\": Optional[point]               # Items where this field is missing or null will be indexed with this value instead } ```  **Other types**  + *binary*: Binary value encoded as a Base64 string.  + *boolean*: true and false values.  ``` {   \"Boost\": Optional[float]          # Multiplicative score boost when executing queries on this field, defaults to 1.0   \"NullValue\": Optional[bool]      # Items where this field is missing or null will be indexed with this value instead } ```  + *date*: Date type, using ISO 8601 standard ([YYYY]-[MM]-[DD]T[HH]:[MM]:[SS].[ms]+[HH:MM]).  ``` {   \"Boost\": Optional[float]              # Multiplicative score boost when executing queries on this field, defaults to 1.0   \"Format\": Optional[str]               # Date format, if different from ISO 8601 (which is the default), we STRONGLY recommend to leave this untouched   \"Locale\": Optional[str]               # Locale to use for dates names or abbreviations, defaults to index locale if present or host locale otherwise   \"IgnoreMalformed\": Optional[bool]     # If true, malformed dates are ignored. If false they throw an exception. Defaults to false.   \"NullValue\": Optional[date]           # Items where this field is missing or null will be indexed with this value instead } ```  + *alias*: Defines an alias for an existing field.  ``` {   \"Path\": str          # Dot-notation position of the field the alias refers to } ```  + *ip*: IPv4 and IPv6 addresses.  ``` {   \"Boost\": Optional[float]          # Multiplicative score boost when executing queries on this field, defaults to 1.0   \"NullValue\": Optional[ip]         # Items where this field is missing or null will be indexed with this value instead } ```  + *histogram*: Pre-aggregated numerical values.  + *dense_vector*: Records dense vectors of float values.  ``` {   \"Dims\": int          # The dimensionality of the vector, up to a maximum of 512 } ```  + *rank_feature*: Records a numeric feature to boost hits at query time.  ``` {   \"PositiveScoreImpact\": Optional[bool]          # Determines whether the rank_feature value affects score positively or negatively, defaults to true (positive) } ```  + *rank_features*: Records multiple named numeric features to boost hits at query time.  ``` {   \"PositiveScoreImpact\": Optional[bool]          # Determines whether the rank_feature value affects score positively or negatively, defaults to true (positive) } ```   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.customize_resumes_post(indexname, custom_fields, async_req=True)
        >>> result = thread.get()

        Args:
            indexname (str):
            custom_fields (CustomFields):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            CustomizedFields
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get('async_req', False)
        kwargs['_return_http_data_only'] = kwargs.get('_return_http_data_only',
                                                      True)
        kwargs['_preload_content'] = kwargs.get('_preload_content', True)
        kwargs['_request_timeout'] = kwargs.get('_request_timeout', None)
        kwargs['_check_input_type'] = kwargs.get('_check_input_type', True)
        kwargs['_check_return_type'] = kwargs.get('_check_return_type', True)
        kwargs['_spec_property_naming'] = kwargs.get('_spec_property_naming',
                                                     False)
        kwargs['_content_type'] = kwargs.get('_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['indexname'] = \
            indexname
        kwargs['custom_fields'] = \
            custom_fields
        return self.customize_resumes_post_endpoint.call_with_http_info(
            **kwargs)

    def get_resume_customizations_get(self, indexname, **kwargs):
        """Get Resume Customizations  # noqa: E501

         A function to retrieve previously customized mappings from indices.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_resume_customizations_get(indexname, async_req=True)
        >>> result = thread.get()

        Args:
            indexname (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            MappingResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get('async_req', False)
        kwargs['_return_http_data_only'] = kwargs.get('_return_http_data_only',
                                                      True)
        kwargs['_preload_content'] = kwargs.get('_preload_content', True)
        kwargs['_request_timeout'] = kwargs.get('_request_timeout', None)
        kwargs['_check_input_type'] = kwargs.get('_check_input_type', True)
        kwargs['_check_return_type'] = kwargs.get('_check_return_type', True)
        kwargs['_spec_property_naming'] = kwargs.get('_spec_property_naming',
                                                     False)
        kwargs['_content_type'] = kwargs.get('_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['indexname'] = \
            indexname
        return self.get_resume_customizations_get_endpoint.call_with_http_info(
            **kwargs)
